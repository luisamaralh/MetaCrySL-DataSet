Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r13
		Type: javax.net.ssl.KeyManager[]
		Statement: $r13 = virtualinvoke $r11.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <io.xlink.wifi.sdk.XlinkTcpService$4: void run()>
		SHA-256: 8269fa4a58e666ba40031be7993cd6bb89dc5390406f46345dbfe0d670eec1a5
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer756)
		Method: <com.baidu.location.f.b.a: byte[] 'if'(java.lang.String,java.lang.String,byte[])>
		SHA-256: 6ebbe18faa56cc601dc41acc4dbb7c3f7bd7b0ec955b87ae23ab8eeeccdbf4c0
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer761)
		Method: <com.baidu.location.f.b.a: byte[] a(java.lang.String,java.lang.String,byte[])>
		SHA-256: 3c8317d15f81eeed24b1a7cccffac4827b3aa6d674975748ccfd1ff00fc60b76
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r11 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer920)
		Method: <io.xlink.wifi.sdk.XlinkTcpService$4: void run()>
		SHA-256: 88f05e8fb2e57f3644de8849b87b12f56258e267f08dfcbca45de480f0924306
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.upd.n: java.lang.String a(java.lang.String)>
		SHA-256: 6c0dbb484cf43cce9d7cb4f0de4c2814b3b3b4ab371d368972e0c550691e352e
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.KeyStore
		Statement: $r9 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer901)
		Method: <io.xlink.wifi.sdk.XlinkTcpService$4: void run()>
		SHA-256: 8f6cb396a59c9c9e5f51b86e25d05e065b235197b25313d5ddda99d6e4900d1f
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5690)
		Method: <io.xlink.wifi.sdk.util.b: byte[] a(int)>
		SHA-256: 6c6310559b2aac11a60db36d5a5fea6926007dbc36e192012246c8f27f7beaa2
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer740)
		Method: <com.baidu.location.f.a.c: java.lang.String a(byte[],boolean)>
		SHA-256: 89f4436b7112dd6f70efcebfdad47e51194497b0f16fde9b52fe9172b5edfcd9
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer757)
		Method: <com.baidu.location.f.b.a: byte[] 'if'(java.lang.String,java.lang.String,byte[])>
		SHA-256: 393b88062174b808dbaf1eb0616b40337f671dd387180145ee05a1070307c064
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1072)
		Method: <com.baidu.location.b.k: java.lang.String 'if'(java.io.File)>
		SHA-256: 7eac44c0863bb60c4df8d99e9b0153b4bf2e98942cbf12aa226f78f0f67c4386
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)
		Method: <com.baidu.location.f.b.a: byte[] a(java.lang.String,java.lang.String,byte[])>
		SHA-256: 150bd5b7f4fa98bd7d19b4334335a3f364b812a82990b17162c6a447c071634b
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <com.baidu.location.b.j: byte[] a(byte[])>
		SHA-256: 15b8623f6a9850846e1bb5b240a633d392f8a7c412b22aa26cde142cfc254534
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer8593)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: 97cbea5739144378ccbd7cd5f12174d97871872314841787c303e8d39dde4d39
		Secure: false
	Object:
		Variable: varReplacer8593
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer8593)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: 60aeb9fd0a685cbe8487c555b885ad0b47dae3d8166115ed0425bcc2321b8a83
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer8591)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: c90f8f733080cdb58d2479653ae87fe6e21d3b5d06e11bf6db9656d9f9ddc95
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: ffde2c3e415be62ad6bfbfe50546823118db13763d58e44ff45979b39cbfde6c
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.upd.n: java.lang.String a(java.io.File)>
		SHA-256: 6c0dbb484cf43cce9d7cb4f0de4c2814b3b3b4ab371d368972e0c550691e352e
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)
		Method: <com.baidu.location.f.b.a: byte[] 'if'(java.lang.String,java.lang.String,byte[])>
		SHA-256: 54800dff0bb6e766eb4162281a69aabd6f6b14628251ecc63b0124d57439446
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.baidu.location.f.a.c: java.lang.String a(byte[],boolean)>
		SHA-256: 4bb5f419639e58782ccdd9119c54776e66212f98bcbc57fc8c320afc68b85313
		Secure: true
	Object:
		Variable: varReplacer762
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer762)
		Method: <com.baidu.location.f.b.a: byte[] a(java.lang.String,java.lang.String,byte[])>
		SHA-256: 442728a73dcbf5e219b8cac715deed42aa65f46430e32c23ed37ecf1143a5dd6
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.cd: java.lang.String a(java.lang.String)>
		SHA-256: 56714a6ff4bb58aab50b08d1be4474766b56926d390344c8d1e93737d001ddf3
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6236)
		Method: <u.upd.n: java.lang.String a(java.lang.String)>
		SHA-256: 1c15c1715679a5a33d522c9d6a61d549fd27e56ecb43597aa828c184ebb81bf4
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer5838)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: cc67bb063aa433f06aa98cdf3c0a106e32eb7ba18972999f7408bcf093bd9f27
		Secure: false
	Object:
		Variable: varReplacer756
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer756)
		Method: <com.baidu.location.f.b.a: byte[] 'if'(java.lang.String,java.lang.String,byte[])>
		SHA-256: c4c6e345cede2cc24c9b133464057288286c2eeb81699970d47feaa4821ebb56
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.baidu.location.f.b.a: byte[] a(java.lang.String,java.lang.String,byte[])>
		SHA-256: d0f6f4706546c156ee289b202709825e5df53f7e4f36e0982c154eb3536bcb6c
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.cd: java.lang.String b(java.lang.String)>
		SHA-256: 5575822e2d8a4009ec4ebe26dad61ce7dd0e90feb0e83168463dd1146f998fa7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <com.baidu.location.b.m: org.apache.http.client.HttpClient 'if'(org.apache.http.params.HttpParams)>
		SHA-256: b90ea4e6ccdfcb9cf556068e1ab227f531b0a17a6e6470df46089b9a5b8eeeba
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <io.xlink.wifi.sdk.util.b: byte[] a(int)>
		SHA-256: c0cb1f3950d1c303a878b272d33cc6b233c283f11853d4c605a6892d1b773e17
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5646)
		Method: <io.xlink.wifi.sdk.util.b: byte[] a(java.lang.String)>
		SHA-256: df46e8b2ca7e9790597b7f71ac08b69e89b0f7f94d7ba8dd535f557f421e2171
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7254)
		Method: <u.aly.cd: java.lang.String a(java.lang.String)>
		SHA-256: b6236200e14dea7004e1b31cd80d94983246e7ce85b8cc95cc6fbcd86e9bf5e5
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer922)
		Method: <io.xlink.wifi.sdk.XlinkTcpService$4: void run()>
		SHA-256: 32df9324969bb5e4983f3db124415ed0b46c5130acd43976574966135cb8b99d
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3966)
		Method: <u.aly.cd: java.lang.String b(java.lang.String)>
		SHA-256: 16277eaabae4c232f55eb99010242c6e39e2d5a2cda6293a35032f81ec7e1073
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4142)
		Method: <u.upd.n: java.lang.String a(java.io.File)>
		SHA-256: 4eb45da2c5191288754e46c8cc623c2d747e4267620343edbb5d3e223fa3bdb0
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: 8d9ed73f76b0cc35336304903ab76cb718c59eb2a0e5d6566d27757d000fd32
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.baidu.location.f.b.a: byte[] 'if'(java.lang.String,java.lang.String,byte[])>
		SHA-256: 47d6482b646d129f902efacb8cf4d55effb2a29b8f1cde136e88a11dffef1390
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.upd.n: java.lang.String b(java.lang.String)>
		SHA-256: 109e805eab3d4cace631799164d3e481165d892f6bcc1491005e78dca97b2190
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer911)
		Method: <io.xlink.wifi.sdk.XlinkTcpService$4: void run()>
		SHA-256: f7261d3f52e7e1cb61b9d1e70c794664d1db80bd2d5a69f4000c6c82181676b9
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4123)
		Method: <u.upd.n: java.lang.String b(java.lang.String)>
		SHA-256: 15097c90c45898c6c3246c6d4c4691b245911214df5d8685c82356af64d9f859
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.baidu.location.b.k: java.lang.String 'if'(java.io.File)>
		SHA-256: 25250c381b14ddfb8a35cf3c609f6b9b108c17b133ece5cceb609f2a7793c7b6
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <io.xlink.wifi.sdk.util.b: byte[] a(java.lang.String)>
		SHA-256: 1411125a9df5bb91eba9f22ce93e4b6b9e0da26b14ac792a3a36ec0f4887efbc
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer762)
		Method: <com.baidu.location.f.b.a: byte[] a(java.lang.String,java.lang.String,byte[])>
		SHA-256: 3956d42dcc748563825f8bf67d9d11b0c9f4d92e9692e8a1921fefa6cb2d4ba1
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1905)
		Method: <com.baidu.location.b.m$a: void <init>(java.security.KeyStore)>
		SHA-256: 19b535246d362de32daf4408d65b33b8ce4bf5779b7ebcf5aa814db0ff0dbe0
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8596)
		Method: <com.umeng.analytics.b: byte[] b(byte[])>
		SHA-256: ef61d7f1c289b073256c81e80ec3c83614cbed14aa0d9c7d63f90c026f0595b7
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer9087)
		Method: <com.baidu.location.b.j: byte[] a(byte[])>
		SHA-256: 9bb3f5873761c5174f34d09fbc3ed8946f277d8307685daf9500c45b93d8edc1
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.umeng.analytics.b: byte[] b(byte[])>
		SHA-256: 8407a152a750198a9cecc8c173b46fb5748136d260fe6f5fbe4a174451640e66
		Secure: true

Findings in Java Class: io.xlink.wifi.sdk.XlinkTcpService$4

	 in Method: void run()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #32df9324969bb5e4983f3db124415ed0b46c5130acd43976574966135cb8b99d)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer922)

		ConstraintError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #88f05e8fb2e57f3644de8849b87b12f56258e267f08dfcbca45de480f0924306)
			First parameter (with value "X509") should be any of {PKIX}
			at statement: $r11 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer920)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #f7261d3f52e7e1cb61b9d1e70c794664d1db80bd2d5a69f4000c6c82181676b9)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: virtualinvoke $r11.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r5, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, $r14, varReplacer923)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, $r14, varReplacer923)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke $r11.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r5, $r10)


Findings in Java Class: com.baidu.location.b.k

	 in Method: java.lang.String 'if'(java.io.File)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #7eac44c0863bb60c4df8d99e9b0153b4bf2e98942cbf12aa226f78f0f67c4386)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: u.upd.n

	 in Method: java.lang.String a(java.io.File)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #4eb45da2c5191288754e46c8cc623c2d747e4267620343edbb5d3e223fa3bdb0)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.baidu.location.b.j

	 in Method: byte[] a(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #9bb3f5873761c5174f34d09fbc3ed8946f277d8307685daf9500c45b93d8edc1)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer9087)


Findings in Java Class: com.baidu.location.f.b.a

	 in Method: byte[] 'if'(java.lang.String,java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer756)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer755, $r3, $r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer755, $r3, $r6)


	 in Method: byte[] a(java.lang.String,java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer760, $r3, $r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer762)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)


Findings in Java Class: com.umeng.analytics.b

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer8592, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer8592, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer8593)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5836, r5, varReplacer5836)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5836, r5, varReplacer5836)


Findings in Java Class: com.baidu.location.b.m$a

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1903, r5, varReplacer1903)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1903, r5, varReplacer1903)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 46

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 1
	ConstraintError: 3
	TypestateError: 2
	RequiredPredicateError: 18
=====================================================================