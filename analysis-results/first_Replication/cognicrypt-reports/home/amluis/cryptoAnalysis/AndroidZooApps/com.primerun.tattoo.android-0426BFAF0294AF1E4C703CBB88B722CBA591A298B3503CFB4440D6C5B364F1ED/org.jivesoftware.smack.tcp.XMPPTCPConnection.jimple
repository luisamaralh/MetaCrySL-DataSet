public class org.jivesoftware.smack.tcp.XMPPTCPConnection extends org.jivesoftware.smack.AbstractXMPPConnection
{
    private static final java.util.logging.Logger LOGGER;
    private static final int QUEUE_SIZE;
    private static org.jivesoftware.smack.tcp.BundleAndDeferCallback defaultBundleAndDeferCallback;
    private static boolean useSmDefault;
    private static boolean useSmResumptionDefault;
    private org.jivesoftware.smack.tcp.BundleAndDeferCallback bundleAndDeferCallback;
    private long clientHandledStanzasCount;
    private final org.jivesoftware.smack.SynchronizationPoint compressSyncPoint;
    private final org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config;
    private boolean disconnectedButResumeable;
    private final org.jivesoftware.smack.SynchronizationPoint initalOpenStreamSend;
    private final org.jivesoftware.smack.SynchronizationPoint maybeCompressFeaturesReceived;
    protected org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader;
    protected org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter;
    private final java.util.Set requestAckPredicates;
    private long serverHandledStanzasCount;
    private int smClientMaxResumptionTime;
    private final org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint;
    private final org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint;
    private int smServerMaxResumptimTime;
    private java.lang.String smSessionId;
    private boolean smWasEnabledAtLeastOnce;
    private java.net.Socket socket;
    private volatile boolean socketClosed;
    private final java.util.Collection stanzaAcknowledgedListeners;
    private final java.util.Map stanzaIdAcknowledgedListeners;
    private java.util.concurrent.BlockingQueue unacknowledgedStanzas;
    private boolean useSm;
    private boolean useSmResumption;
    private boolean usingTLS;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        int varReplacer1811, varReplacer1812;

        nop;

        $r0 = class "Lorg/jivesoftware/smack/tcp/XMPPTCPConnection;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER> = $r2;

        varReplacer1811 = 0;

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmDefault> = varReplacer1811;

        varReplacer1812 = 1;

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumptionDefault> = varReplacer1812;

        return;
    }

    public void <init>(java.lang.CharSequence, java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2, $r3, $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r3 = staticinvoke <org.a.a.e: java.lang.String a(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = staticinvoke <org.a.a.e: java.lang.String b(java.lang.String)>($r4);

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void <init>(java.lang.CharSequence,java.lang.String,java.lang.String)>($r3, $r2, $r4);

        return;
    }

    public void <init>(java.lang.CharSequence, java.lang.String, java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2, $r3;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder $r4;
        org.jivesoftware.smack.ConnectionConfiguration$Builder $r5;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r6;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder builder()>();

        $r5 = virtualinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder: org.jivesoftware.smack.ConnectionConfiguration$Builder setUsernameAndPassword(java.lang.CharSequence,java.lang.String)>($r1, $r2);

        $r4 = (org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder) $r5;

        $r5 = virtualinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder: org.jivesoftware.smack.ConnectionConfiguration$Builder setServiceName(java.lang.String)>($r3);

        $r4 = (org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder) $r5;

        $r6 = virtualinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration$Builder: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration build()>();

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration)>($r6);

        return;
    }

    public void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r1;
        org.jivesoftware.smack.SynchronizationPoint $r2;
        org.jivesoftware.smack.tcp.BundleAndDeferCallback $r3;
        boolean $z0;
        java.util.concurrent.ConcurrentLinkedQueue $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.LinkedHashSet $r6;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$1 $r7;
        int varReplacer1943, varReplacer1944, varReplacer1945, varReplacer1946, varReplacer1948, varReplacer1949;
        long varReplacer1947, varReplacer1950;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration;

        specialinvoke $r0.<org.jivesoftware.smack.AbstractXMPPConnection: void <init>(org.jivesoftware.smack.ConnectionConfiguration)>($r1);

        varReplacer1946 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable> = varReplacer1946;

        varReplacer1943 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer1943;

        varReplacer1944 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer1944;

        $r2 = new org.jivesoftware.smack.SynchronizationPoint;

        specialinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint initalOpenStreamSend> = $r2;

        $r2 = new org.jivesoftware.smack.SynchronizationPoint;

        specialinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint maybeCompressFeaturesReceived> = $r2;

        $r2 = new org.jivesoftware.smack.SynchronizationPoint;

        specialinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint compressSyncPoint> = $r2;

        $r3 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.BundleAndDeferCallback defaultBundleAndDeferCallback>;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.BundleAndDeferCallback bundleAndDeferCallback> = $r3;

        $r2 = new org.jivesoftware.smack.SynchronizationPoint;

        specialinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint> = $r2;

        $r2 = new org.jivesoftware.smack.SynchronizationPoint;

        specialinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint> = $r2;

        varReplacer1949 = -1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smClientMaxResumptionTime> = varReplacer1949;

        varReplacer1948 = -1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smServerMaxResumptimTime> = varReplacer1948;

        $z0 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmDefault>;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSm> = $z0;

        $z0 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumptionDefault>;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumption> = $z0;

        varReplacer1947 = 0L;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long serverHandledStanzasCount> = varReplacer1947;

        varReplacer1950 = 0L;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long clientHandledStanzasCount> = varReplacer1950;

        varReplacer1945 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean smWasEnabledAtLeastOnce> = varReplacer1945;

        $r4 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r4.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners> = $r5;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates> = $r6;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config> = $r1;

        $r7 = new org.jivesoftware.smack.tcp.XMPPTCPConnection$1;

        specialinvoke $r7.<org.jivesoftware.smack.tcp.XMPPTCPConnection$1: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection)>($r0);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void addConnectionListener(org.jivesoftware.smack.ConnectionListener)>($r7);

        return;
    }

    static void access$000(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void dropSmState()>();

        return;
    }

    static void access$1000(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void proceedTLSReceived()>();

        return;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$1100(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint saslFeatureReceived>;

        return r1;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$1200(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint compressSyncPoint>;

        return r1;
    }

    static org.jivesoftware.smack.SASLAuthentication access$1300(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SASLAuthentication $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()>();

        return $r1;
    }

    static org.jivesoftware.smack.SASLAuthentication access$1400(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SASLAuthentication $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()>();

        return $r1;
    }

    static org.jivesoftware.smack.SASLAuthentication access$1500(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SASLAuthentication $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()>();

        return $r1;
    }

    static void access$1600(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        return;
    }

    static java.lang.String access$1700(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId>;

        return r1;
    }

    static java.lang.String access$1702(org.jivesoftware.smack.tcp.XMPPTCPConnection, java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: java.lang.String;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId> = $r1;

        return $r1;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$1800(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint>;

        return r1;
    }

    static int access$1902(org.jivesoftware.smack.tcp.XMPPTCPConnection, int)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        int $i0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $i0 := @parameter1: int;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smServerMaxResumptimTime> = $i0;

        return $i0;
    }

    static boolean access$2002(org.jivesoftware.smack.tcp.XMPPTCPConnection, boolean)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        int varReplacer2465, varReplacer2466;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter1: boolean;

        varReplacer2465 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean smWasEnabledAtLeastOnce> = varReplacer2465;

        varReplacer2466 = 1;

        return varReplacer2466;
    }

    static java.util.logging.Logger access$2100()
    {
        java.util.logging.Logger r0;

        nop;

        r0 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        return r0;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$2200(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint>;

        return r1;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$2300(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint lastFeaturesReceived>;

        return r1;
    }

    static void access$2400(org.jivesoftware.smack.tcp.XMPPTCPConnection, long)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        long $l0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $l0 := @parameter1: long;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void processHandledCount(long)>($l0);

        return;
    }

    static java.util.concurrent.BlockingQueue access$2500(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.concurrent.BlockingQueue r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas>;

        return r1;
    }

    static java.util.concurrent.BlockingQueue access$2502(org.jivesoftware.smack.tcp.XMPPTCPConnection, java.util.concurrent.BlockingQueue)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.concurrent.BlockingQueue $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: java.util.concurrent.BlockingQueue;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas> = $r1;

        return $r1;
    }

    static void access$2600(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void requestSmAcknowledgementInternal()>();

        return;
    }

    static void access$2700(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendSmAcknowledgementInternal()>();

        return;
    }

    static void access$2800(org.jivesoftware.smack.tcp.XMPPTCPConnection, java.lang.Exception)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.Exception $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: java.lang.Exception;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void notifyConnectionError(java.lang.Exception)>($r1);

        return;
    }

    static org.jivesoftware.smack.tcp.BundleAndDeferCallback access$3000(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.BundleAndDeferCallback r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.BundleAndDeferCallback bundleAndDeferCallback>;

        return r1;
    }

    static java.io.Writer access$3100(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3200(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3300(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3400(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static void access$3500(org.jivesoftware.smack.tcp.XMPPTCPConnection, org.jivesoftware.smack.packet.Stanza)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.Stanza $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: org.jivesoftware.smack.packet.Stanza;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void firePacketSendingListeners(org.jivesoftware.smack.packet.Stanza)>($r1);

        return;
    }

    static java.io.Writer access$3600(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3700(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3800(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.io.Writer access$3900(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static org.jivesoftware.smack.SynchronizationPoint access$400(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint initalOpenStreamSend>;

        return r1;
    }

    static java.io.Writer access$4000(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        return r1;
    }

    static java.util.Map access$4100(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Map r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners>;

        return r1;
    }

    static java.util.Collection access$4200(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Collection r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners>;

        return r1;
    }

    static void access$500(org.jivesoftware.smack.tcp.XMPPTCPConnection, org.xmlpull.v1.XmlPullParser)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.xmlpull.v1.XmlPullParser $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void parseAndProcessStanza(org.xmlpull.v1.XmlPullParser)>($r1);

        return;
    }

    static long access$600(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        long l0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        l0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long clientHandledStanzasCount>;

        return l0;
    }

    static long access$602(org.jivesoftware.smack.tcp.XMPPTCPConnection, long)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        long $l0;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $l0 := @parameter1: long;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long clientHandledStanzasCount> = $l0;

        return $l0;
    }

    static java.lang.String access$702(org.jivesoftware.smack.tcp.XMPPTCPConnection, java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: java.lang.String;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String streamId> = $r1;

        return $r1;
    }

    static org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration access$800(org.jivesoftware.smack.tcp.XMPPTCPConnection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        return r1;
    }

    static void access$900(org.jivesoftware.smack.tcp.XMPPTCPConnection, org.xmlpull.v1.XmlPullParser)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.xmlpull.v1.XmlPullParser $r1;

        nop;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void parseFeatures(org.xmlpull.v1.XmlPullParser)>($r1);

        return;
    }

    private void connectUsingConfiguration()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.List $r1, $r4;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r2;
        javax.net.SocketFactory $r3;
        java.util.Iterator $r5, $r11;
        boolean $z0;
        java.lang.Object $r6;
        org.jivesoftware.smack.util.dns.HostAddress $r7;
        java.lang.String $r8, $r18, $r19, varReplacer2133, varReplacer2134, varReplacer2135, varReplacer2136;
        int $i0, $i1;
        java.net.Socket $r9;
        java.net.InetAddress[] $r10;
        java.util.logging.Logger $r12;
        java.net.UnknownHostException $r13;
        java.lang.Exception $r14, $r15;
        java.net.InetAddress $r16;
        java.lang.StringBuilder $r17;
        java.net.InetSocketAddress $r20;
        org.jivesoftware.smack.SmackException$ConnectionException $r21;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.List populateHostAddresses()>();

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r3 = virtualinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.net.SocketFactory getSocketFactory()>();

        if $r3 != null goto label27;

        $r3 = staticinvoke <javax.net.SocketFactory: javax.net.SocketFactory getDefault()>();

     label01:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.List hostAddresses>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.jivesoftware.smack.util.dns.HostAddress) $r6;

        $r8 = virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: java.lang.String getFQDN()>();

        $i0 = virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: int getPort()>();

        $r9 = virtualinvoke $r3.<javax.net.SocketFactory: java.net.Socket createSocket()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket> = $r9;

     label03:
        $r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r8);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        $r11 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label04:
        if $z0 != 0 goto label12;

        $r12 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

     label05:
        varReplacer2136 = "InetAddress.getAllByName() returned empty result array.";

        virtualinvoke $r12.<java.util.logging.Logger: void warning(java.lang.String)>(varReplacer2136);

     label06:
        $r13 = new java.net.UnknownHostException;

     label07:
        specialinvoke $r13.<java.net.UnknownHostException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label08:
        $r14 := @caughtexception;

        virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: void setException(java.lang.Exception)>($r14);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label02;

     label09:
        $r15 := @caughtexception;

     label10:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label11:
        if $z0 == 0 goto label25;

     label12:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label13:
        if $z0 == 0 goto label02;

     label14:
        $r6 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.net.InetAddress) $r6;

     label15:
        $r17 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        varReplacer2134 = " at port ";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2134);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        $r12 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r17 = new java.lang.StringBuilder;

     label18:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer2135 = "Trying to establish TCP connection to ";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2135);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void finer(java.lang.String)>($r19);

     label19:
        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

     label20:
        $r20 = new java.net.InetSocketAddress;

     label21:
        specialinvoke $r20.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r16, $i0);

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $i1 = virtualinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: int getConnectTimeout()>();

        virtualinvoke $r9.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r20, $i1);

     label22:
        $r12 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r17 = new java.lang.StringBuilder;

     label23:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer2133 = "Established TCP connection to ";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2133);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void finer(java.lang.String)>($r18);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String host> = $r8;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int port> = $i0;

     label24:
        return;

     label25:
        throw $r15;

     label26:
        $r21 = staticinvoke <org.jivesoftware.smack.SmackException$ConnectionException: org.jivesoftware.smack.SmackException$ConnectionException 'from'(java.util.List)>($r1);

        throw $r21;

     label27:
        goto label01;

        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Exception from label07 to label08 with label08;
        catch java.lang.Exception from label10 to label11 with label08;
        catch java.lang.Exception from label12 to label13 with label08;
        catch java.lang.Exception from label14 to label15 with label08;
        catch java.lang.Exception from label16 to label17 with label08;
        catch java.lang.Exception from label18 to label19 with label08;
        catch java.lang.Exception from label19 to label20 with label09;
        catch java.lang.Exception from label21 to label22 with label09;
        catch java.lang.Exception from label23 to label24 with label08;
        catch java.lang.Exception from label25 to label26 with label08;
    }

    private void dropSmState()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        null_type varReplacer2061, varReplacer2062;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        varReplacer2061 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId> = varReplacer2061;

        varReplacer2062 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas> = varReplacer2062;

        return;
    }

    private void initConnection()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader $r1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r2;
        boolean $z0, $z1;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r3;
        org.jivesoftware.smack.debugger.SmackDebugger $r4;
        org.jivesoftware.smack.StanzaListener $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.jivesoftware.smack.ConnectionCreationListener $r9;
        null_type varReplacer2137, varReplacer2138, varReplacer2139;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        if $r1 == null goto label1;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        if $r2 != null goto label5;

     label1:
        $z0 = 1;

     label2:
        varReplacer2138 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler> = varReplacer2138;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        if $z0 == 0 goto label3;

        $r2 = new org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter;

        specialinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter> = $r2;

        $r1 = new org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader;

        specialinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection)>($r0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader> = $r1;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $z1 = virtualinvoke $r3.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: boolean isDebuggerEnabled()>();

        if $z1 == 0 goto label3;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.StanzaListener getReaderListener()>();

        varReplacer2137 = null;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void addAsyncStanzaListener(org.jivesoftware.smack.StanzaListener,org.jivesoftware.smack.filter.StanzaFilter)>($r5, varReplacer2137);

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.StanzaListener getWriterListener()>();

        if $r5 == null goto label3;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.StanzaListener getWriterListener()>();

        varReplacer2139 = null;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void addPacketSendingListener(org.jivesoftware.smack.StanzaListener,org.jivesoftware.smack.filter.StanzaFilter)>($r5, varReplacer2139);

     label3:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void init()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader: void init()>();

        if $z0 == 0 goto label6;

        $r6 = staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection getConnectionCreationListeners()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.jivesoftware.smack.ConnectionCreationListener) $r8;

        interfaceinvoke $r9.<org.jivesoftware.smack.ConnectionCreationListener: void connectionCreated(org.jivesoftware.smack.XMPPConnection)>($r0);

        goto label4;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        return;
    }

    private void initReaderAndWriter()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.net.Socket $r1;
        java.io.InputStream $r2, $r3;
        java.io.OutputStream $r4, $r5;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r6;
        java.io.OutputStreamWriter $r7;
        java.io.BufferedReader $r8;
        java.io.InputStreamReader $r9;
        java.lang.String varReplacer2157, varReplacer2158;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r3 = $r2;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r4 = virtualinvoke $r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r5 = $r4;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        if $r6 == null goto label1;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r3 = virtualinvoke $r6.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.io.InputStream getInputStream(java.io.InputStream)>($r2);

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r5 = virtualinvoke $r6.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.io.OutputStream getOutputStream(java.io.OutputStream)>($r4);

     label1:
        $r7 = new java.io.OutputStreamWriter;

        varReplacer2157 = "UTF-8";

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r5, varReplacer2157);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = $r7;

        $r8 = new java.io.BufferedReader;

        $r9 = new java.io.InputStreamReader;

        varReplacer2158 = "UTF-8";

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, varReplacer2158);

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = $r8;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initDebugger()>();

        return;
    }

    private org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.ExtensionElement $r1;
        org.jivesoftware.smack.compress.packet.Compress$Feature $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r6;
        java.lang.String $r7, varReplacer2100, varReplacer2101;
        null_type varReplacer2098, varReplacer2099;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        varReplacer2100 = "compression";

        varReplacer2101 = "http://jabber.org/protocol/compress";

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.packet.ExtensionElement getFeature(java.lang.String,java.lang.String)>(varReplacer2100, varReplacer2101);

        $r2 = (org.jivesoftware.smack.compress.packet.Compress$Feature) $r1;

        if $r2 != null goto label1;

        varReplacer2098 = null;

        return varReplacer2098;

     label1:
        $r3 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: java.util.List getCompresionHandlers()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.jivesoftware.smack.compression.XMPPInputOutputStream) $r5;

        $r7 = virtualinvoke $r6.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.lang.String getCompressionMethod()>();

        $r3 = virtualinvoke $r2.<org.jivesoftware.smack.compress.packet.Compress$Feature: java.util.List getMethods()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return $r6;

     label3:
        varReplacer2099 = null;

        return varReplacer2099;
    }

    private void notifyConnectionError(java.lang.Exception)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.Exception $r1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader $r2;
        boolean $z0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r3;
        java.lang.Throwable $r4;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.Exception;

        entermonitor $r0;

     label1:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        if $r2 == null goto label2;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        $z0 = staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader: boolean access$100(org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader)>($r2);

        if $z0 == 0 goto label5;

     label2:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        if $r3 == null goto label4;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        $z0 = staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: boolean access$200(org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter)>($r3);

     label3:
        if $z0 == 0 goto label5;

     label4:
        exitmonitor $r0;

        return;

     label5:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void instantShutdown()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionClosedOnErrorListener(java.lang.Exception)>($r1);

     label6:
        goto label4;

     label7:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void proceedTLSReceived()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r1;
        javax.net.ssl.SSLContext $r2, $r5;
        javax.security.auth.callback.CallbackHandler $r3;
        javax.net.ssl.KeyManager[] $r4;
        java.net.Socket $r6;
        javax.net.ssl.SSLSocketFactory $r7;
        java.lang.String $r8, varReplacer2825, varReplacer2831, varReplacer2832, varReplacer2834, varReplacer2835, varReplacer2836, varReplacer2837, varReplacer2838, varReplacer2839, varReplacer2840, varReplacer2841, varReplacer2842, varReplacer2843, varReplacer2845;
        int $i0, varReplacer2826, varReplacer2830, varReplacer2844, varReplacer2847;
        javax.net.ssl.SSLSocket $r9;
        java.lang.String[] $r10, $r11;
        org.jivesoftware.smack.ConnectionConfiguration $r12;
        javax.net.ssl.HostnameVerifier $r13;
        boolean $z0;
        javax.security.auth.callback.PasswordCallback $r14, r37;
        java.security.KeyStore $r15, $r26;
        javax.net.ssl.KeyManagerFactory $r16;
        java.lang.Class $r17;
        java.lang.Class[] $r18;
        java.lang.reflect.Constructor $r19;
        java.lang.StringBuilder $r20, r35;
        java.io.ByteArrayInputStream $r21, r36;
        byte[] $r22;
        java.lang.Object[] $r23;
        java.lang.Object $r24;
        java.security.Provider $r25;
        char[] $r27;
        java.lang.Exception $r28, $r30;
        java.io.FileInputStream $r29, r38;
        java.lang.NullPointerException $r31;
        javax.net.ssl.SSLSession $r32;
        java.security.SecureRandom r33;
        java.lang.IllegalStateException r34;
        java.security.cert.CertificateException r39;
        javax.security.auth.callback.Callback[] r40;
        null_type varReplacer2827, varReplacer2828, varReplacer2829, varReplacer2833, varReplacer2846;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r2 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.net.ssl.SSLContext getCustomSSLContext()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        if $r3 != null goto label03;

        $r4 = null;

     label01:
        if $r2 != null goto label30;

        varReplacer2836 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2836);

        $r5 = $r2;

        r33 = new java.security.SecureRandom;

        specialinvoke r33.<java.security.SecureRandom: void <init>()>();

        varReplacer2827 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, varReplacer2827, r33);

     label02:
        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r7 = virtualinvoke $r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r8 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String host>;

        $i0 = virtualinvoke $r6.<java.net.Socket: int getPort()>();

        varReplacer2847 = 1;

        $r6 = virtualinvoke $r7.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r6, $r8, $i0, varReplacer2847);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket> = $r6;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r9 = (javax.net.ssl.SSLSocket) $r6;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r10 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String[] getEnabledSSLProtocols()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r11 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String[] getEnabledSSLCiphers()>();

        staticinvoke <org.jivesoftware.smack.util.TLSUtils: void setEnabledProtocolsAndCiphers(javax.net.ssl.SSLSocket,java.lang.String[],java.lang.String[])>($r9, $r10, $r11);

        virtualinvoke $r9.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r12 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration getConfiguration()>();

        $r13 = virtualinvoke $r12.<org.jivesoftware.smack.ConnectionConfiguration: javax.net.ssl.HostnameVerifier getHostnameVerifier()>();

        if $r13 != null goto label28;

        r34 = new java.lang.IllegalStateException;

        varReplacer2831 = "No HostnameVerifier set. Use connectionConfiguration.setHostnameVerifier() to configure.";

        specialinvoke r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2831);

        throw r34;

     label03:
        if $r2 != null goto label31;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer2845 = "NONE";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer2845);

        if $z0 == 0 goto label08;

        $r14 = null;

        $r15 = null;

     label04:
        varReplacer2832 = "SunX509";

        $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer2832);

        if $r14 != null goto label25;

     label05:
        varReplacer2833 = null;

        virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r15, varReplacer2833);

     label06:
        $r4 = virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label07:
        goto label01;

     label08:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer2839 = "PKCS11";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer2839);

        if $z0 == 0 goto label18;

     label09:
        varReplacer2835 = "sun.security.pkcs11.SunPKCS11";

        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(varReplacer2835);

        $r18 = newarray (java.lang.Class)[1];

        $r18[0] = class "Ljava/io/InputStream;";

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r18);

     label10:
        r35 = new java.lang.StringBuilder;

        $r20 = r35;

     label11:
        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        varReplacer2841 = "name = SmartCard\nlibrary = ";

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2841);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getPKCS11Library()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        r36 = new java.io.ByteArrayInputStream;

        $r21 = r36;

     label13:
        $r22 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        specialinvoke r36.<java.io.ByteArrayInputStream: void <init>(byte[])>($r22);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r21;

        $r24 = virtualinvoke $r19.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r23);

        $r25 = (java.security.Provider) $r24;

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r25);

        varReplacer2840 = "PKCS11";

        $r26 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>(varReplacer2840, $r25);

     label14:
        $r15 = $r26;

        r37 = new javax.security.auth.callback.PasswordCallback;

        $r14 = r37;

     label15:
        varReplacer2825 = "PKCS11 Password: ";

        varReplacer2826 = 0;

        specialinvoke r37.<javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>(varReplacer2825, varReplacer2826);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        $r23 = newarray (javax.security.auth.callback.Callback)[1];

        $r23[0] = $r14;

        r40 = (javax.security.auth.callback.Callback[]) $r23;

        interfaceinvoke $r3.<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>(r40);

        $r27 = virtualinvoke $r14.<javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        varReplacer2846 = null;

        virtualinvoke $r26.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer2846, $r27);

     label16:
        goto label04;

     label17:
        $r28 := @caughtexception;

        $r14 = null;

        $r15 = null;

        goto label04;

     label18:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer2842 = "Apple";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer2842);

        if $z0 == 0 goto label19;

        varReplacer2837 = "KeychainStore";

        varReplacer2838 = "Apple";

        $r15 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer2837, varReplacer2838);

        varReplacer2828 = null;

        varReplacer2829 = null;

        virtualinvoke $r15.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer2828, varReplacer2828);

        $r14 = null;

        goto label04;

     label19:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getKeystoreType()>();

        $r26 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r8);

        $r15 = $r26;

        r37 = new javax.security.auth.callback.PasswordCallback;

        $r14 = r37;

     label20:
        varReplacer2843 = "Keystore Password: ";

        varReplacer2844 = 0;

        specialinvoke r37.<javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>(varReplacer2843, varReplacer2844);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        $r23 = newarray (javax.security.auth.callback.Callback)[1];

        $r23[0] = $r14;

        r40 = (javax.security.auth.callback.Callback[]) $r23;

        interfaceinvoke $r3.<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>(r40);

     label21:
        r38 = new java.io.FileInputStream;

        $r29 = r38;

     label22:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.String getKeystorePath()>();

        specialinvoke r38.<java.io.FileInputStream: void <init>(java.lang.String)>($r8);

        $r27 = virtualinvoke $r14.<javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        virtualinvoke $r26.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r29, $r27);

     label23:
        goto label04;

     label24:
        $r30 := @caughtexception;

        $r14 = null;

        $r15 = null;

        goto label04;

     label25:
        $r27 = virtualinvoke $r14.<javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r15, $r27);

        virtualinvoke $r14.<javax.security.auth.callback.PasswordCallback: void clearPassword()>();

     label26:
        goto label06;

     label27:
        $r31 := @caughtexception;

        $r4 = null;

        goto label01;

     label28:
        $r8 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String getServiceName()>();

        $r32 = virtualinvoke $r9.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $z0 = interfaceinvoke $r13.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r8, $r32);

        if $z0 != 0 goto label29;

        r39 = new java.security.cert.CertificateException;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        varReplacer2834 = "Hostname verification of certificate failed. Certificate does not authenticate ";

        $r20 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2834);

        $r8 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String getServiceName()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r39.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r8);

        throw r39;

     label29:
        varReplacer2830 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer2830;

        return;

     label30:
        $r5 = $r2;

        goto label02;

     label31:
        $r4 = null;

        goto label01;

        catch java.lang.NullPointerException from label05 to label07 with label27;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label20 to label21 with label24;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.NullPointerException from label25 to label26 with label27;
    }

    private void processHandledCount(long)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        long $l0, $l1, $l4;
        java.util.ArrayList $r1;
        byte $b2;
        int $i3;
        java.util.concurrent.BlockingQueue $r2;
        java.lang.Object $r3;
        org.jivesoftware.smack.packet.Stanza $r4;
        org.jivesoftware.smack.sm.StreamManagementException$StreamManagementCounterError $r5;
        java.util.Collection $r6;
        boolean $z0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$3 $r7;
        java.util.Iterator $r8;
        java.lang.String $r9;
        java.util.Map $r10;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $l0 := @parameter0: long;

        $l1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long serverHandledStanzasCount>;

        $l1 = staticinvoke <org.jivesoftware.smack.sm.SMUtils: long calculateDelta(long,long)>($l0, $l1);

        $r1 = new java.util.ArrayList;

        $b2 = $l0 cmp 2147483647L;

        if $b2 > 0 goto label03;

        $i3 = (int) $l0;

     label01:
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i3);

        $l4 = 0L;

     label02:
        $b2 = $l4 cmp $l1;

        if $b2 >= 0 goto label05;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        $r4 = (org.jivesoftware.smack.packet.Stanza) $r3;

        if $r4 != null goto label04;

        $r5 = new org.jivesoftware.smack.sm.StreamManagementException$StreamManagementCounterError;

        $l4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long serverHandledStanzasCount>;

        specialinvoke $r5.<org.jivesoftware.smack.sm.StreamManagementException$StreamManagementCounterError: void <init>(long,long,long,java.util.List)>($l0, $l4, $l1, $r1);

        throw $r5;

     label03:
        $i3 = 2147483647;

        goto label01;

     label04:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        $l4 = $l4 + 1L;

        goto label02;

     label05:
        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners>;

        $z0 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $z0 = 1;

     label06:
        if $z0 == 0 goto label07;

        $r7 = new org.jivesoftware.smack.tcp.XMPPTCPConnection$3;

        specialinvoke $r7.<org.jivesoftware.smack.tcp.XMPPTCPConnection$3: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection,java.util.List)>($r0, $r1);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void asyncGo(java.lang.Runnable)>($r7);

     label07:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long serverHandledStanzasCount> = $l0;

        return;

     label08:
        $r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.jivesoftware.smack.packet.Stanza) $r3;

        $r9 = virtualinvoke $r4.<org.jivesoftware.smack.packet.Stanza: java.lang.String getStanzaId()>();

        if $r9 == null goto label09;

        $r10 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners>;

        $z0 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z0 == 0 goto label09;

        $z0 = 1;

        goto label06;

     label10:
        $z0 = 0;

        goto label06;
    }

    private void requestSmAcknowledgementInternal()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r1;
        org.jivesoftware.smack.sm.packet.StreamManagement$AckRequest $r2;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        $r2 = <org.jivesoftware.smack.sm.packet.StreamManagement$AckRequest: org.jivesoftware.smack.sm.packet.StreamManagement$AckRequest INSTANCE>;

        virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void sendStreamElement(org.jivesoftware.smack.packet.Element)>($r2);

        return;
    }

    private void sendSmAcknowledgementInternal()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r1;
        org.jivesoftware.smack.sm.packet.StreamManagement$AckAnswer $r2;
        long $l0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        $r2 = new org.jivesoftware.smack.sm.packet.StreamManagement$AckAnswer;

        $l0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long clientHandledStanzasCount>;

        specialinvoke $r2.<org.jivesoftware.smack.sm.packet.StreamManagement$AckAnswer: void <init>(long)>($l0);

        virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void sendStreamElement(org.jivesoftware.smack.packet.Element)>($r2);

        return;
    }

    public static void setDefaultBundleAndDeferCallback(org.jivesoftware.smack.tcp.BundleAndDeferCallback)
    {
        org.jivesoftware.smack.tcp.BundleAndDeferCallback $r0;

        $r0 := @parameter0: org.jivesoftware.smack.tcp.BundleAndDeferCallback;

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.BundleAndDeferCallback defaultBundleAndDeferCallback> = $r0;

        return;
    }

    public static void setUseStreamManagementDefault(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmDefault> = $z0;

        return;
    }

    public static void setUseStreamManagementResumptiodDefault(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnection: void setUseStreamManagementDefault(boolean)>($z0);

     label1:
        <org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumptionDefault> = $z0;

        return;
    }

    private void shutdown(boolean)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0, $z1;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader $r3;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r4;
        java.net.Socket $r5;
        org.jivesoftware.smack.SynchronizationPoint $r6;
        java.lang.Exception $r7;
        int varReplacer2010, varReplacer2011, varReplacer2014, varReplacer2015, varReplacer2016, varReplacer2018;
        null_type varReplacer2012, varReplacer2013, varReplacer2019;
        java.lang.String varReplacer2017;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        if $r3 == null goto label2;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        virtualinvoke $r3.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader: void shutdown()>();

     label2:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        if $r4 == null goto label3;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        virtualinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void shutdown(boolean)>($z0);

     label3:
        varReplacer2015 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer2015;

     label4:
        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        virtualinvoke $r5.<java.net.Socket: void close()>();

     label5:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setWasAuthenticated()>();

        $z1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmResumptionPossible()>();

        if $z1 == 0 goto label8;

        if $z0 == 0 goto label8;

        varReplacer2010 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable> = varReplacer2010;

     label6:
        varReplacer2016 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated> = varReplacer2016;

        varReplacer2011 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = varReplacer2011;

        varReplacer2018 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer2018;

        varReplacer2012 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = varReplacer2012;

        varReplacer2013 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = varReplacer2013;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint maybeCompressFeaturesReceived>;

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void init()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint compressSyncPoint>;

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void init()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint>;

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void init()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint>;

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void init()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint initalOpenStreamSend>;

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void init()>();

        return;

     label7:
        $r7 := @caughtexception;

        $r1 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        varReplacer2017 = "shutdown";

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, varReplacer2017, $r7);

        goto label5;

     label8:
        varReplacer2014 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable> = varReplacer2014;

        varReplacer2019 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId> = varReplacer2019;

        goto label6;

        catch java.lang.Exception from label4 to label5 with label7;
    }

    private void useCompression()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint $r1;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r2;
        org.jivesoftware.smack.compress.packet.Compress $r3;
        java.lang.String $r4, varReplacer2054;
        java.util.logging.Logger $r5;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint maybeCompressFeaturesReceived>;

        virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: void checkIfSuccessOrWait()>();

        $r2 = specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler> = $r2;

        if $r2 == null goto label1;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint compressSyncPoint>;

        $r3 = new org.jivesoftware.smack.compress.packet.Compress;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r4 = virtualinvoke $r2.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.lang.String getCompressionMethod()>();

        specialinvoke $r3.<org.jivesoftware.smack.compress.packet.Compress: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: void sendAndWaitForResponseOrThrow(org.jivesoftware.smack.packet.PlainStreamElement)>($r3);

        return;

     label1:
        $r5 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        varReplacer2054 = "Could not enable compression because no matching handler/method pair was found";

        virtualinvoke $r5.<java.util.logging.Logger: void warning(java.lang.String)>(varReplacer2054);

        return;
    }

    public boolean addRequestAckPredicate(org.jivesoftware.smack.filter.StanzaFilter)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.filter.StanzaFilter $r1;
        java.util.Set $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.filter.StanzaFilter;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addStanzaAcknowledgedListener(org.jivesoftware.smack.StanzaListener)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.StanzaListener $r1;
        java.util.Collection $r2;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.StanzaListener;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        return;
    }

    public org.jivesoftware.smack.StanzaListener addStanzaIdAcknowledgedListener(java.lang.String, org.jivesoftware.smack.StanzaListener)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;
        org.jivesoftware.smack.StanzaListener $r2;
        long $l0;
        boolean $z0;
        org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException $r3;
        int $i1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$2 $r4;
        java.util.concurrent.TimeUnit $r5;
        java.util.Map $r6;
        java.lang.Object $r7;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jivesoftware.smack.StanzaListener;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean smWasEnabledAtLeastOnce>;

        if $z0 != 0 goto label1;

        $r3 = new org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException;

        specialinvoke $r3.<org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException: void <init>()>();

        throw $r3;

     label1:
        $i1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int getMaxSmResumptionTime()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 43200);

        $r4 = new org.jivesoftware.smack.tcp.XMPPTCPConnection$2;

        specialinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnection$2: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection,java.lang.String)>($r0, $r1);

        $l0 = (long) $i1;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r5);

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r2 = (org.jivesoftware.smack.StanzaListener) $r7;

        return $r2;
    }

    protected void afterFeaturesReceived()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.ExtensionElement $r1;
        org.jivesoftware.smack.packet.StartTls $r2, $r7;
        boolean $z0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r3;
        org.jivesoftware.smack.ConnectionConfiguration$SecurityMode $r4, $r5;
        org.jivesoftware.smack.SmackException$SecurityRequiredByServerException $r6;
        org.jivesoftware.smack.ConnectionConfiguration $r8;
        org.jivesoftware.smack.SmackException$SecurityRequiredByClientException $r9;
        org.jivesoftware.smack.SASLAuthentication $r10;
        org.jivesoftware.smack.SynchronizationPoint $r11;
        java.lang.String varReplacer2810, varReplacer2811;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        varReplacer2810 = "starttls";

        varReplacer2811 = "urn:ietf:params:xml:ns:xmpp-tls";

        $r1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.packet.ExtensionElement getFeature(java.lang.String,java.lang.String)>(varReplacer2810, varReplacer2811);

        $r2 = (org.jivesoftware.smack.packet.StartTls) $r1;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<org.jivesoftware.smack.packet.StartTls: boolean required()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r4 = virtualinvoke $r3.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode()>();

        $r5 = <org.jivesoftware.smack.ConnectionConfiguration$SecurityMode: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled>;

        if $r4 != $r5 goto label1;

        $r6 = new org.jivesoftware.smack.SmackException$SecurityRequiredByServerException;

        specialinvoke $r6.<org.jivesoftware.smack.SmackException$SecurityRequiredByServerException: void <init>()>();

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void notifyConnectionError(java.lang.Exception)>($r6);

        return;

     label1:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r4 = virtualinvoke $r3.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode()>();

        $r5 = <org.jivesoftware.smack.ConnectionConfiguration$SecurityMode: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled>;

        if $r4 == $r5 goto label2;

        $r7 = new org.jivesoftware.smack.packet.StartTls;

        specialinvoke $r7.<org.jivesoftware.smack.packet.StartTls: void <init>()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void send(org.jivesoftware.smack.packet.PlainStreamElement)>($r7);

     label2:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSecureConnection()>();

        if $z0 != 0 goto label3;

        if $r2 != null goto label3;

        $r8 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration getConfiguration()>();

        $r4 = virtualinvoke $r8.<org.jivesoftware.smack.ConnectionConfiguration: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode()>();

        $r5 = <org.jivesoftware.smack.ConnectionConfiguration$SecurityMode: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode required>;

        if $r4 != $r5 goto label3;

        $r9 = new org.jivesoftware.smack.SmackException$SecurityRequiredByClientException;

        specialinvoke $r9.<org.jivesoftware.smack.SmackException$SecurityRequiredByClientException: void <init>()>();

        throw $r9;

     label3:
        $r10 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()>();

        $z0 = virtualinvoke $r10.<org.jivesoftware.smack.SASLAuthentication: boolean authenticationSuccessful()>();

        if $z0 == 0 goto label4;

        $r11 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint maybeCompressFeaturesReceived>;

        virtualinvoke $r11.<org.jivesoftware.smack.SynchronizationPoint: void reportSuccess()>();

     label4:
        return;
    }

    protected void afterSuccessfulLogin(boolean)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        int varReplacer2055;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter0: boolean;

        varReplacer2055 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable> = varReplacer2055;

        specialinvoke $r0.<org.jivesoftware.smack.AbstractXMPPConnection: void afterSuccessfulLogin(boolean)>($z0);

        return;
    }

    protected void connectInternal()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint $r1;
        boolean $z0;
        int varReplacer2131, varReplacer2132;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void connectUsingConfiguration()>();

        varReplacer2132 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer2132;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initConnection()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint saslFeatureReceived>;

        virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: void checkIfSuccessOrWaitOrThrow()>();

        varReplacer2131 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = varReplacer2131;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionConnectedListener()>();

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean wasAuthenticated>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void login()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void notifyReconnection()>();

     label1:
        return;
    }

    public int getMaxSmResumptionTime()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        int $i0, $i1, $i2;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $i1 = 2147483647;

        $i0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smClientMaxResumptionTime>;

        if $i0 <= 0 goto label3;

        $i2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smClientMaxResumptionTime>;

     label1:
        $i0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smServerMaxResumptimTime>;

        if $i0 <= 0 goto label2;

        $i1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smServerMaxResumptimTime>;

     label2:
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        return $i1;

     label3:
        $i2 = 2147483647;

        goto label1;
    }

    public void instantShutdown()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.Throwable $r1;
        int varReplacer2701;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        entermonitor $r0;

     label1:
        varReplacer2701 = 1;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void shutdown(boolean)>(varReplacer2701);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDisconnectedButSmResumptionPossible()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable>;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmResumptionPossible()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSecureConnection()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS>;

        return z0;
    }

    public boolean isSmAvailable()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        java.lang.String varReplacer2063, varReplacer2064;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        varReplacer2063 = "sm";

        varReplacer2064 = "urn:xmpp:sm:3";

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean hasFeature(java.lang.String,java.lang.String)>(varReplacer2063, varReplacer2064);

        return $z0;
    }

    public boolean isSmEnabled()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.SynchronizationPoint $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint>;

        $z0 = virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: boolean wasSuccessful()>();

        return $z0;
    }

    public boolean isSmResumptionPossible()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r2;
        java.lang.Long $r3;
        long $l0, $l2, $l3;
        int $i1, varReplacer2020, varReplacer2021, varReplacer2022, varReplacer2023;
        byte $b4;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId>;

        if $r1 != null goto label1;

        varReplacer2023 = 0;

        return varReplacer2023;

     label1:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        $r3 = $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: java.lang.Long shutdownTimestamp>;

        if $r3 != null goto label2;

        varReplacer2022 = 1;

        return varReplacer2022;

     label2:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int getMaxSmResumptionTime()>();

        $l2 = (long) $i1;

        $l2 = $l2 * 1000L;

        $l3 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l2 = $l3 + $l2;

        $b4 = $l0 cmp $l2;

        if $b4 > 0 goto label3;

        varReplacer2020 = 1;

        return varReplacer2020;

     label3:
        varReplacer2021 = 0;

        return varReplacer2021;
    }

    public boolean isSocketClosed()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed>;

        return z0;
    }

    public boolean isUsingCompression()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r1;
        org.jivesoftware.smack.SynchronizationPoint $r2;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        if $r1 == null goto label1;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint compressSyncPoint>;

        $z0 = virtualinvoke $r2.<org.jivesoftware.smack.SynchronizationPoint: boolean wasSuccessful()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void loginAnonymously()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SynchronizationPoint $r1;
        org.jivesoftware.smack.SASLAuthentication $r2;
        boolean $z0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r3;
        org.jivesoftware.smack.SmackException $r4;
        java.lang.Throwable $r5;
        null_type varReplacer2037;
        int varReplacer2038;
        java.lang.String varReplacer2039;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        entermonitor $r0;

     label1:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint saslFeatureReceived>;

        virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: void checkIfSuccessOrWaitOrThrow()>();

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $z0 = virtualinvoke $r2.<org.jivesoftware.smack.SASLAuthentication: boolean hasAnonymousAuthentication()>();

        if $z0 == 0 goto label4;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        virtualinvoke $r2.<org.jivesoftware.smack.SASLAuthentication: void authenticateAnonymously()>();

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $z0 = virtualinvoke $r3.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: boolean isCompressionEnabled()>();

        if $z0 == 0 goto label2;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void useCompression()>();

     label2:
        varReplacer2037 = null;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void bindResourceAndEstablishSession(java.lang.String)>(varReplacer2037);

        varReplacer2038 = 0;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void afterSuccessfulLogin(boolean)>(varReplacer2038);

     label3:
        exitmonitor $r0;

        return;

     label4:
        $r4 = new org.jivesoftware.smack.SmackException;

        varReplacer2039 = "No anonymous SASL authentication mechanism available";

        specialinvoke $r4.<org.jivesoftware.smack.SmackException: void <init>(java.lang.String)>(varReplacer2039);

        throw $r4;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    protected void loginNonAnonymously(java.lang.String, java.lang.String, java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1, $r2, $r3, varReplacer2043, varReplacer2045;
        org.jivesoftware.smack.SASLAuthentication $r4;
        boolean $z0;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r5;
        org.jivesoftware.smack.SynchronizationPoint $r6;
        org.jivesoftware.smack.sm.packet.StreamManagement$Resume $r7;
        long $l0, varReplacer2041;
        javax.security.auth.callback.CallbackHandler $r8;
        java.lang.Throwable $r9, $r21;
        org.jivesoftware.smack.SmackException $r10;
        java.util.logging.Logger $r11;
        java.util.LinkedList $r12;
        java.util.concurrent.BlockingQueue $r13;
        org.jivesoftware.smack.sm.packet.StreamManagement$Enable $r14;
        int $i1, varReplacer2042, varReplacer2044;
        java.util.Set $r15, $r16;
        org.jivesoftware.smack.filter.StanzaFilter $r17;
        java.util.Iterator $r18;
        java.lang.Object $r19;
        org.jivesoftware.smack.packet.Stanza $r20;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        entermonitor $r0;

     label01:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $z0 = virtualinvoke $r4.<org.jivesoftware.smack.SASLAuthentication: boolean hasNonAnonymousAuthentication()>();

        if $z0 == 0 goto label08;

        if $r2 == null goto label05;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        virtualinvoke $r4.<org.jivesoftware.smack.SASLAuthentication: void authenticate(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label02:
        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $z0 = virtualinvoke $r5.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: boolean isCompressionEnabled()>();

        if $z0 == 0 goto label03;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void useCompression()>();

     label03:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmResumptionPossible()>();

        if $z0 == 0 goto label10;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint>;

        $r7 = new org.jivesoftware.smack.sm.packet.StreamManagement$Resume;

        $l0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long clientHandledStanzasCount>;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String smSessionId>;

        specialinvoke $r7.<org.jivesoftware.smack.sm.packet.StreamManagement$Resume: void <init>(long,java.lang.String)>($l0, $r1);

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void sendAndWaitForResponse(org.jivesoftware.smack.packet.TopLevelStreamElement)>($r7);

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint>;

        $z0 = virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: boolean wasSuccessful()>();

        if $z0 == 0 goto label09;

        varReplacer2042 = 1;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void afterSuccessfulLogin(boolean)>(varReplacer2042);

     label04:
        exitmonitor $r0;

        return;

     label05:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r8 = virtualinvoke $r5.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        virtualinvoke $r4.<org.jivesoftware.smack.SASLAuthentication: void authenticate(java.lang.String,javax.security.auth.callback.CallbackHandler)>($r3, $r8);

     label06:
        goto label02;

     label07:
        $r9 := @caughtexception;

        exitmonitor $r0;

        throw $r9;

     label08:
        $r10 = new org.jivesoftware.smack.SmackException;

        varReplacer2045 = "No non-anonymous SASL authentication mechanism available";

        specialinvoke $r10.<org.jivesoftware.smack.SmackException: void <init>(java.lang.String)>(varReplacer2045);

        throw $r10;

     label09:
        $r11 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        varReplacer2043 = "Stream resumption failed, continuing with normal stream establishment process";

        virtualinvoke $r11.<java.util.logging.Logger: void fine(java.lang.String)>(varReplacer2043);

     label10:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void bindResourceAndEstablishSession(java.lang.String)>($r3);

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        $r13 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas>;

        if $r13 == null goto label11;

        $r13 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.concurrent.BlockingQueue unacknowledgedStanzas>;

        interfaceinvoke $r13.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r12);

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void dropSmState()>();

     label11:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmAvailable()>();

        if $z0 == 0 goto label14;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSm>;

        if $z0 == 0 goto label14;

        varReplacer2041 = 0L;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long serverHandledStanzasCount> = varReplacer2041;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smEnabledSyncPoint>;

        $r14 = new org.jivesoftware.smack.sm.packet.StreamManagement$Enable;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumption>;

        $i1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smClientMaxResumptionTime>;

        specialinvoke $r14.<org.jivesoftware.smack.sm.packet.StreamManagement$Enable: void <init>(boolean,int)>($z0, $i1);

        virtualinvoke $r6.<org.jivesoftware.smack.SynchronizationPoint: void sendAndWaitForResponseOrThrow(org.jivesoftware.smack.packet.PlainStreamElement)>($r14);

        $r15 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        entermonitor $r15;

     label12:
        $r16 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        $z0 = interfaceinvoke $r16.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label13;

        $r16 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        $r17 = staticinvoke <org.jivesoftware.smack.sm.predicates.Predicate: org.jivesoftware.smack.filter.StanzaFilter forMessagesOrAfter5Stanzas()>();

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r17);

     label13:
        exitmonitor $r15;

     label14:
        $r18 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (org.jivesoftware.smack.packet.Stanza) $r19;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendStanzaInternal(org.jivesoftware.smack.packet.Stanza)>($r20);

     label16:
        goto label15;

     label17:
        $r21 := @caughtexception;

     label18:
        exitmonitor $r15;

     label19:
        throw $r21;

     label20:
        varReplacer2044 = 0;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void afterSuccessfulLogin(boolean)>(varReplacer2044);

     label21:
        goto label04;

        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label12 with label07;
        catch java.lang.Throwable from label12 to label14 with label17;
        catch java.lang.Throwable from label14 to label16 with label07;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label21 with label07;
    }

    void openStream()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.StreamOpen $r1;
        java.lang.String $r2, $r3, $r6;
        org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration $r4;
        java.lang.CharSequence $r5;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader $r7;
        java.io.Reader $r8;
        org.xmlpull.v1.XmlPullParser $r9;
        org.xmlpull.v1.XmlPullParserException $r10;
        org.jivesoftware.smack.SmackException $r11;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r2 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String getServiceName()>();

        $r3 = null;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration config>;

        $r5 = virtualinvoke $r4.<org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: java.lang.CharSequence getUsername()>();

        if $r5 == null goto label1;

        $r3 = staticinvoke <org.a.a.e: java.lang.String a(java.lang.CharSequence,java.lang.CharSequence)>($r5, $r2);

     label1:
        $r6 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String getStreamId()>();

        $r1 = new org.jivesoftware.smack.packet.StreamOpen;

        specialinvoke $r1.<org.jivesoftware.smack.packet.StreamOpen: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>($r2, $r3, $r6);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void send(org.jivesoftware.smack.packet.PlainStreamElement)>($r1);

        $r7 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader packetReader>;

        $r8 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader>;

     label2:
        $r9 = staticinvoke <org.jivesoftware.smack.util.PacketParserUtils: org.xmlpull.v1.XmlPullParser newXmppParser(java.io.Reader)>($r8);

     label3:
        $r7.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader: org.xmlpull.v1.XmlPullParser parser> = $r9;

        return;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.jivesoftware.smack.SmackException;

        specialinvoke $r11.<org.jivesoftware.smack.SmackException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label4;
    }

    public void removeAllRequestAckPredicates()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Set $r1, $r2;
        java.lang.Throwable $r3;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeAllStanzaAcknowledgedListeners()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Collection $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public void removeAllStanzaIdAcknowledgedListeners()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Map $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean removeRequestAckPredicate(org.jivesoftware.smack.filter.StanzaFilter)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.filter.StanzaFilter $r1;
        java.util.Set $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.filter.StanzaFilter;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeStanzaAcknowledgedListener(org.jivesoftware.smack.StanzaListener)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.StanzaListener $r1;
        boolean $z0;
        java.util.Collection $r2;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.StanzaListener;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection stanzaAcknowledgedListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }

    public org.jivesoftware.smack.StanzaListener removeStanzaIdAcknowledgedListener(java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.jivesoftware.smack.StanzaListener $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Map stanzaIdAcknowledgedListeners>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = (org.jivesoftware.smack.StanzaListener) $r2;

        return $r4;
    }

    public void requestSmAcknowledgement()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmEnabled()>();

        if $z0 != 0 goto label1;

        $r1 = new org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException;

        specialinvoke $r1.<org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException: void <init>()>();

        throw $r1;

     label1:
        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void requestSmAcknowledgementInternal()>();

        return;
    }

    public void send(org.jivesoftware.smack.packet.PlainStreamElement)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.PlainStreamElement $r1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r2;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.packet.PlainStreamElement;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void sendStreamElement(org.jivesoftware.smack.packet.Element)>($r1);

        return;
    }

    public void sendSmAcknowledgement()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmEnabled()>();

        if $z0 != 0 goto label1;

        $r1 = new org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException;

        specialinvoke $r1.<org.jivesoftware.smack.sm.StreamManagementException$StreamManagementNotEnabledException: void <init>()>();

        throw $r1;

     label1:
        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendSmAcknowledgementInternal()>();

        return;
    }

    protected void sendStanzaInternal(org.jivesoftware.smack.packet.Stanza)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.Stanza $r1;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r2;
        boolean $z0;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.jivesoftware.smack.filter.StanzaFilter $r6;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.packet.Stanza;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void sendStreamElement(org.jivesoftware.smack.packet.Element)>($r1);

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Set requestAckPredicates>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.jivesoftware.smack.filter.StanzaFilter) $r5;

        $z0 = interfaceinvoke $r6.<org.jivesoftware.smack.filter.StanzaFilter: boolean accept(org.jivesoftware.smack.packet.Stanza)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void requestSmAcknowledgementInternal()>();

     label2:
        return;
    }

    public void setBundleandDeferCallback(org.jivesoftware.smack.tcp.BundleAndDeferCallback)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.BundleAndDeferCallback $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.tcp.BundleAndDeferCallback;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.BundleAndDeferCallback bundleAndDeferCallback> = $r1;

        return;
    }

    public void setPreferredResumptionTime(int)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        int $i0;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $i0 := @parameter0: int;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: int smClientMaxResumptionTime> = $i0;

        return;
    }

    public void setUseStreamManagement(boolean)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        int varReplacer2028;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter0: boolean;

        varReplacer2028 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSm> = varReplacer2028;

        return;
    }

    public void setUseStreamManagementResumption(boolean)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        int varReplacer2029, varReplacer2030;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter0: boolean;

        varReplacer2030 = 1;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setUseStreamManagement(boolean)>(varReplacer2030);

        varReplacer2029 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useSmResumption> = varReplacer2029;

        return;
    }

    protected void setWriter(java.io.Writer)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.io.Writer;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = $r1;

        return;
    }

    protected void shutdown()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0;
        org.jivesoftware.smack.SmackException$NotConnectedException $r3;
        int varReplacer2007;
        java.lang.String varReplacer2008;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isSmEnabled()>();

        if $z0 == 0 goto label2;

     label1:
        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendSmAcknowledgementInternal()>();

     label2:
        varReplacer2007 = 0;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void shutdown(boolean)>(varReplacer2007);

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        varReplacer2008 = "Can not send final SM ack as connection is not connected";

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, varReplacer2008, $r3);

        goto label2;

        catch org.jivesoftware.smack.SmackException$NotConnectedException from label1 to label2 with label3;
    }

    public boolean streamWasResumed()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.SynchronizationPoint $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SynchronizationPoint smResumedSyncPoint>;

        $z0 = virtualinvoke $r1.<org.jivesoftware.smack.SynchronizationPoint: boolean wasSuccessful()>();

        return $z0;
    }

    protected void throwAlreadyConnectedExceptionIfAppropriate()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.SmackException$AlreadyConnectedException $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable>;

        if $z0 != 0 goto label1;

        $r1 = new org.jivesoftware.smack.SmackException$AlreadyConnectedException;

        specialinvoke $r1.<org.jivesoftware.smack.SmackException$AlreadyConnectedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    protected void throwAlreadyLoggedInExceptionIfAppropriate()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.SmackException$AlreadyLoggedInException $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isAuthenticated()>();

        if $z0 == 0 goto label1;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean disconnectedButResumeable>;

        if $z0 != 0 goto label1;

        $r1 = new org.jivesoftware.smack.SmackException$AlreadyLoggedInException;

        specialinvoke $r1.<org.jivesoftware.smack.SmackException$AlreadyLoggedInException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    protected void throwNotConnectedExceptionIfAppropriate()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter $r1;
        org.jivesoftware.smack.SmackException$NotConnectedException $r2;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        if $r1 != null goto label1;

        $r2 = new org.jivesoftware.smack.SmackException$NotConnectedException;

        specialinvoke $r2.<org.jivesoftware.smack.SmackException$NotConnectedException: void <init>()>();

        throw $r2;

     label1:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter packetWriter>;

        virtualinvoke $r1.<org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketWriter: void throwNotConnectedExceptionIfDoneAndResumptionNotPossible()>();

        return;
    }
}
