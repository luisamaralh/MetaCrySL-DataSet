public class com.bass.cleaner.security.p extends org.apache.http.conn.ssl.SSLSocketFactory
{
    javax.net.ssl.SSLContext a;

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        com.bass.cleaner.security.p $r0;
        java.security.KeyStore $r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.String $r3, varReplacer1146;
        javax.net.ssl.TrustManagerFactory $r4;
        javax.net.ssl.TrustManager[] $r5;
        null_type varReplacer1144, varReplacer1145, varReplacer1147;

        nop;

        $r0 := @this: com.bass.cleaner.security.p;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        varReplacer1146 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1146);

        $r0.<com.bass.cleaner.security.p: javax.net.ssl.SSLContext a> = $r2;

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3);

        varReplacer1147 = null;

        virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer1147);

        $r2 = $r0.<com.bass.cleaner.security.p: javax.net.ssl.SSLContext a>;

        $r5 = virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        varReplacer1144 = null;

        varReplacer1145 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1144, $r5, varReplacer1144);

        return;
    }

    public static org.apache.http.client.HttpClient getSSLHttpClient()
    {
        java.lang.String $r0, varReplacer1126, varReplacer1128, varReplacer1130;
        java.security.KeyStore $r1;
        com.bass.cleaner.security.p $r2, r11;
        org.apache.http.conn.ssl.X509HostnameVerifier $r3;
        org.apache.http.params.BasicHttpParams $r4, r12;
        org.apache.http.HttpVersion $r5;
        org.apache.http.conn.scheme.SchemeRegistry $r6, r13;
        org.apache.http.conn.scheme.Scheme $r7, r14;
        org.apache.http.conn.scheme.PlainSocketFactory $r8;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager $r9, r15;
        java.lang.Exception $r10;
        org.apache.http.impl.client.DefaultHttpClient r16;
        org.apache.http.params.HttpParams r17;
        org.apache.http.conn.scheme.SocketFactory r18;
        null_type varReplacer1124, varReplacer1125;
        int varReplacer1127, varReplacer1129;

     label01:
        nop;

        $r0 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r0);

        varReplacer1124 = null;

        varReplacer1125 = null;

        virtualinvoke $r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer1124, varReplacer1124);

     label02:
        r11 = new com.bass.cleaner.security.p;

        $r2 = r11;

     label03:
        specialinvoke r11.<com.bass.cleaner.security.p: void <init>(java.security.KeyStore)>($r1);

     label04:
        $r3 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER>;

     label05:
        virtualinvoke $r2.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r3);

     label06:
        r12 = new org.apache.http.params.BasicHttpParams;

        $r4 = r12;

     label07:
        specialinvoke r12.<org.apache.http.params.BasicHttpParams: void <init>()>();

     label08:
        $r5 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label09:
        r17 = (org.apache.http.params.HttpParams) $r4;

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>(r17, $r5);

        r17 = (org.apache.http.params.HttpParams) $r4;

        varReplacer1130 = "UTF-8";

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>(r17, varReplacer1130);

     label10:
        r13 = new org.apache.http.conn.scheme.SchemeRegistry;

        $r6 = r13;

     label11:
        specialinvoke r13.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

     label12:
        r14 = new org.apache.http.conn.scheme.Scheme;

        $r7 = r14;

     label13:
        $r8 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        r18 = (org.apache.http.conn.scheme.SocketFactory) $r8;

        varReplacer1128 = "http";

        varReplacer1129 = 80;

        specialinvoke r14.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer1128, r18, varReplacer1129);

        virtualinvoke $r6.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r7);

     label14:
        r14 = new org.apache.http.conn.scheme.Scheme;

        $r7 = r14;

     label15:
        varReplacer1126 = "https";

        varReplacer1127 = 443;

        specialinvoke r14.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer1126, $r2, varReplacer1127);

        virtualinvoke $r6.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r7);

     label16:
        r15 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r9 = r15;

     label17:
        r17 = (org.apache.http.params.HttpParams) $r4;

        specialinvoke r15.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>(r17, $r6);

     label18:
        r16 = new org.apache.http.impl.client.DefaultHttpClient;

     label19:
        r17 = (org.apache.http.params.HttpParams) $r4;

        specialinvoke r16.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>($r9, r17);

     label20:
        return r16;

     label21:
        $r10 := @caughtexception;

        r16 = new org.apache.http.impl.client.DefaultHttpClient;

        specialinvoke r16.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        return r16;

        catch java.lang.Exception from label01 to label02 with label21;
        catch java.lang.Exception from label03 to label04 with label21;
        catch java.lang.Exception from label05 to label06 with label21;
        catch java.lang.Exception from label07 to label08 with label21;
        catch java.lang.Exception from label09 to label10 with label21;
        catch java.lang.Exception from label11 to label12 with label21;
        catch java.lang.Exception from label13 to label14 with label21;
        catch java.lang.Exception from label15 to label16 with label21;
        catch java.lang.Exception from label17 to label18 with label21;
        catch java.lang.Exception from label19 to label20 with label21;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        com.bass.cleaner.security.p $r0;
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;

        $r0 := @this: com.bass.cleaner.security.p;

        $r1 = $r0.<com.bass.cleaner.security.p: javax.net.ssl.SSLContext a>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        com.bass.cleaner.security.p $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: com.bass.cleaner.security.p;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<com.bass.cleaner.security.p: javax.net.ssl.SSLContext a>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }
}
