public class com.jotunheijm505.crocuschina.c extends java.lang.Object
{

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, $r2, r21, varReplacer66, varReplacer67, varReplacer68, varReplacer69, varReplacer71, varReplacer72, varReplacer73, varReplacer74;
        javax.crypto.spec.DESKeySpec $r1, r22;
        com.jotunheijm505.crocuschina.b$a $r3;
        byte[] $r4;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.Cipher $r7, $r8;
        java.lang.Throwable $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.security.InvalidKeyException r23;
        java.security.NoSuchAlgorithmException r24;
        java.security.spec.InvalidKeySpecException r25;
        javax.crypto.NoSuchPaddingException r26;
        javax.crypto.IllegalBlockSizeException r27;
        javax.crypto.BadPaddingException r28;
        java.io.UnsupportedEncodingException r29;
        int varReplacer70;

        nop;

        $r0 := @parameter0: java.lang.String;

        r22 = new javax.crypto.spec.DESKeySpec;

        $r1 = r22;

        r21 = new java.lang.String;

        $r2 = r21;

     label01:
        $r3 = staticinvoke <com.jotunheijm505.crocuschina.b: com.jotunheijm505.crocuschina.b$a a()>();

        varReplacer73 = "eXRxZTdvYnllNw==";

        $r4 = virtualinvoke $r3.<com.jotunheijm505.crocuschina.b$a: byte[] a(java.lang.String)>(varReplacer73);

        specialinvoke r21.<java.lang.String: void <init>(byte[])>($r4);

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        specialinvoke r22.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r4);

        varReplacer74 = "DES";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer74);

        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r1);

        varReplacer71 = "DES";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer71);

     label02:
        $r8 = $r7;

     label03:
        varReplacer70 = 2;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer70, $r6);

     label04:
        $r3 = staticinvoke <com.jotunheijm505.crocuschina.b: com.jotunheijm505.crocuschina.b$a b()>();

        $r4 = virtualinvoke $r3.<com.jotunheijm505.crocuschina.b$a: byte[] a(java.lang.String)>($r0);

     label05:
        $r4 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label06:
        $r2 = new java.lang.String;

     label07:
        varReplacer68 = "UTF8";

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer68);

     label08:
        return $r2;

     label09:
        $r9 := @caughtexception;

        $r8 = null;

        $r10 = $r9;

     label10:
        r23 = (java.security.InvalidKeyException) $r10;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label04;

     label11:
        $r11 := @caughtexception;

        $r8 = null;

        $r12 = $r11;

     label12:
        r24 = (java.security.NoSuchAlgorithmException) $r12;

        virtualinvoke r24.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label04;

     label13:
        $r13 := @caughtexception;

        $r8 = null;

        $r14 = $r13;

     label14:
        r25 = (java.security.spec.InvalidKeySpecException) $r14;

        virtualinvoke r25.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        goto label04;

     label15:
        $r15 := @caughtexception;

        $r8 = null;

        $r16 = $r15;

     label16:
        r26 = (javax.crypto.NoSuchPaddingException) $r16;

        virtualinvoke r26.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label04;

     label17:
        $r17 := @caughtexception;

        varReplacer69 = "";

        return varReplacer69;

     label18:
        $r18 := @caughtexception;

        r27 = (javax.crypto.IllegalBlockSizeException) $r18;

        virtualinvoke r27.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer72 = "";

        return varReplacer72;

     label19:
        $r19 := @caughtexception;

        r28 = (javax.crypto.BadPaddingException) $r19;

        virtualinvoke r28.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer67 = "";

        return varReplacer67;

     label20:
        $r20 := @caughtexception;

        r29 = (java.io.UnsupportedEncodingException) $r20;

        virtualinvoke r29.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        varReplacer66 = "";

        return varReplacer66;

     label21:
        $r16 := @caughtexception;

        goto label16;

     label22:
        $r14 := @caughtexception;

        goto label14;

     label23:
        $r12 := @caughtexception;

        goto label12;

     label24:
        $r10 := @caughtexception;

        goto label10;

        catch java.security.InvalidKeyException from label01 to label02 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label11;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label13;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label15;
        catch java.security.InvalidKeyException from label03 to label04 with label24;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label23;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label22;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label21;
        catch java.lang.IllegalArgumentException from label04 to label05 with label17;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label20;
    }

    public static byte[] a(java.io.InputStream)
    {
        java.io.InputStream $r0;
        javax.crypto.spec.DESKeySpec $r1;
        java.lang.String $r2, varReplacer256, varReplacer260, varReplacer262;
        com.jotunheijm505.crocuschina.b$a $r3;
        byte[] $r4, $r10;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.Cipher $r7;
        java.io.ByteArrayOutputStream $r8;
        javax.crypto.CipherOutputStream $r9;
        int $i0, varReplacer257, varReplacer258, varReplacer259, varReplacer261;
        java.lang.Exception $r11, $r12;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new javax.crypto.spec.DESKeySpec;

        $r2 = new java.lang.String;

     label01:
        $r3 = staticinvoke <com.jotunheijm505.crocuschina.b: com.jotunheijm505.crocuschina.b$a a()>();

        varReplacer262 = "eXRxZTdvYnllNw==";

        $r4 = virtualinvoke $r3.<com.jotunheijm505.crocuschina.b$a: byte[] a(java.lang.String)>(varReplacer262);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r1.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r4);

        varReplacer256 = "DES";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer256);

        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r1);

        varReplacer260 = "DES";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer260);

        varReplacer261 = 2;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer261, $r6);

        $r4 = staticinvoke <com.jotunheijm505.crocuschina.c: byte[] b(java.io.InputStream)>($r0);

     label02:
        $r8 = new java.io.ByteArrayOutputStream;

     label03:
        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        $r9 = new javax.crypto.CipherOutputStream;

     label05:
        specialinvoke $r9.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r8, $r7);

        virtualinvoke $r9.<javax.crypto.CipherOutputStream: void write(byte[])>($r4);

        virtualinvoke $r9.<javax.crypto.CipherOutputStream: void flush()>();

        virtualinvoke $r9.<javax.crypto.CipherOutputStream: void close()>();

        $r4 = newarray (byte)[1024];

     label06:
        varReplacer257 = 0;

        varReplacer258 = 1024;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r4, varReplacer257, varReplacer258);

     label07:
        if $i0 != -1 goto label10;

     label08:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        $r10 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label09:
        return $r10;

     label10:
        varReplacer259 = 0;

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, varReplacer259, $i0);

     label11:
        goto label06;

     label12:
        $r11 := @caughtexception;

     label13:
        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        return $r4;

     label14:
        $r12 := @caughtexception;

        $r4 = null;

        $r11 = $r12;

        goto label13;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    public static byte[] b(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] $r1;
        boolean $z0;
        int $i0, varReplacer287, varReplacer288, varReplacer289, varReplacer290;
        java.io.ByteArrayOutputStream $r2;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $z0 = $r0 instanceof java.io.ByteArrayInputStream;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int available()>();

        $r1 = newarray (byte)[$i0];

        varReplacer288 = 0;

        virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, varReplacer288, $i0);

        return $r1;

     label1:
        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = newarray (byte)[1024];

     label2:
        varReplacer289 = 0;

        varReplacer290 = 1024;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, varReplacer289, varReplacer290);

        if $i0 != -1 goto label3;

        $r1 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r1;

     label3:
        varReplacer287 = 0;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, varReplacer287, $i0);

        goto label2;
    }
}
