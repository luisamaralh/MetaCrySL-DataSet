Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: 4c007d82661266b5817bbe92225f4b95e375d4009b399b6ad4a1c654005f0fd7
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3654)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: c6612e57cc5cd98d0b640b4fc88fc10da5c3fa3daa6b5e3730d823ffeaf861f9
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2091)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: 93d99125188fb576f654449607027cad5ec6d9e2307ec476e25b27e7bde778d2
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1691)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: d4bd1e044d6e989ae696b911398833be0d33c72b58c858c9ecbcb299e023c76f
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: 27f82111816bf99e6a2a10880c4210634b4624ba132e568446a0d29d52dd4b2d
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2090)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: 6754c80ca1a63247cefabce13419f86534944cf737340e6c8a93ef6b9867e73c
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 141880d770344d9c6cee1cdc0028c41461b3f74707dded4ed9a4ae43ded6a71
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1977)
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: 1d1afc8b95ece7cdf93df28ff04cf382176e112676134c788f042c6c9b64b9a5
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: fb40d49f1980c4b1fc0c80b54eb58455d51dcf103627d44d4367f91734a9ea00
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer2634)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 1dc1615a006ba47b52f24897d15010ebfbb0ceddee20dced1b2879903c058421
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: eabac5d4694f0c3a1c1a78ee1edbf39575e287a76765f7a2bbbfa518dfe94c3d
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2200)
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: 7a4a915f9487cf4d529159129039b64149ab29f51ed77f1193be8ca70123afea
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: da0001f2f60063ff8c3ff8a4f94b86183eb95033c873c3302a0bb4d3f9677725
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1645)
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: 66f93f8bed52fa1daa6e83f5c65b841c1a7e02f7091010fefb7979d45725172e
		Secure: true
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: e6f2e13bd9cf1e838ff5047a99a203627e8a9186865c7c1bb76ce3e4ba14648c
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: db7ce7715a4d20c843f3b647efb03b4185a332616382d09772954c5afcd1dedf
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: 6672633037273bc684c7a56184a60c650c59ccbf9844873a409252ec13a74329
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3657)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: db6e5fdcc5fe5b27c1d56dcf87daf5d4ec4f3a09a15c8c69a251ed2b3808ce52
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: abff8bd008aa8e630f3c565ff73f43fe4ad825b545c79672aa0ecbf5f80e56e1
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: f154e72054c3e5fcf84c1d9625748db9f190ce8a7471aa9ae18a5fdecc0fefc2
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: efb90d6c0588cba5ebcef086856e6845e8300ba68ce490c6310b52d33b1bbec2
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1904)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: c8ecf16758cc3bbb5062086e44c8071ee4e4416e1ff714841b2f3be6cfe848cb
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 20c5e227023f83179f48f2d29725faedbdb908d9c821320416214b63e2139378
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1903)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 3e906adbca0381f4ea2981e1495f659b13c1842809bc227baf389374f4dce2b2
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 5c116a0fc5fd5864b9d3b5a9773e309eacebfeef81e48f6293a3e61003089211
		Secure: false
	Object:
		Variable: r6
		Type: java.security.SecureRandom
		Statement: specialinvoke r6.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: a212a32d25e5836ac936eca4bb3774642296c7c151bea8c797ded6872c071780
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer2097)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: e2a7ca7efaf0d95b9b9db75cc0d56ae3fea1cb546b071c2911a806811a0616b1
		Secure: false
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 3471e7361ae58e3d1c565e8b90ebc1741f759d996e09b82daf3f7a41eb065adf
		Secure: true
	Object:
		Variable: varReplacer1904
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1904)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 69d62d65e6eeab47818cc8c629e2874cefed8d2ffbabb49b2ea0100e7f3d0447
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1907)
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: 365774eb16bd87106bdcb3aec5af736a88a0ab6e0e75631f894365ee8c2118ca
		Secure: true

Findings in Java Class: com.eyewind.cross_stitch.util.b

	 in Method: byte[] a(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer2088, $r6, $r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #93d99125188fb576f654449607027cad5ec6d9e2307ec476e25b27e7bde778d2)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2091)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #6754c80ca1a63247cefabce13419f86534944cf737340e6c8a93ef6b9867e73c)
			First parameter (with value "DES") should be any of {AES, DESede, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2090)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer2088, $r6, $r1)


	 in Method: byte[] a()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #e2a7ca7efaf0d95b9b9db75cc0d56ae3fea1cb546b071c2911a806811a0616b1)
			First parameter (with value "DES") should be any of {HmacSHA224, HmacSHA256, AES, HmacSHA384, AESWRAP, DESede, HmacMD5, HmacSHA512, DESedeWRAP}
			at statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer2097)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			First parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>($r0)


	 in Method: byte[] b(byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #c6612e57cc5cd98d0b640b4fc88fc10da5c3fa3daa6b5e3730d823ffeaf861f9)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3654)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3653, $r6, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #db6e5fdcc5fe5b27c1d56dcf87daf5d4ec4f3a09a15c8c69a251ed2b3808ce52)
			First parameter (with value "DES") should be any of {AES, DESede, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3657)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3653, $r6, $r1)


Findings in Java Class: com.umeng.analytics.s

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1904)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1905, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1905, $r2, $r4)


Findings in Java Class: com.eyewind.cross_stitch.util.billing.p

	 in Method: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 30

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 12
	ConstraintError: 5
=====================================================================