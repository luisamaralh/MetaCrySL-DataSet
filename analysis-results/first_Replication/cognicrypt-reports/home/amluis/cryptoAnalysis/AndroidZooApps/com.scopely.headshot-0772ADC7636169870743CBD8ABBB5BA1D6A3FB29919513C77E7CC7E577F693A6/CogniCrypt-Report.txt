Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0)
		Method: <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>
		SHA-256: b06ea93113caf1c0a34502b70367c98fc8260fbfa0ac30bcb23e381db0de6b00
		Secure: true
	Object:
		Variable: $r10
		Type: javax.crypto.Cipher
		Statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3805)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 9cb9bbdf329de6b5d31e5db5604163ccc77775fb400eec4a678189f85e96b3e4
		Secure: false
	Object:
		Variable: varReplacer5228
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer5228)
		Method: <com.helpshift.HSApiClient: java.lang.String getSignature(java.lang.String)>
		SHA-256: ae26cb935d5b1f2a8d2d84756c737b9a9a40d8bf6c617e56b494e876161016e7
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r0.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.facebook.internal.Utility: java.lang.String hashBytes(java.security.MessageDigest,byte[])>
		SHA-256: 712110b6d50d4a42f86c9165e8b14514ae6cccf973f8d32cdf255cac7d8b2aad
		Secure: true
	Object:
		Variable: r20
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer3809, varReplacer3810)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: d5da97c4385c4a5ac4dc92b150044b443b81de7342a379c2711a2f0f1b976892
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: a3d08211d3ba404e6ba4646686ff2b51d3fd8d0e847ca8bb2960c48a82e64856
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.SecretKey
		Statement: $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 370c144343593a2f250efa941f352a4014e247d247772ee8513fb5ea08368c0d
		Secure: false
	Object:
		Variable: r22
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke r22.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 9de94fb3b8b644281a93e70f5ced5a864e7605e93cd7ead74732dcaed3d32d5f
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer5062)
		Method: <com.leanplum.aW: javax.net.ssl.SSLSocketFactory b(com.leanplum.aW)>
		SHA-256: 5f0f7a83559e2b928628e698c3308f1f72ae6fc6e91d16b84a390d68eeceb497
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer5228)
		Method: <com.helpshift.HSApiClient: java.lang.String getSignature(java.lang.String)>
		SHA-256: 92c06b0a1ce84d248f364a2289f13374de3cc39c6d2148342f32256a19b7fcdf
		Secure: false
	Object:
		Variable: r21
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer3799)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: a5204f741684d8dd5e99a85c1a3d3af9df7c41b8f7236048a251cf35fb304e6f
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<javax.crypto.Mac: byte[] doFinal(byte[])>($r6)
		Method: <com.helpshift.HSApiClient: java.lang.String getSignature(java.lang.String)>
		SHA-256: 7ce6f01b3e8950a491644e247611cfb2f61ddbe5ef8f6fca0432db2aa1fb8dd0
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKeyFactory
		Statement: $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3808)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 1f2220335c8632c901284cdafc8925495cfe9a8a276c8e8fd994b44b9ea372e2
		Secure: false
	Object:
		Variable: varReplacer3810
		Type: int
		Statement: specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer3809, varReplacer3810)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 9ae0ea79d85cff13dbaa82bf110e2c1e477937b23a740be0c99b6fd75d66f684
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2452)
		Method: <net.hockeyapp.android.Constants: void loadCrashIdentifier(android.content.Context)>
		SHA-256: 97f27e665945d8a0dc29d2a62ee2e05c4af365a0a435bd77da05944f5813cfa4
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2760)
		Method: <com.leanplum.FileManager: com.leanplum.k a(java.io.InputStream)>
		SHA-256: e1b79a6eb802341c0e7290c1823a439f6f736071b4e1c6f504fab9865bd6560d
		Secure: false
	Object:
		Variable: r9
		Type: java.security.DigestInputStream
		Statement: specialinvoke r9.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>(r12, $r1)
		Method: <com.leanplum.FileManager: com.leanplum.k a(java.io.InputStream)>
		SHA-256: 133c6271dfef209c4fe0ca5ec7a66d4f3f6886c0cfadc93cb686d64267a2b169
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <net.hockeyapp.android.Constants: void loadCrashIdentifier(android.content.Context)>
		SHA-256: 6a3069053649d899383b61fcfad25384555728d4af17de5336fb5f338ffe42e5
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.iugome.igl.Helper$1: void run()>
		SHA-256: afe53ec9b28d8bf2f95a73849833318616de31825c660fd1b756b68a522ed48b
		Secure: true
	Object:
		Variable: varReplacer3799
		Type: java.lang.String
		Statement: specialinvoke r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer3799)
		Method: <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>
		SHA-256: 54158f7ca6dab2d3476fba563ae82d60fbe4c989cd6cc724713df14b32cfc6f9
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Mac
		Statement: $r7 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer5224)
		Method: <com.helpshift.HSApiClient: java.lang.String getSignature(java.lang.String)>
		SHA-256: b26e8626baa911ec3faac3db64d241ba5b39219f1b1c0972d8550bc2403451
		Secure: true

Findings in Java Class: com.leanplum.FileManager

	 in Method: com.leanplum.k a(java.io.InputStream)
		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #133c6271dfef209c4fe0ca5ec7a66d4f3f6886c0cfadc93cb686d64267a2b169)
			Operation on object of type java.security.DigestInputStream object not completed. Expected call to read
			at statement: specialinvoke r9.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>(r12, $r1)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #e1b79a6eb802341c0e7290c1823a439f6f736071b4e1c6f504fab9865bd6560d)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r3 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.leanplum.a

	 in Method: byte[] a(int,java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #d5da97c4385c4a5ac4dc92b150044b443b81de7342a379c2711a2f0f1b976892)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer3809, varReplacer3810)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke r22.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer3809, varReplacer3810)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($i0, $r9, $r11)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #d5da97c4385c4a5ac4dc92b150044b443b81de7342a379c2711a2f0f1b976892)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer3809, varReplacer3810)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer3799)


Findings in Java Class: com.leanplum.aW

	 in Method: javax.net.ssl.SSLSocketFactory b(com.leanplum.aW)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5059, varReplacer5059, varReplacer5059)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5059, varReplacer5059, varReplacer5059)


Findings in Java Class: com.helpshift.HSApiClient

	 in Method: java.lang.String getSignature(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer5228)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 21

	CogniCrypt found the following violations. For details see description above.
	TypestateError: 1
	IncompleteOperationError: 2
	RequiredPredicateError: 8
	ConstraintError: 1
=====================================================================