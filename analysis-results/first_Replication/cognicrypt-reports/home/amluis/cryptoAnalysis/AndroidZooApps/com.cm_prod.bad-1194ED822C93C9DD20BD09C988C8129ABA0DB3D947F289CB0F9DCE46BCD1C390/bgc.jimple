public class bgc extends java.lang.Object implements bgi
{
    private static final java.security.SecureRandom a;
    private int b;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;

        nop;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <bgc: java.security.SecureRandom a> = $r0;

        return;
    }

    public void <init>()
    {
        bgc $r0;
        int varReplacer7283;

        nop;

        $r0 := @this: bgc;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer7283 = 1024;

        $r0.<bgc: int b> = varReplacer7283;

        return;
    }

    private static int a(byte[])
    {
        byte[] $r0;
        java.lang.Object[] $r1;
        int $i0;
        boolean $z0;
        byte $b1;
        java.lang.String varReplacer7289;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label2;

        $z0 = 1;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        varReplacer7289 = "Data must be at least one byte long to read version number.";

        staticinvoke <bgj: void a(boolean,java.lang.String,java.lang.Object[])>($z0, varReplacer7289, $r1);

        $b1 = $r0[0];

        return $b1;

     label2:
        $z0 = 0;

        goto label1;
    }

    private static byte[] a(int)
    {
        int $i0;
        byte[] $r0;
        java.security.SecureRandom $r1;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[$i0];

        $r1 = <bgc: java.security.SecureRandom a>;

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    private byte[] a(bgd, javax.crypto.SecretKey, javax.crypto.SecretKey)
    {
        bgc $r0;
        bgd $r1;
        javax.crypto.SecretKey $r2, $r3;
        javax.crypto.Mac $r4;
        byte[] $r5, $r6;
        boolean $z0;
        bgh $r7;
        java.lang.Throwable $r8, $r12;
        bgf $r9;
        javax.crypto.Cipher $r10;
        javax.crypto.spec.IvParameterSpec $r11;
        java.lang.String varReplacer7338, varReplacer7339, varReplacer7340, varReplacer7342, varReplacer7343;
        int varReplacer7341;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: bgd;

        $r2 := @parameter1: javax.crypto.SecretKey;

        $r3 := @parameter2: javax.crypto.SecretKey;

     label01:
        varReplacer7339 = "HmacSHA256";

        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer7339);

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r3);

        $r5 = virtualinvoke $r1.<bgd: byte[] b()>();

        $r5 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r5);

        $r6 = virtualinvoke $r1.<bgd: byte[] g()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r6);

     label02:
        if $z0 != 0 goto label06;

        $r7 = new bgh;

     label03:
        varReplacer7340 = "Incorrect HMAC value.";

        specialinvoke $r7.<bgh: void <init>(java.lang.String)>(varReplacer7340);

     label04:
        throw $r7;

     label05:
        $r8 := @caughtexception;

        $r9 = new bgf;

        varReplacer7338 = "Caught InvalidKeyException. Do you have unlimited strength jurisdiction files installed?";

        specialinvoke $r9.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7338, $r8);

        throw $r9;

     label06:
        varReplacer7342 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer7342);

     label07:
        $r11 = new javax.crypto.spec.IvParameterSpec;

     label08:
        $r5 = virtualinvoke $r1.<bgd: byte[] e()>();

        specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5);

        varReplacer7341 = 2;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer7341, $r2, $r11);

        $r5 = virtualinvoke $r1.<bgd: byte[] f()>();

        $r5 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label09:
        return $r5;

     label10:
        $r12 := @caughtexception;

        $r9 = new bgf;

        varReplacer7343 = "Failed to decrypt message.";

        specialinvoke $r9.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7343, $r12);

        throw $r9;

        catch java.security.InvalidKeyException from label01 to label02 with label05;
        catch java.security.InvalidKeyException from label03 to label04 with label05;
        catch java.security.GeneralSecurityException from label01 to label02 with label10;
        catch java.security.GeneralSecurityException from label03 to label04 with label10;
        catch java.security.InvalidKeyException from label06 to label07 with label05;
        catch java.security.InvalidKeyException from label08 to label09 with label05;
        catch java.security.GeneralSecurityException from label06 to label07 with label10;
        catch java.security.GeneralSecurityException from label08 to label09 with label10;
    }

    private byte[] a(bge, javax.crypto.SecretKey, javax.crypto.SecretKey)
    {
        bgc $r0;
        bge $r1;
        javax.crypto.SecretKey $r2, $r3;
        javax.crypto.Mac $r4;
        byte[] $r5, $r6;
        boolean $z0;
        bgh $r7;
        java.lang.Throwable $r8, $r12;
        bgf $r9;
        javax.crypto.Cipher $r10;
        javax.crypto.spec.IvParameterSpec $r11;
        int varReplacer7318;
        java.lang.String varReplacer7319, varReplacer7320, varReplacer7321, varReplacer7322, varReplacer7323;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: bge;

        $r2 := @parameter1: javax.crypto.SecretKey;

        $r3 := @parameter2: javax.crypto.SecretKey;

     label01:
        varReplacer7322 = "HmacSHA256";

        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer7322);

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r3);

        $r5 = virtualinvoke $r1.<bge: byte[] b()>();

        $r5 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r5);

        $r6 = virtualinvoke $r1.<bge: byte[] g()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r6);

     label02:
        if $z0 != 0 goto label06;

        $r7 = new bgh;

     label03:
        varReplacer7323 = "Incorrect HMAC value.";

        specialinvoke $r7.<bgh: void <init>(java.lang.String)>(varReplacer7323);

     label04:
        throw $r7;

     label05:
        $r8 := @caughtexception;

        $r9 = new bgf;

        varReplacer7321 = "Caught InvalidKeyException. Do you have unlimited strength jurisdiction files installed?";

        specialinvoke $r9.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7321, $r8);

        throw $r9;

     label06:
        varReplacer7320 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer7320);

     label07:
        $r11 = new javax.crypto.spec.IvParameterSpec;

     label08:
        $r5 = virtualinvoke $r1.<bge: byte[] e()>();

        specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5);

        varReplacer7318 = 2;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer7318, $r2, $r11);

        $r5 = virtualinvoke $r1.<bge: byte[] f()>();

        $r5 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label09:
        return $r5;

     label10:
        $r12 := @caughtexception;

        $r9 = new bgf;

        varReplacer7319 = "Failed to decrypt message.";

        specialinvoke $r9.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7319, $r12);

        throw $r9;

        catch java.security.InvalidKeyException from label01 to label02 with label05;
        catch java.security.InvalidKeyException from label03 to label04 with label05;
        catch java.security.GeneralSecurityException from label01 to label02 with label10;
        catch java.security.GeneralSecurityException from label03 to label04 with label10;
        catch java.security.InvalidKeyException from label06 to label07 with label05;
        catch java.security.InvalidKeyException from label08 to label09 with label05;
        catch java.security.GeneralSecurityException from label06 to label07 with label10;
        catch java.security.GeneralSecurityException from label08 to label09 with label10;
    }

    private byte[] c(byte[], char[])
    {
        bgc $r0;
        byte[] $r1;
        char[] $r2;
        bgd $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        bgg $r5;
        bgf $r6;
        javax.crypto.SecretKey $r7, $r8;
        java.lang.String varReplacer7290, varReplacer7291;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: char[];

        $r3 = new bgd;

     label1:
        specialinvoke $r3.<bgd: void <init>(byte[])>($r1);

        $z0 = virtualinvoke $r3.<bgd: boolean h()>();

     label2:
        if $z0 != 0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

     label3:
        varReplacer7291 = "Ciphertext was not encrypted with a password.";

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer7291);

     label4:
        throw $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new bgf;

        varReplacer7290 = "Unable to parse ciphertext.";

        specialinvoke $r6.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7290, $r5);

        throw $r6;

     label6:
        $r1 = virtualinvoke $r3.<bgd: byte[] c()>();

        $r7 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r1);

        $r1 = virtualinvoke $r3.<bgd: byte[] d()>();

        $r8 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r1);

        $r1 = specialinvoke $r0.<bgc: byte[] a(bgd,javax.crypto.SecretKey,javax.crypto.SecretKey)>($r3, $r7, $r8);

     label7:
        return $r1;

        catch bgg from label1 to label2 with label5;
        catch bgg from label3 to label4 with label5;
        catch bgg from label6 to label7 with label5;
    }

    private byte[] d(byte[], char[])
    {
        bgc $r0;
        byte[] $r1;
        char[] $r2;
        bge $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        bgg $r5;
        bgf $r6;
        javax.crypto.SecretKey $r7, $r8;
        java.lang.String varReplacer7292, varReplacer7293;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: char[];

        $r3 = new bge;

     label1:
        specialinvoke $r3.<bge: void <init>(byte[])>($r1);

        $z0 = virtualinvoke $r3.<bge: boolean h()>();

     label2:
        if $z0 != 0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

     label3:
        varReplacer7293 = "Ciphertext was not encrypted with a password.";

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer7293);

     label4:
        throw $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new bgf;

        varReplacer7292 = "Unable to parse ciphertext.";

        specialinvoke $r6.<bgf: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer7292, $r5);

        throw $r6;

     label6:
        $r1 = virtualinvoke $r3.<bge: byte[] c()>();

        $r7 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r1);

        $r1 = virtualinvoke $r3.<bge: byte[] d()>();

        $r8 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r1);

        $r1 = specialinvoke $r0.<bgc: byte[] a(bge,javax.crypto.SecretKey,javax.crypto.SecretKey)>($r3, $r7, $r8);

     label7:
        return $r1;

        catch bgg from label1 to label2 with label5;
        catch bgg from label3 to label4 with label5;
        catch bgg from label6 to label7 with label5;
    }

    public int a()
    {
        bgc $r0;
        java.lang.Throwable $r1;
        int i0;

        nop;

        $r0 := @this: bgc;

        entermonitor $r0;

     label1:
        i0 = $r0.<bgc: int b>;

     label2:
        exitmonitor $r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public javax.crypto.SecretKey a(char[], byte[])
    {
        bgc $r0;
        char[] $r1;
        byte[] $r2;
        java.lang.Object[] $r3;
        int $i0, varReplacer7311, varReplacer7314;
        boolean $z0;
        java.lang.Integer $r4;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.spec.PBEKeySpec $r6;
        javax.crypto.SecretKey $r7;
        javax.crypto.spec.SecretKeySpec $r8;
        java.lang.Throwable $r9;
        bgf $r10;
        java.lang.String $r11, varReplacer7309, varReplacer7310, varReplacer7312, varReplacer7313, varReplacer7315, varReplacer7316, varReplacer7317;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: byte[];

        $r3 = newarray (java.lang.Object)[0];

        varReplacer7315 = "Salt value cannot be null.";

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r2, varReplacer7315, $r3);

        $i0 = lengthof $r2;

        if $i0 != 8 goto label09;

        $z0 = 1;

     label01:
        $r3 = newarray (java.lang.Object)[1];

        varReplacer7314 = 8;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer7314);

        $r3[0] = $r4;

        varReplacer7313 = "Salt value must be %d bytes.";

        staticinvoke <bgj: void a(boolean,java.lang.String,java.lang.Object[])>($z0, varReplacer7313, $r3);

        $r3 = newarray (java.lang.Object)[0];

        varReplacer7316 = "Password cannot be null.";

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r1, varReplacer7316, $r3);

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label10;

        $z0 = 1;

     label02:
        $r3 = newarray (java.lang.Object)[0];

        varReplacer7310 = "Password cannot be empty.";

        staticinvoke <bgj: void a(boolean,java.lang.String,java.lang.Object[])>($z0, varReplacer7310, $r3);

     label03:
        varReplacer7309 = "PBKDF2WithHmacSHA1";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer7309);

     label04:
        $r6 = new javax.crypto.spec.PBEKeySpec;

     label05:
        $i0 = virtualinvoke $r0.<bgc: int a()>();

        varReplacer7311 = 256;

        specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r2, $i0, varReplacer7311);

        $r7 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r6);

     label06:
        $r8 = new javax.crypto.spec.SecretKeySpec;

     label07:
        $r2 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        varReplacer7312 = "AES";

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer7312);

     label08:
        return $r8;

     label09:
        $z0 = 0;

        goto label01;

     label10:
        $z0 = 0;

        goto label02;

     label11:
        $r9 := @caughtexception;

        $r10 = new bgf;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "PBKDF2WithHmacSHA1";

        varReplacer7317 = "Failed to generate key from password using %s.";

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer7317, $r3);

        specialinvoke $r10.<bgf: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r9);

        throw $r10;

        catch java.security.GeneralSecurityException from label03 to label04 with label11;
        catch java.security.GeneralSecurityException from label05 to label06 with label11;
        catch java.security.GeneralSecurityException from label07 to label08 with label11;
    }

    public byte[] a(byte[], char[])
    {
        bgc $r0;
        byte[] $r1;
        char[] $r2;
        java.lang.Object[] $r3;
        int $i0;
        boolean $z0;
        bgf $r4;
        java.util.Locale $r5;
        java.lang.Integer $r6;
        java.lang.String $r7, varReplacer7284, varReplacer7285, varReplacer7286, varReplacer7287;

        nop;

        $r0 := @this: bgc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: char[];

        $r3 = newarray (java.lang.Object)[0];

        varReplacer7284 = "Ciphertext cannot be null.";

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r1, varReplacer7284, $r3);

        $r3 = newarray (java.lang.Object)[0];

        varReplacer7286 = "Password cannot be null.";

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r2, varReplacer7286, $r3);

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label3;

        $z0 = 1;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        varReplacer7287 = "Password cannot be empty.";

        staticinvoke <bgj: void a(boolean,java.lang.String,java.lang.Object[])>($z0, varReplacer7287, $r3);

        $i0 = staticinvoke <bgc: int a(byte[])>($r1);

        lookupswitch($i0)
        {
            case 2: goto label4;
            case 3: goto label5;
            default: goto label2;
        };

     label2:
        $r4 = new bgf;

        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r6;

        varReplacer7285 = "Unrecognised version number: %d.";

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, varReplacer7285, $r3);

        specialinvoke $r4.<bgf: void <init>(java.lang.String)>($r7);

        throw $r4;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r1 = specialinvoke $r0.<bgc: byte[] c(byte[],char[])>($r1, $r2);

        return $r1;

     label5:
        $r1 = specialinvoke $r0.<bgc: byte[] d(byte[],char[])>($r1, $r2);

        return $r1;
    }

    byte[] a(byte[], char[], byte[], byte[], byte[])
    {
        bgc $r0;
        byte[] $r1, $r3, $r4, $r5;
        char[] $r2;
        javax.crypto.spec.IvParameterSpec $r6;
        javax.crypto.SecretKey $r7, $r8;
        javax.crypto.Cipher $r9;
        bge $r10;
        javax.crypto.Mac $r11;
        java.lang.Throwable $r12, $r14;
        bgf $r13;

        $r0 := @this: bgc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: char[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        $r5 := @parameter4: byte[];

        $r7 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r3);

        $r8 = virtualinvoke $r0.<bgc: javax.crypto.SecretKey a(char[],byte[])>($r2, $r4);

     label1:
        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label2:
        $r6 = new javax.crypto.spec.IvParameterSpec;

     label3:
        specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5);

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r7, $r6);

        $r1 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label4:
        $r10 = new bge;

     label5:
        specialinvoke $r10.<bge: void <init>(byte[],byte[],byte[],byte[])>($r3, $r4, $r5, $r1);

        $r11 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

        virtualinvoke $r11.<javax.crypto.Mac: void init(java.security.Key)>($r8);

        $r1 = virtualinvoke $r10.<bge: byte[] b()>();

        $r1 = virtualinvoke $r11.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1);

        virtualinvoke $r10.<bge: void a(byte[])>($r1);

        $r1 = virtualinvoke $r10.<bge: byte[] a()>();

     label6:
        return $r1;

     label7:
        $r12 := @caughtexception;

        $r13 = new bgf;

        specialinvoke $r13.<bgf: void <init>(java.lang.String,java.lang.Throwable)>("Caught InvalidKeyException. Do you have unlimited strength jurisdiction files installed?", $r12);

        throw $r13;

     label8:
        $r14 := @caughtexception;

        $r13 = new bgf;

        specialinvoke $r13.<bgf: void <init>(java.lang.String,java.lang.Throwable)>("Failed to generate ciphertext.", $r14);

        throw $r13;

        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
        catch java.security.InvalidKeyException from label5 to label6 with label7;
        catch java.security.GeneralSecurityException from label1 to label2 with label8;
        catch java.security.GeneralSecurityException from label3 to label4 with label8;
        catch java.security.GeneralSecurityException from label5 to label6 with label8;
    }

    public byte[] b(byte[], char[])
    {
        bgc $r0;
        byte[] $r1, $r4, $r5, $r6;
        char[] $r2;
        java.lang.Object[] $r3;
        int $i0;
        boolean $z0;

        $r0 := @this: bgc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: char[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r1, "Plaintext cannot be null.", $r3);

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <bgj: void a(java.lang.Object,java.lang.String,java.lang.Object[])>($r2, "Password cannot be null.", $r3);

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label2;

        $z0 = 1;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <bgj: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "Password cannot be empty.", $r3);

        $r4 = staticinvoke <bgc: byte[] a(int)>(8);

        $r5 = staticinvoke <bgc: byte[] a(int)>(8);

        $r6 = staticinvoke <bgc: byte[] a(int)>(16);

        $r1 = virtualinvoke $r0.<bgc: byte[] a(byte[],char[],byte[],byte[],byte[])>($r1, $r2, $r4, $r5, $r6);

        return $r1;

     label2:
        $z0 = 0;

        goto label1;
    }
}
