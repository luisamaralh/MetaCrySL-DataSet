Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer4150)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: 469bc96293eb5529f4d133f19bff3b0187c453b7670e5fefcb8ad2da584a77e5
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.bluepay.b.d.u: byte[] a(byte[],byte[])>
		SHA-256: c3495ee43789b614e009b7fd05317ad1ce164e57f58786da3f37c99230b2977f
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer916)
		Method: <com.codapayments.sdk.gw.util.EncryptUtils: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: ab0a09e61985da87127bbb93ce02ece9983ec59b774e7a4eff785ad0b92a0386
		Secure: false
	Object:
		Variable: varReplacer2403
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer2403)
		Method: <com.bluepay.b.d.u: java.lang.String a(java.lang.String,java.lang.String)>
		SHA-256: 91a12e3e632e60a09dcc351f528bbad26e38b3efedb3a393d3c3b077c1253e0
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer4342)
		Method: <com.zhijian.domino.iap.google.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 83570ce9f24d5e2079b63d4495aa901130439703c2ee2c18503515eae73e0a6f
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.cf: java.lang.String a(java.lang.String)>
		SHA-256: d67eb3fda9d1f60ecd8e7dbdc986625a79b79be562603bb71eb8601da82cb91f
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: 8d9ed73f76b0cc35336304903ab76cb718c59eb2a0e5d6566d27757d000fd32
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.bluepay.b.d.u: byte[] a(byte[],byte[])>
		SHA-256: 912e532c88e821194e6575f7276b7e0527e548749ea1fc593eeb17eacb0fed48
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.bluepay.b.d.u: java.lang.String a(java.lang.String,java.lang.String)>
		SHA-256: 595cd5d15b6766276e15896385885c120e16edd20b8cedfe13df5427a57f4810
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.MessageDigest
		Statement: $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4503)
		Method: <com.mimopay.MimopayCore: java.lang.String getAPIKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3baca5b2eed1b65858c56ad959a1fbfe34ca5822ad0dd9fd328e681103d8699c
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6)
		Method: <com.bluepay.b.d.u: java.lang.String a(java.lang.String,java.lang.String)>
		SHA-256: ccfd9ec438e1b82af96977339bc8a1ccea6aa338e79f6247cffe2cd70b368ca0
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4151)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: eac1457607adf4881269e15eabdb69a820c85214cefa9e5121e4c36c842fe638
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r4)
		Method: <com.zhijian.domino.iap.google.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 50d20e0d863bf9aaaccbe6d5f71c736bbbd4ab16c1ca9b261b70d21b96f5b665
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer2433)
		Method: <com.bluepay.b.d.u: byte[] b(byte[])>
		SHA-256: 41af54617a73486a0f3aca2bd04edc5825f11029b809b25be4a3dceb6d9e29c9
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.mimopay.MimopayCore: java.lang.String getAPIKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: b1863d309f3745c44c4035e23f8b216c001bfce964f8167ac068eae5184ea81b
		Secure: true
	Object:
		Variable: varReplacer2429
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2429)
		Method: <com.bluepay.b.d.u: byte[] a(byte[],byte[])>
		SHA-256: 8e1041b0ae856bf1d4ff936c82958bfba6fd226776ef6b11382dd1adcceb44eb
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: ffde2c3e415be62ad6bfbfe50546823118db13763d58e44ff45979b39cbfde6c
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4152)
		Method: <com.umeng.analytics.b: byte[] b(byte[])>
		SHA-256: 2820d3284c58c2644439eb5c297dbf64c03cfbea89cf94c823939445cfb372a8
		Secure: true
	Object:
		Variable: varReplacer932
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer932)
		Method: <com.codapayments.sdk.gw.util.EncryptUtils: java.security.Key generateKey(java.lang.String)>
		SHA-256: 6199091340ff685c7e412e311ad46e9c93a5e135e988f218318304fcb44b92b
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2430)
		Method: <com.bluepay.b.d.u: byte[] a(byte[],byte[])>
		SHA-256: 1bb5552b7181a2a2a3a7ee1f4ccbda86669b33403b983aee97f1959452facd79
		Secure: false
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer5201)
		Method: <com.bluepay.b.b.a: java.net.HttpURLConnection b(java.lang.String,java.lang.String,java.util.Map)>
		SHA-256: 737a21173519bd324717212edff60c642c709786e641f1b58a7b6382fba1e52b
		Secure: false
	Object:
		Variable: varReplacer4150
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer4150)
		Method: <com.umeng.analytics.b: byte[] a(byte[],byte[])>
		SHA-256: a39a43dc7c0793c4940d4df90b132f87d574fa103c28eb53bf33c0e6e66946cf
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.bluepay.b.d.u: byte[] b(byte[])>
		SHA-256: 8a76aee69f175ca458fa683054793879e3abdb28d497497fe1c795e6f94a32a7
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3883)
		Method: <u.aly.cf: java.lang.String b(java.lang.String)>
		SHA-256: 317a256ae7bf7a2afb9e2a6f316828c13c184717f6ab5a3e75253a65c20661d1
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer932)
		Method: <com.codapayments.sdk.gw.util.EncryptUtils: java.security.Key generateKey(java.lang.String)>
		SHA-256: eaf6429ca93195771b3d88455657e11af25aafc3f1f27af09568a60092059cf6
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer2403)
		Method: <com.bluepay.b.d.u: java.lang.String a(java.lang.String,java.lang.String)>
		SHA-256: 183c6d02d35621b424ca255223834c506c371d90b683ff6712d678588d7aa152
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2743)
		Method: <u.aly.cf: java.lang.String a(java.lang.String)>
		SHA-256: 234cd4abeef16b1328439c552c4b289230ab0492b1593a85ade11a016e7aa5ef
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.MessageDigest
		Statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4946)
		Method: <com.bluepay.b.d.e: void <clinit>()>
		SHA-256: 75df4b7b7df6343e7787d1cfd71779b8f7b7dada15bf490737818b864e82f74f
		Secure: true
	Object:
		Variable: r19
		Type: java.security.SecureRandom
		Statement: specialinvoke r19.<java.security.SecureRandom: void <init>()>()
		Method: <com.bluepay.b.b.a: java.net.HttpURLConnection b(java.lang.String,java.lang.String,java.util.Map)>
		SHA-256: d37e750ed995e81a526ca08d115e399f43dc90df91fde591753311a141ec1d54
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2394)
		Method: <com.bluepay.b.d.u: java.lang.String a(java.lang.String,java.lang.String)>
		SHA-256: d60c6ee068c196a30af937a87a5ac2d392f4fa870f9d2b1df191edaaa60ac81e
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.cf: java.lang.String b(java.lang.String)>
		SHA-256: c95e3d2ff5bc4ad136578cd492bf91938b5304d45584d84a0dbba566f04f353f
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4)
		Method: <com.codapayments.sdk.gw.util.EncryptUtils: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 64399d93c679901b692ad3aff3ea463a928df7cbde3a337646a32994552d826c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer2435, varReplacer2436)
		Method: <com.bluepay.b.d.u: byte[] b(byte[])>
		SHA-256: 91c2a342309290c4c683eb8df57a79dd05ab713f0cc6b0c7cda6648d16d863d0
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.umeng.analytics.b: byte[] b(byte[])>
		SHA-256: 8407a152a750198a9cecc8c173b46fb5748136d260fe6f5fbe4a174451640e66
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2429)
		Method: <com.bluepay.b.d.u: byte[] a(byte[],byte[])>
		SHA-256: c0d292c12a1955a4c01d078ea5f2b81a60765cddf5951246fac308655c2334c5
		Secure: false

Findings in Java Class: com.codapayments.sdk.gw.util.EncryptUtils

	 in Method: java.lang.String decrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer918, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #ab0a09e61985da87127bbb93ce02ece9983ec59b774e7a4eff785ad0b92a0386)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer916)


	 in Method: java.security.Key generateKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer932)


Findings in Java Class: com.bluepay.b.b.a

	 in Method: java.net.HttpURLConnection b(java.lang.String,java.lang.String,java.util.Map)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5195, r24, $r6)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5195, r24, $r6)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #737a21173519bd324717212edff60c642c709786e641f1b58a7b6382fba1e52b)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer5201)


Findings in Java Class: com.umeng.analytics.b

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer4150)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4149, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4149, $r2, $r4)


Findings in Java Class: com.bluepay.b.d.u

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2431, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2429)


	 in Method: java.lang.String a(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2404, $r5, $r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer2403)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6)


	 in Method: byte[] b(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer2434, $r2)


Findings in Java Class: com.zhijian.domino.iap.google.Security

	 in Method: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 35

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 15
	ConstraintError: 2
=====================================================================