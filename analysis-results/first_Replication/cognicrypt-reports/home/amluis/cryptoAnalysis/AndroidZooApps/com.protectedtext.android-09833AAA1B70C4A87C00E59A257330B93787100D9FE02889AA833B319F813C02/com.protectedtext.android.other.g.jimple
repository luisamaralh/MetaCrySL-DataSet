public class com.protectedtext.android.other.g extends java.lang.Object
{
    private static final char[] a;
    private static final byte[] b;

    static void <clinit>()
    {
        java.lang.String $r0, varReplacer73;
        char[] $r1;
        byte[] $r2;

        nop;

        $r0 = "0123456789abcdef";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <com.protectedtext.android.other.g: char[] a> = $r1;

        varReplacer73 = "53616c7465645f5f";

        $r2 = staticinvoke <com.protectedtext.android.other.g: byte[] b(java.lang.String)>(varReplacer73);

        <com.protectedtext.android.other.g: byte[] b> = $r2;

        return;
    }

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, varReplacer74;
        java.security.MessageDigest $r1;
        byte[] $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer74 = "SHA-512";

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer74);

     label2:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(byte[])>($r2);

        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer1439, varReplacer1440, varReplacer1441, varReplacer1442, varReplacer1443, varReplacer1444, varReplacer1446, varReplacer1447, varReplacer1448, varReplacer1450, varReplacer1451, varReplacer1452;
        byte[] $r2, $r5, $r6, $r7;
        java.security.SecureRandom $r3, r18;
        java.security.MessageDigest $r4;
        javax.crypto.spec.SecretKeySpec $r8, r19;
        javax.crypto.spec.IvParameterSpec $r9, r20;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.IllegalStateException r21;
        java.security.NoSuchAlgorithmException r22;
        javax.crypto.NoSuchPaddingException r23;
        java.security.InvalidKeyException r24;
        javax.crypto.IllegalBlockSizeException r25;
        javax.crypto.BadPaddingException r26;
        java.io.UnsupportedEncodingException r27;
        java.security.GeneralSecurityException r28;
        int varReplacer1445, varReplacer1449;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = newarray (byte)[8];

        r18 = new java.security.SecureRandom;

        $r3 = r18;

     label01:
        specialinvoke r18.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r2);

        varReplacer1443 = "MD5";

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1443);

        varReplacer1451 = "UTF-8";

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1451);

        $r6 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r5, $r2);

        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

        $r7 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r5, $r6);

        $r7 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

        $r6 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r7, $r6);

        $r6 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

     label02:
        r19 = new javax.crypto.spec.SecretKeySpec;

        $r8 = r19;

     label03:
        $r5 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r5, $r7);

        varReplacer1452 = "AES";

        specialinvoke r19.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer1452);

     label04:
        r20 = new javax.crypto.spec.IvParameterSpec;

        $r9 = r20;

     label05:
        specialinvoke r20.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        varReplacer1448 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1448);

        varReplacer1445 = 1;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1445, $r8, $r9);

        varReplacer1447 = "UTF-8";

        $r5 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1447);

        $r5 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label06:
        $r7 = <com.protectedtext.android.other.g: byte[] b>;

     label07:
        $r2 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r7, $r2);

        $r2 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r2, $r5);

        varReplacer1449 = 2;

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r2, varReplacer1449);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toString()>();

     label08:
        return $r0;

     label09:
        $r11 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r11;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1444 = "Recived NoSuchAlgorithmException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1444);

        throw r21;

     label10:
        $r12 := @caughtexception;

        r23 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r23.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1440 = "Recived NoSuchPaddingException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1440);

        throw r21;

     label11:
        $r13 := @caughtexception;

        r24 = (java.security.InvalidKeyException) $r13;

        virtualinvoke r24.<java.security.InvalidKeyException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1450 = "Recived InvalidKeyException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1450);

        throw r21;

     label12:
        $r14 := @caughtexception;

        r25 = (javax.crypto.IllegalBlockSizeException) $r14;

        virtualinvoke r25.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1442 = "Recived IllegalBlockSizeException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1442);

        throw r21;

     label13:
        $r15 := @caughtexception;

        r26 = (javax.crypto.BadPaddingException) $r15;

        virtualinvoke r26.<javax.crypto.BadPaddingException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1446 = "Recived BadPaddingException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1446);

        throw r21;

     label14:
        $r16 := @caughtexception;

        r27 = (java.io.UnsupportedEncodingException) $r16;

        virtualinvoke r27.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1439 = "Recived UnsupportedEncodingException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1439);

        throw r21;

     label15:
        $r17 := @caughtexception;

        r28 = (java.security.GeneralSecurityException) $r17;

        virtualinvoke r28.<java.security.GeneralSecurityException: void printStackTrace()>();

        r21 = new java.lang.IllegalStateException;

        varReplacer1441 = "Recived GeneralSecurityException";

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1441);

        throw r21;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label09;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label10;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label10;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label10;
        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch java.security.InvalidKeyException from label07 to label08 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
        catch javax.crypto.BadPaddingException from label07 to label08 with label13;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label14;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label14;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label14;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label14;
        catch java.security.GeneralSecurityException from label01 to label02 with label15;
        catch java.security.GeneralSecurityException from label03 to label04 with label15;
        catch java.security.GeneralSecurityException from label05 to label06 with label15;
        catch java.security.GeneralSecurityException from label07 to label08 with label15;
    }

    public static java.lang.String a(java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, varReplacer1478;
        int $i0;
        java.lang.StringBuilder $r2, $r3;
        java.lang.IllegalStateException $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        if $i0 != 1 goto label1;

        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String)>($r0);

        return $r0;

     label1:
        if $i0 != 2 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label2:
        $r4 = new java.lang.IllegalStateException;

        varReplacer1478 = "Update the app to add support for latest security improvements!";

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1478);

        throw $r4;
    }

    public static java.lang.String a(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.StringBuilder $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        $r2 = "";

     label1:
        $r2 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String,java.lang.String)>($r0, $r1);

        return $r0;
    }

    private static java.lang.String a(byte[])
    {
        byte[] $r0;
        char[] $r1, $r2;
        short $s0, $s4;
        int $i1, $i2;
        byte $b3;
        char $c5;
        java.lang.String $r3;

        nop;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i1 = $i1 * 2;

        $r1 = newarray (char)[$i1];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label2;

        $b3 = $r0[$i1];

        $s4 = $b3 & 255;

        $i2 = $i1 * 2;

        $r2 = <com.protectedtext.android.other.g: char[] a>;

        $s0 = $s4 >>> 4;

        $c5 = $r2[$s0];

        $r1[$i2] = $c5;

        $i2 = $i1 * 2;

        $i2 = $i2 + 1;

        $r2 = <com.protectedtext.android.other.g: char[] a>;

        $s0 = $s4 & 15;

        $c5 = $r2[$s0];

        $r1[$i2] = $c5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r1);

        return $r3;
    }

    private static byte[] a(byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, varReplacer468, varReplacer469, varReplacer470;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        varReplacer469 = 0;

        varReplacer470 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer469, $r2, varReplacer469, $i0);

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        varReplacer468 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer468, $r2, $i1, $i0);

        return $r2;
    }

    private static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer450, varReplacer451, varReplacer452, varReplacer453, varReplacer454, varReplacer455, varReplacer458, varReplacer459, varReplacer460, varReplacer462, varReplacer467;
        byte[] $r2, $r3, $r4, $r6;
        int $i0, varReplacer456, varReplacer457, varReplacer461, varReplacer463, varReplacer464, varReplacer465, varReplacer466;
        java.security.MessageDigest $r5;
        javax.crypto.spec.SecretKeySpec $r7;
        javax.crypto.spec.IvParameterSpec $r8;
        javax.crypto.Cipher $r9;
        java.lang.Throwable $r10, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.IllegalStateException $r11;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        varReplacer463 = 0;

        $r2 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer463);

     label02:
        $r3 = newarray (byte)[8];

        $i0 = lengthof $r2;

        $i0 = $i0 + -16;

        $r4 = newarray (byte)[$i0];

     label03:
        varReplacer464 = 8;

        varReplacer465 = 0;

        varReplacer466 = 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer464, $r3, varReplacer465, varReplacer464);

     label04:
        $i0 = lengthof $r4;

     label05:
        varReplacer456 = 16;

        varReplacer457 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer456, $r4, varReplacer457, $i0);

        varReplacer462 = "MD5";

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer462);

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r6 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r2, $r3);

        $r3 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

        $r2 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r3, $r6);

        $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $r6 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r2, $r6);

        $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

     label06:
        $r7 = new javax.crypto.spec.SecretKeySpec;

     label07:
        $r3 = staticinvoke <com.protectedtext.android.other.g: byte[] a(byte[],byte[])>($r3, $r2);

        varReplacer453 = "AES";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer453);

     label08:
        $r8 = new javax.crypto.spec.IvParameterSpec;

     label09:
        specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        varReplacer455 = "AES/CBC/PKCS5Padding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer455);

        varReplacer461 = 2;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer461, $r7, $r8);

        $r4 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label10:
        $r0 = new java.lang.String;

     label11:
        varReplacer454 = "UTF-8";

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer454);

     label12:
        return $r0;

     label13:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer452 = "Recived NoSuchAlgorithmException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer452);

        throw $r11;

     label14:
        $r12 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer458 = "Recived NoSuchPaddingException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer458);

        throw $r11;

     label15:
        $r13 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer467 = "Recived InvalidKeyException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer467);

        throw $r11;

     label16:
        $r14 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer451 = "Recived IllegalBlockSizeException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer451);

        throw $r11;

     label17:
        $r15 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer459 = "Recived BadPaddingException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer459);

        throw $r11;

     label18:
        $r16 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer450 = "Recived GeneralSecurityException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer450);

        throw $r11;

     label19:
        $r17 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        varReplacer460 = "Recived UnsupportedEncodingException";

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer460);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label13;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label13;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label13;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label13;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label13;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label13;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label14;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label14;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label14;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label14;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label14;
        catch java.security.InvalidKeyException from label01 to label02 with label15;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidKeyException from label09 to label10 with label15;
        catch java.security.InvalidKeyException from label11 to label12 with label15;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label16;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label16;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label16;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label16;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label16;
        catch javax.crypto.IllegalBlockSizeException from label11 to label12 with label16;
        catch javax.crypto.BadPaddingException from label01 to label02 with label17;
        catch javax.crypto.BadPaddingException from label03 to label04 with label17;
        catch javax.crypto.BadPaddingException from label05 to label06 with label17;
        catch javax.crypto.BadPaddingException from label07 to label08 with label17;
        catch javax.crypto.BadPaddingException from label09 to label10 with label17;
        catch javax.crypto.BadPaddingException from label11 to label12 with label17;
        catch java.security.GeneralSecurityException from label01 to label02 with label18;
        catch java.security.GeneralSecurityException from label03 to label04 with label18;
        catch java.security.GeneralSecurityException from label05 to label06 with label18;
        catch java.security.GeneralSecurityException from label07 to label08 with label18;
        catch java.security.GeneralSecurityException from label09 to label10 with label18;
        catch java.security.GeneralSecurityException from label11 to label12 with label18;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label19;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label19;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label19;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label19;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label19;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label19;
    }

    public static java.lang.String b(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, varReplacer449;
        int $i0, $i1, varReplacer448;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 == null goto label1;

        if $r1 != null goto label2;

     label1:
        $r2 = "";

     label2:
        $r0 = staticinvoke <com.protectedtext.android.other.g: java.lang.String b(java.lang.String,java.lang.String)>($r0, $r1);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -128;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r2 = staticinvoke <com.protectedtext.android.other.g: java.lang.String a(java.lang.String)>($r2);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -128;

        varReplacer448 = 0;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(varReplacer448, $i0);

        return $r0;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        varReplacer449 = "Wrong password, or siteUrl";

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer449);

        throw $r3;
    }

    private static byte[] b(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i4, $i5, varReplacer75, varReplacer76;
        char $c3;
        byte $b6;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i1 / 2;

        $r1 = newarray (byte)[$i0];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i0 = $i2 / 2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        varReplacer75 = 16;

        $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer75);

        $i4 = $i4 << 4;

        $i5 = $i2 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5);

        varReplacer76 = 16;

        $i5 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer76);

        $i4 = $i4 + $i5;

        $b6 = (byte) $i4;

        $r1[$i0] = $b6;

        $i2 = $i2 + 2;

        goto label1;

     label2:
        return $r1;
    }
}
