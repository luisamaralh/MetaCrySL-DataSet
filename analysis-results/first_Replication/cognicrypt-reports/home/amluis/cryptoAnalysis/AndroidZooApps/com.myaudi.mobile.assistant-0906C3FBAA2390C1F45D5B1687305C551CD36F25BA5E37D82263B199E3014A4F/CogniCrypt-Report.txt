Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer3573)
		Method: <com.adobe.adms.measurement.ADMS_MeasurementBase: void setupDefaults()>
		SHA-256: 48acb8319669789292aeb6bd23d885fdf5aab39b3c88a185fc46fb52b760c88f
		Secure: true
	Object:
		Variable: varReplacer7057
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer7057)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.spec.SecretKeySpec loadSecretKey(android.content.Context)>
		SHA-256: b5ccd1024f4635c0eec66dc54171016a66231d927495636e271a1b12a573e6a5
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: byte[] deobfuscate(android.content.Context,byte[])>
		SHA-256: cf1e340b4772e5101741bea58bfe971c5ae957516e0da5fe4ae15ecca1fb9d75
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7046)
		Method: <com.audi.myaudi.app.Configuration: java.lang.String hashIt(java.lang.String)>
		SHA-256: f414d7cfd79f35db86266cb6c0122d887d7b4c1af46eb2ffe6f9575542fb814b
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.SecretKey generateKey()>
		SHA-256: 18df61124f5b89ed0724d64d7e05a664c67385d86aceccc8aa0ae9230953aca4
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.KeyStore
		Statement: $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer16152)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: void <init>()>
		SHA-256: a6f793450992650b86ce02a419936749ce8a7b763f862013fba7fcdceb95a65
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = interfaceinvoke $r5.<javax.crypto.SecretKey: byte[] getEncoded()>()
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.spec.SecretKeySpec loadSecretKey(android.content.Context)>
		SHA-256: 27a13f69ba1a651964d6d88114aefa9335b9ba94a490dbaa99e037d6eec39693
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer7065)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.SecretKey generateKey()>
		SHA-256: 3b3be2ba5aaef2992cbb9519868debe0f7c7b23326c43aa65fa6c982123bfaa3
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.audi.myaudi.app.Configuration: java.lang.String hashIt(java.lang.String)>
		SHA-256: 9eea0c58860e4fa315ae57d61dca98d778f4a5170ca9d56eaca3a8a1e34ace8
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: byte[] obfuscate(android.content.Context,byte[])>
		SHA-256: 47c6cecd626f97c9d411b6e15dd7478214d02d36d92b6c11237ed38d0c457054
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.SecretKey generateKey()>
		SHA-256: f23538cab144e822db0faff7a30f3ea170b463adf495cfecf34c5858bf958067
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer20687)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: byte[] deobfuscate(android.content.Context,byte[])>
		SHA-256: d70fc2c8e4ea58df35344b9c8ebbba42000432ae9cfe19f05ffb4dead67bac67
		Secure: false
	Object:
		Variable: varReplacer16135
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16135)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: java.security.Key getSecretKey()>
		SHA-256: faf7bf6734e54b0866c3a00656f403e5a799738b0d2429eef0596dd4d9757a68
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.audi.myaudi.app.Configuration: java.lang.String hashIt(java.lang.String)>
		SHA-256: 2d1e8b76e369240ae0907251c86cc92dd26e0101b792ac559c39ad886714ea02
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer7057)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: javax.crypto.spec.SecretKeySpec loadSecretKey(android.content.Context)>
		SHA-256: 438b0be7a891f9778037f5831548d5c34a501828fbe2d9b0b7b3cb89b7cba8e9
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16135)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: java.security.Key getSecretKey()>
		SHA-256: a87df542615e631d9baeeea800d29426e1f15c4b494d2159e203a1cecfa5a342
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer7056)
		Method: <com.audi.myaudi.app.encrypt.Obfuscator: byte[] obfuscate(android.content.Context,byte[])>
		SHA-256: 247ac483c9361c88e48f16338d395b788dee56cab9f915613bb36f3618bbf012
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer16125, varReplacer16126)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: java.lang.String decryptString(java.lang.String)>
		SHA-256: 8286c28e4869c36a01c5e8ba0bea4f4f9e2cdd0c4c0fc272c35a56e8c93c460b
		Secure: false
	Object:
		Variable: $r11
		Type: javax.crypto.Cipher
		Statement: $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16144)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: byte[] decryptKey(byte[])>
		SHA-256: b9478da23008ec8512d025a91a17132db279c0a9c68810317a90e2018a1d6359
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: java.lang.String decryptString(java.lang.String)>
		SHA-256: 337d81481faebec0c48c9a2ff23ad2833754a0d24ef7920673c083bbdf1aa47c
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r12, $r11)
		Method: <com.audi.myaudi.app.encrypt.LegacyEncryptionProvider: byte[] decryptKey(byte[])>
		SHA-256: 127d206b9b1b6d31cf4153e9106e2efd0e4e92c745cce5a43531f6dc740762e2
		Secure: false

Findings in Java Class: com.audi.myaudi.app.Configuration

	 in Method: java.lang.String hashIt(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f414d7cfd79f35db86266cb6c0122d887d7b4c1af46eb2ffe6f9575542fb814b)
			First parameter (with value "sha256") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer7046)


Findings in Java Class: com.audi.myaudi.app.encrypt.Obfuscator

	 in Method: byte[] obfuscate(android.content.Context,byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #247ac483c9361c88e48f16338d395b788dee56cab9f915613bb36f3618bbf012)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer7056)


	 in Method: byte[] deobfuscate(android.content.Context,byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d70fc2c8e4ea58df35344b9c8ebbba42000432ae9cfe19f05ffb4dead67bac67)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer20687)


Findings in Java Class: com.audi.myaudi.app.encrypt.LegacyEncryptionProvider

	 in Method: java.lang.String decryptString(java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #8286c28e4869c36a01c5e8ba0bea4f4f9e2cdd0c4c0fc272c35a56e8c93c460b)
			Unexpected call to method init on object of type javax.crypto.Cipher.
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer16123, $r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer16123, $r5)


	 in Method: byte[] decryptKey(byte[])
		TypestateError violating CrySL rule for java.security.KeyStore (on Object #a6f793450992650b86ce02a419936749ce8a7b763f862013fba7fcdceb95a65)
			Unexpected call to method getEntry on object of type java.security.KeyStore. Expect a call to one of the following methods getKey
			at statement: $r7 = virtualinvoke $r5.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r6, varReplacer16145)

		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #127d206b9b1b6d31cf4153e9106e2efd0e4e92c745cce5a43531f6dc740762e2)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to java.io.InputStream: int read(byte[],int,int), javax.crypto.CipherInputStream: int read(), java.io.InputStream: int read(byte[]), java.io.FilterInputStream: int read(byte[],int,int), javax.crypto.CipherInputStream: int read(byte[]), java.io.InputStream: int read(), java.io.FilterInputStream: int read(byte[]), close, java.io.FilterInputStream: int read(), javax.crypto.CipherInputStream: int read(byte[],int,int)
			at statement: $i0 = virtualinvoke $r2.<javax.crypto.CipherInputStream: int read()>()

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #b9478da23008ec8512d025a91a17132db279c0a9c68810317a90e2018a1d6359)
			Unexpected call to method init on object of type javax.crypto.Cipher. Expect a call to one of the following methods getInstance
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer16146, $r10)


	 in Method: void <init>()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #a6f793450992650b86ce02a419936749ce8a7b763f862013fba7fcdceb95a65)
			First parameter (with value "AndroidKeyStore") should be any of {BKS, PKCS12-DEF, BCPKCS12, PKCS12, BouncyCastle}
			at statement: $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer16152)


	 in Method: java.security.Key getSecretKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16135)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 21

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 2
	ConstraintError: 4
	IncompleteOperationError: 1
	TypestateError: 3
=====================================================================