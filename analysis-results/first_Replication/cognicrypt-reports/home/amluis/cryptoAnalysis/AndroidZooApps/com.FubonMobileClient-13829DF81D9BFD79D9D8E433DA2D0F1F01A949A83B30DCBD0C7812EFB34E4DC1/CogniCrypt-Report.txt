Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.worklight.common.security.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 87337823ba78b3cd832175897f47461de564d31a83b3ee130b2fa70551711f04
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer938)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 75b58b928c0b74e6a27d423ce355cbe01e5235a36738ae5104993034474e1251
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer883)
		Method: <com.worklight.utils.SecurityUtils: byte[] hashData(byte[],java.lang.String)>
		SHA-256: d25db74a944fc97fbd25bfd77fa22b3b88b3de17d61581d4b43f3b1ad5a3a474
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r0, $r4)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 1a00442bc8a659def77cd20b039e8ea8fd7fbf8cecea2dc767c1ad62a4eeeba6
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer601)
		Method: <com.worklight.location.internal.deviceContextPiggybacker.DeviceContextPiggybacker: void <init>(com.worklight.location.internal.DeviceContextImpl)>
		SHA-256: 3f8397e03134948421a1f3857f519e8d3dbb6fd071d385283c9ce4789004e19b
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.worklight.utils.SecurityUtils: byte[] hashData(byte[],java.lang.String)>
		SHA-256: 7551a12373def99c8271488553584812d0524c4c619dba815df5f556f0220be6
		Secure: true
	Object:
		Variable: varReplacer940
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer940)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 949016d9a9c47735c03194d8fcfe446597deaec3f8389117a1298285c594aea7
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer940)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 106a38c3233bbabff13d022004abdc970c1bc1028aec4583546a3ccf4b95541a
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer521)
		Method: <com.worklight.common.security.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: a36e24b4218eee6e40321ec13940ea6c1cbb1cbe53cc8b15c7522608b9f66192
		Secure: true

Findings in Java Class: com.worklight.utils.SecurityUtils

	 in Method: java.io.InputStream decryptData(java.io.InputStream,byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #75b58b928c0b74e6a27d423ce355cbe01e5235a36738ae5104993034474e1251)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer938)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer940)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #75b58b928c0b74e6a27d423ce355cbe01e5235a36738ae5104993034474e1251)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r0, $r4)


Findings in Java Class: com.worklight.androidgap.PrepackagedAssetsManager

	 in Method: boolean unzipAssetsToLocalCopy()
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #1a00442bc8a659def77cd20b039e8ea8fd7fbf8cecea2dc767c1ad62a4eeeba6)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to read
			at statement: staticinvoke <com.worklight.nativeandroid.common.WLUtils: void unpack(java.io.InputStream,java.io.File)>($r9, $r11)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 9

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 1
	ConstraintError: 1
	IncompleteOperationError: 2
=====================================================================