Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: r5
		Type: java.security.SecureRandom
		Statement: specialinvoke r5.<java.security.SecureRandom: void <init>()>()
		Method: <com.xinmei.adsdk.utils.a: void c()>
		SHA-256: 9f1c4ae5f4fdc8824f49a30e855726d5cf9a79f85f0407845e9f9b016c50d1fa
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <com.easyx.baike.a.a.d: org.apache.http.conn.scheme.SchemeRegistry a()>
		SHA-256: fc145c37ac0cff7189fe0cb5399251ba316e09897ac10a65f259119dab89ac8f
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <com.easyx.baike.a.a.h: javax.net.ssl.SSLSocketFactory a()>
		SHA-256: 9eba8a06c8a188bbd1ee5eeb9b99fe3914d87e3fee9bd768492f3db5c1bdbbd3
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.SecretKey
		Statement: $r1 = virtualinvoke $r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.netqin.a.a: byte[] a()>
		SHA-256: ee135c027efd7e0648854a95ae81e5c78c71257f8b8c650fe6e7decd3c3fcd00
		Secure: true
	Object:
		Variable: $r14
		Type: javax.net.ssl.SSLContext
		Statement: $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer10302)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: ed988255800077f5310d2340c21abaddc45250034e2d7d925e4b9d329a3f5247
		Secure: false
	Object:
		Variable: $r13
		Type: javax.net.ssl.KeyManager[]
		Statement: $r13 = virtualinvoke $r12.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 616dea5870abd7100e346a82870661e7e0d4aa0710c5ecda884c5c032ec0ae5f
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, $i3)
		Method: <com.xinmei.adsdk.utils.p: byte[] a(byte[],java.lang.String)>
		SHA-256: 58f0b842f85b1672bf8ec6ae75fe3c4cd9e2b6e1de50fb962626ed50dfdf841e
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3610)
		Method: <com.xinmei.adsdk.utils.p: byte[] a(byte[],java.lang.String)>
		SHA-256: ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r12 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer10279)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 48411bd9d5eb6890267fc16d0d2573273308418b91543451427604c55d3eff88
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.xinmei.adsdk.utils.a: void c()>
		SHA-256: 37f7cbbc0475c0bef73971e5b9ec7619051e1c7359fd4900ab8d1b0cfda7455e
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.xinmei.adsdk.utils.a: byte[] a(byte[],java.security.Key)>
		SHA-256: defbc4b7fb5d3c71cbf4d8f2e717a32c0a66bc2b21ba0dd8b3d675ed5143a7a6
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.netqin.a.a: byte[] b(byte[],byte[])>
		SHA-256: b0820858a18cf4be25ae3804ce4a7fdf5f91e4bb800f7fa2f9cace3d43f0fb09
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2603)
		Method: <com.easyxapp.kr.d.d: java.lang.String a(byte[])>
		SHA-256: 7ec1ff4b8dce40f225f9821183abf2790717f935cb6146e9394e1107e31922f9
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer4634)
		Method: <com.easyx.baike.a.a.h: javax.net.ssl.SSLSocketFactory a()>
		SHA-256: 132e3ff44326681ed11b38a4f7e9bdb9dc5d9441d64fd0f8e09ef86030cfc2a1
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, varReplacer3612)
		Method: <com.xinmei.adsdk.utils.p: byte[] a(byte[],java.lang.String)>
		SHA-256: 55e458cd99d0fa513e12f2af633e6a071d3fc6709e0a8a53610fcda6b79eb06a
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer10126)
		Method: <com.netqin.a.a: byte[] b(byte[],byte[])>
		SHA-256: 4a5f9ebab5cdc3859e4a437d0790694110927731d77cfff86b273110783b231c
		Secure: false
	Object:
		Variable: $r13
		Type: javax.net.ssl.KeyManager[]
		Statement: $r13 = virtualinvoke $r12.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 616dea5870abd7100e346a82870661e7e0d4aa0710c5ecda884c5c032ec0ae5f
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.KeyManager[]
		Statement: $r4 = virtualinvoke $r3.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.easyx.baike.a.a.h: javax.net.ssl.SSLSocketFactory a()>
		SHA-256: 53b3548e07afe701dcae1894bd4b8ed869480500429d19076e0fae148a785b1b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer9454)
		Method: <com.google.android.gms.ads.internal.util.client.a: java.lang.String a(java.lang.String)>
		SHA-256: 4bf545952b93a382a7084a42b0d63f48f3db34fe4bffb8bed92c6ab71379e030
		Secure: true
	Object:
		Variable: r11
		Type: java.security.SecureRandom
		Statement: specialinvoke r11.<java.security.SecureRandom: void <init>()>()
		Method: <com.easyx.baike.a.a.h: javax.net.ssl.SSLSocketFactory a()>
		SHA-256: 2d917f95e2fef4a0210a7aa3089c119b6eb13708925a5e84993668c43236e2c4
		Secure: true
	Object:
		Variable: r48
		Type: java.security.SecureRandom
		Statement: specialinvoke r48.<java.security.SecureRandom: void <init>()>()
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: ae5ec3e880e484c2347a8bdd275050f73a5344dc7e5478fa3752317de601fd99
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.facebook.ads.internal.util.s: java.lang.String a(java.lang.String)>
		SHA-256: 2125805d03a1e43489bdecc5db182c9da3fb7141e4e8c4afb45e18805c8edeaa
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, varReplacer3612)
		Method: <com.xinmei.adsdk.utils.p: byte[] a(byte[],java.lang.String)>
		SHA-256: 4ea706514d9421766b8c747086e575aa13d3ef10009086d28337f09c99e8d812
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r12 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer10273)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: f320ba6b848da3e76523ca0aff94b82acf28b9cf2d2937387f94e786d5b70b1
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.netqin.antivirus.util.t: java.lang.String a(java.lang.String)>
		SHA-256: 1dcf8dc926dc96863988bd7418b6d689348dc3ef29c8037602c7c0191f30bf17
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer9935)
		Method: <com.netqin.a.a: byte[] a(byte[],byte[])>
		SHA-256: c55336e228890a3e1c65a814bc9d57d59420e236d4cd682089473960066fc0d6
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3993)
		Method: <com.xinmei.adsdk.utils.a: byte[] a(byte[],java.security.Key)>
		SHA-256: 701b790f43b1f9fe2b0a885853c25d1415cc3d3400797eb8307dc19b81b3f022
		Secure: false
	Object:
		Variable: r48
		Type: java.security.SecureRandom
		Statement: specialinvoke r48.<java.security.SecureRandom: void <init>()>()
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: ae5ec3e880e484c2347a8bdd275050f73a5344dc7e5478fa3752317de601fd99
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.xinmei.adsdk.utils.a: byte[] b()>
		SHA-256: 6c968a2ebbc994743debaa0f8ff4b55131f79d716707e0bf8bcc02401e1fb8a9
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer3857)
		Method: <com.xinmei.adsdk.utils.a: void c()>
		SHA-256: fde4777b172c25a2396164971b28882e5ad2417f079b7f9663bc4976502ac11d
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, $i3)
		Method: <com.xinmei.adsdk.utils.p: byte[] a(byte[],java.lang.String)>
		SHA-256: 9911b8b6afd6fbc43b86c6baff47dcad418555b172938a2e61599cccd0907dfb
		Secure: false
	Object:
		Variable: varReplacer9939
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer9939)
		Method: <com.netqin.a.a: javax.crypto.SecretKey a(byte[])>
		SHA-256: 327fbe8cf82fa4f4dff15bb838929ad605feee4d773cbcf53b9311224d225ea
		Secure: false
	Object:
		Variable: $r14
		Type: javax.net.ssl.SSLContext
		Statement: $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer10291)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 1e7fd1eca10925b3cd89e74aecc5877a2e40986049c9027342836c2f74f0aa9b
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4161)
		Method: <com.netqin.antivirus.c.j: java.lang.String a(android.content.Context,java.lang.String)>
		SHA-256: 7762f0b6bf2e257da69e468eafa3390f45902a993166578422ec2b4106e34bdd
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.xinmei.adsdk.utils.v: java.lang.String d(java.lang.String)>
		SHA-256: 9f67b182e5bd258366c4aa0303880f8db8341f107f79be33e6be5d752e959cf4
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4621)
		Method: <com.easyx.baike.a.a.d$a: void <init>(com.easyx.baike.a.a.d,java.security.KeyStore)>
		SHA-256: d63201994d17d84b505ed21f0c78eae665df91c18dbac6925b814cea1558b035
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.netqin.antivirus.c.j: java.lang.String a(android.content.Context,java.lang.String)>
		SHA-256: 82d11eba21dfe7ee3a93d4d3df631eefd40c2d6f8e4242d6cef09ef22bc96b66
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.ads.internal.util.client.a: java.lang.String a(java.lang.String)>
		SHA-256: 5e54d7c75072b6ee2b597c5b9413576e6ddb692cffad2f913372e9e2b04fca41
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11843)
		Method: <com.netqin.antivirus.util.t: java.lang.String a(java.lang.String)>
		SHA-256: 99cbf6cae93082ed5c744301608bf23cb96f05c022fa6402131749ec41a861f5
		Secure: true
	Object:
		Variable: $r0
		Type: javax.crypto.KeyGenerator
		Statement: $r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer9937)
		Method: <com.netqin.a.a: byte[] a()>
		SHA-256: 10f1927cf1a18e180ca55300670f52e7146b11f1bcc17bd8a9b299e713b8decf
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.Key
		Statement: $r1 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.xinmei.adsdk.utils.a: byte[] b()>
		SHA-256: f22521785f615dd0e4d1e83f1ba09a0ce0783a24c18e091d07c7c4134fab6156
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.easyxapp.kr.d.d: java.lang.String a(byte[])>
		SHA-256: a16444ab2226db79de3848a6f97341ea85fd8effd8cf8f186971fb9224f076be
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3960)
		Method: <com.xinmei.adsdk.utils.v: java.lang.String d(java.lang.String)>
		SHA-256: 52708af0babbbc320e68e8824c4a7e21a21571f1d90229ed35f76f0639a823d2
		Secure: true
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4635)
		Method: <com.easyx.baike.a.a.h: javax.net.ssl.SSLSocketFactory a()>
		SHA-256: 63f27adbe37b76dc3bf987ffb264dea85d53f96c4d30ad5b8f07a70915953a07
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.KeyStore
		Statement: $r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 2f60181713d6f5ba9d7147e52d275fa1384e51fe31796c1e6effaa0e31708dfb
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer9939)
		Method: <com.netqin.a.a: javax.crypto.SecretKey a(byte[])>
		SHA-256: 227ad7ff1ca4d058beedbf042e003f433add2bb3dada28efaebf2bbbbdcbbeaf
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1557)
		Method: <com.facebook.ads.internal.util.s: java.lang.String a(java.lang.String)>
		SHA-256: 19f3291efadfcf4503428d841a8a51ec5eb8c167dc4c6d6a168f1e6b1e3dfdf0
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.KeyStore
		Statement: $r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5)
		Method: <com.easyxapp.common.http.a: void a()>
		SHA-256: 2f60181713d6f5ba9d7147e52d275fa1384e51fe31796c1e6effaa0e31708dfb
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.netqin.a.a: byte[] a(byte[],byte[])>
		SHA-256: f1d6a6accdd5322f834c03c10ae9fbd38e23fcf0104369ed978e594cd8b30692
		Secure: false

Findings in Java Class: com.xinmei.adsdk.utils.p

	 in Method: byte[] a(byte[],java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, $i3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, varReplacer3612)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, $i3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3615, $r6)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3615, $r6)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #ae71252804de2cb0f9eeb1906afafcdadac2e4683edea5097623f4e2ff025c79)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, varReplacer3612)


Findings in Java Class: com.xinmei.adsdk.utils.a

	 in Method: void c()
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>($i0, $r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #fde4777b172c25a2396164971b28882e5ad2417f079b7f9663bc4976502ac11d)
			First parameter (with value "Blowfish") should be any of {HmacSHA224, HmacSHA256, AES, HmacSHA384, AESWRAP, DESede, HmacMD5, HmacSHA512, DESedeWRAP}
			at statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer3857)


	 in Method: byte[] a(byte[],java.security.Key)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #701b790f43b1f9fe2b0a885853c25d1415cc3d3400797eb8307dc19b81b3f022)
			First parameter (with value "Blowfish/ECB/PKCS5Padding") should be any of {AES, DESede, RSA}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3993)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3991, $r1)


Findings in Java Class: com.netqin.antivirus.c.j

	 in Method: java.lang.String a(android.content.Context,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7762f0b6bf2e257da69e468eafa3390f45902a993166578422ec2b4106e34bdd)
			First parameter (with value "SHA") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4161)


Findings in Java Class: com.easyx.baike.a.a.h

	 in Method: javax.net.ssl.SSLSocketFactory a()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #63f27adbe37b76dc3bf987ffb264dea85d53f96c4d30ad5b8f07a70915953a07)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4635)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, r13, $r7)

		ConstraintError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #132e3ff44326681ed11b38a4f7e9bdb9dc5d9441d64fd0f8e09ef86030cfc2a1)
			First parameter (with value "X509") should be any of {PKIX}
			at statement: $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer4634)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, r13, $r7)


Findings in Java Class: com.netqin.a.a

	 in Method: byte[] a(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c55336e228890a3e1c65a814bc9d57d59420e236d4cd682089473960066fc0d6)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer9935)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer9936, $r2)


	 in Method: byte[] b(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer10127, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #4a5f9ebab5cdc3859e4a437d0790694110927731d77cfff86b273110783b231c)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer10126)


	 in Method: javax.crypto.SecretKey a(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer9939)


Findings in Java Class: com.easyxapp.common.http.a

	 in Method: void a()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #1e7fd1eca10925b3cd89e74aecc5877a2e40986049c9027342836c2f74f0aa9b)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer10291)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ed988255800077f5310d2340c21abaddc45250034e2d7d925e4b9d329a3f5247)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer10302)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, r53, $r17)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, r53, $r17)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, r53, $r17)

		ConstraintError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #f320ba6b848da3e76523ca0aff94b82acf28b9cf2d2937387f94e786d5b70b1)
			First parameter (with value "X509") should be any of {PKIX}
			at statement: $r12 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer10273)

		ConstraintError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #48411bd9d5eb6890267fc16d0d2573273308418b91543451427604c55d3eff88)
			First parameter (with value "X509") should be any of {PKIX}
			at statement: $r12 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer10279)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, r53, $r17)


Findings in Java Class: com.easyx.baike.a.a.d$a

	 in Method: void <init>(com.easyx.baike.a.a.d,java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4623, r6, varReplacer4623)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4623, r6, varReplacer4623)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 49

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 11
	TypestateError: 2
	IncompleteOperationError: 3
	RequiredPredicateError: 14
=====================================================================