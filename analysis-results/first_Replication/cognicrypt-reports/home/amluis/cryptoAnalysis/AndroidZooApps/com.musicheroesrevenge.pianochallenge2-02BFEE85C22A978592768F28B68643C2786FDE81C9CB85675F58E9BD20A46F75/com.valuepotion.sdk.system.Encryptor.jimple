public class com.valuepotion.sdk.system.Encryptor extends java.lang.Object
{

    public void <init>()
    {
        com.valuepotion.sdk.system.Encryptor $r0;

        $r0 := @this: com.valuepotion.sdk.system.Encryptor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String Aes128FromString(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer640, varReplacer641, varReplacer642, varReplacer643;
        javax.crypto.spec.SecretKeySpec $r2, r12;
        boolean $z0;
        byte[] $r3, $r4;
        javax.crypto.Cipher $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        java.security.InvalidKeyException r13;
        java.security.NoSuchAlgorithmException r14;
        javax.crypto.NoSuchPaddingException r15;
        java.io.UnsupportedEncodingException r16;
        javax.crypto.IllegalBlockSizeException r17;
        javax.crypto.BadPaddingException r18;
        null_type varReplacer639, varReplacer645;
        int varReplacer644;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label01;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label02;

     label01:
        varReplacer639 = null;

        return varReplacer639;

     label02:
        varReplacer643 = "UTF-8";

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer643);

        varReplacer641 = "UTF-8";

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer641);

        varReplacer640 = "AES/ECB/PKCS5Padding";

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer640);

     label03:
        r12 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r12;

     label04:
        varReplacer642 = "AES";

        specialinvoke r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer642);

        varReplacer644 = 1;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer644, $r2);

        $r3 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        $r0 = staticinvoke <com.valuepotion.sdk.system.Encryptor: java.lang.String Base64StringFromHexData(byte[])>($r3);

     label05:
        return $r0;

     label06:
        $r6 := @caughtexception;

        r13 = (java.security.InvalidKeyException) $r6;

        virtualinvoke r13.<java.security.InvalidKeyException: void printStackTrace()>();

     label07:
        varReplacer645 = null;

        return varReplacer645;

     label08:
        $r7 := @caughtexception;

        r14 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke r14.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label07;

     label09:
        $r8 := @caughtexception;

        r15 = (javax.crypto.NoSuchPaddingException) $r8;

        virtualinvoke r15.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label07;

     label10:
        $r9 := @caughtexception;

        r16 = (java.io.UnsupportedEncodingException) $r9;

        virtualinvoke r16.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label07;

     label11:
        $r10 := @caughtexception;

        r17 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke r17.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label07;

     label12:
        $r11 := @caughtexception;

        r18 = (javax.crypto.BadPaddingException) $r11;

        virtualinvoke r18.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label07;

        catch java.security.InvalidKeyException from label02 to label03 with label06;
        catch java.security.InvalidKeyException from label04 to label05 with label06;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label08;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label08;
        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label09;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label09;
        catch java.io.UnsupportedEncodingException from label02 to label03 with label10;
        catch java.io.UnsupportedEncodingException from label04 to label05 with label10;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label11;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label11;
        catch javax.crypto.BadPaddingException from label02 to label03 with label12;
        catch javax.crypto.BadPaddingException from label04 to label05 with label12;
    }

    public static java.lang.String Base64StringFromHexData(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        int varReplacer661;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer661 = 11;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, varReplacer661);

        return $r1;
    }

    public static byte[] Sha256DataFromString(java.lang.String)
    {
        java.lang.String $r0, varReplacer686, varReplacer688, varReplacer689;
        java.lang.Throwable $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        java.security.NoSuchAlgorithmException r4;
        null_type varReplacer687;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer686 = "SHA256";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer686);

     label2:
        virtualinvoke $r2.<java.security.MessageDigest: void reset()>();

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r3);

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        return $r3;

     label3:
        $r1 := @caughtexception;

        r4 = (java.security.NoSuchAlgorithmException) $r1;

        virtualinvoke r4.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer688 = "DEBUG";

        varReplacer689 = "Could not create hash value";

        staticinvoke <com.valuepotion.sdk.util.VPLog: void v(java.lang.String,java.lang.String)>(varReplacer688, varReplacer689);

        varReplacer687 = null;

        return varReplacer687;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }
}
