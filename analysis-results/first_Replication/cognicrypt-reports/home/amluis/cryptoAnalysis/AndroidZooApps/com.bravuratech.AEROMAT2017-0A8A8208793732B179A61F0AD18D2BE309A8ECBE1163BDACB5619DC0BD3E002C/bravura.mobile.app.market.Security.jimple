public class bravura.mobile.app.market.Security extends java.lang.Object
{
    private static final java.lang.String KEY_FACTORY_ALGORITHM;
    private static final java.security.SecureRandom RANDOM;
    private static final java.lang.String SIGNATURE_ALGORITHM;
    private static final java.lang.String TAG;
    private static java.util.HashSet sKnownNonces;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;
        java.util.HashSet $r1;

        nop;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <bravura.mobile.app.market.Security: java.security.SecureRandom RANDOM> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <bravura.mobile.app.market.Security: java.util.HashSet sKnownNonces> = $r1;

        return;
    }

    public void <init>()
    {
        bravura.mobile.app.market.Security $r0;

        $r0 := @this: bravura.mobile.app.market.Security;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long generateNonce()
    {
        java.security.SecureRandom $r0;
        long $l0;
        java.util.HashSet $r1;
        java.lang.Long $r2;

        nop;

        $r0 = <bravura.mobile.app.market.Security: java.security.SecureRandom RANDOM>;

        $l0 = virtualinvoke $r0.<java.security.SecureRandom: long nextLong()>();

        $r1 = <bravura.mobile.app.market.Security: java.util.HashSet sKnownNonces>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

        return $l0;
    }

    public static java.security.PublicKey generatePublicKey(java.lang.String)
    {
        java.lang.String $r0, varReplacer535, varReplacer536, varReplacer537, varReplacer538, varReplacer539, varReplacer540;
        byte[] $r1;
        java.security.KeyFactory $r2;
        java.security.spec.X509EncodedKeySpec $r3;
        java.security.PublicKey $r4;
        java.lang.Throwable $r5, $r7;
        java.lang.RuntimeException $r6;
        java.lang.IllegalArgumentException $r8;
        bravura.mobile.app.util.Base64DecoderException $r9;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer538 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArsnz33dAwMqWzA9xXRSrc8bzRyI2GkT1RmVgIpUIr6yP/GlGrqzlMM5VEwjHYlSCQOqgEuW8iYfUfZTAiEap6+YVmyUGUEvh28dGjra75KGdlL62tY9NHKwk3E/+rUL7iBN9CbuPqcE1nJEnv787sSVdIyfr6Nw840wuPIyjH+LRZu/OEIy9a5OPJzxmJT2JHNQfkIpDfssWnH1uVhSUZP7qge9M/cMYZ8M8Guke5Nj90XDS0FBsC92z5OOn2ie+v6i2+yy8TrwcXm+xjtexPic48a3boJlqwNZcZWC8QAH3oWh+JtcD2Clm1p3ckF8f/PP3ceojYHHsd94owQXRyQIDAQAB";

        $r1 = staticinvoke <bravura.mobile.app.util.Base64: byte[] decode(java.lang.String)>(varReplacer538);

        varReplacer537 = "RSA";

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer537);

     label2:
        $r3 = new java.security.spec.X509EncodedKeySpec;

     label3:
        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        $r7 := @caughtexception;

        varReplacer535 = "Security";

        varReplacer536 = "Invalid key specification.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer535, varReplacer536);

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label7:
        $r9 := @caughtexception;

        varReplacer539 = "Security";

        varReplacer540 = "Base64 decoding failed.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer539, varReplacer540);

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label6;
        catch java.security.spec.InvalidKeySpecException from label3 to label4 with label6;
        catch bravura.mobile.app.util.Base64DecoderException from label1 to label2 with label7;
        catch bravura.mobile.app.util.Base64DecoderException from label3 to label4 with label7;
    }

    public static boolean isNonceKnown(long)
    {
        long $l0;
        java.util.HashSet $r0;
        java.lang.Long $r1;
        boolean $z0;

        nop;

        $l0 := @parameter0: long;

        $r0 = <bravura.mobile.app.market.Security: java.util.HashSet sKnownNonces>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r0.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public static void removeNonce(long)
    {
        long $l0;
        java.util.HashSet $r0;
        java.lang.Long $r1;

        nop;

        $l0 := @parameter0: long;

        $r0 = <bravura.mobile.app.market.Security: java.util.HashSet sKnownNonces>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r0.<java.util.HashSet: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public static boolean verify(java.security.PublicKey, java.lang.String, java.lang.String)
    {
        java.security.PublicKey $r0;
        java.lang.String $r1, $r2, $r4, varReplacer516, varReplacer517, varReplacer518, varReplacer519, varReplacer521, varReplacer522, varReplacer524, varReplacer525, varReplacer526, varReplacer527, varReplacer528, varReplacer529, varReplacer530;
        java.lang.StringBuilder $r3;
        java.security.Signature $r5;
        byte[] $r6;
        boolean $z0;
        java.lang.Throwable $r7, $r8, $r9;
        bravura.mobile.app.util.Base64DecoderException $r10;
        int varReplacer520, varReplacer523, varReplacer531, varReplacer532, varReplacer533, varReplacer534;

        nop;

        $r0 := @parameter0: java.security.PublicKey;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        varReplacer518 = "signature: ";

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer518);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer530 = "Security";

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(varReplacer530, $r4);

     label1:
        varReplacer519 = "SHA1withRSA";

        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer519);

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0);

        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r6);

        $r6 = staticinvoke <bravura.mobile.app.util.Base64: byte[] decode(java.lang.String)>($r2);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r6);

     label2:
        if $z0 != 0 goto label5;

     label3:
        varReplacer516 = "Security";

        varReplacer517 = "Signature verification failed.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer516, varReplacer517);

     label4:
        varReplacer531 = 0;

        return varReplacer531;

     label5:
        varReplacer520 = 1;

        return varReplacer520;

     label6:
        $r7 := @caughtexception;

        varReplacer528 = "Security";

        varReplacer529 = "NoSuchAlgorithmException.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer528, varReplacer529);

        varReplacer532 = 0;

        return varReplacer532;

     label7:
        $r8 := @caughtexception;

        varReplacer521 = "Security";

        varReplacer522 = "Invalid key specification.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer521, varReplacer522);

        varReplacer533 = 0;

        return varReplacer533;

     label8:
        $r9 := @caughtexception;

        varReplacer524 = "Security";

        varReplacer525 = "Signature exception.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer524, varReplacer525);

        varReplacer523 = 0;

        return varReplacer523;

     label9:
        $r10 := @caughtexception;

        varReplacer526 = "Security";

        varReplacer527 = "Base64 decoding failed.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer526, varReplacer527);

        varReplacer534 = 0;

        return varReplacer534;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
        catch java.security.SignatureException from label1 to label2 with label8;
        catch java.security.SignatureException from label3 to label4 with label8;
        catch bravura.mobile.app.util.Base64DecoderException from label1 to label2 with label9;
        catch bravura.mobile.app.util.Base64DecoderException from label3 to label4 with label9;
    }

    public static java.util.ArrayList verifyPurchase(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r4, $r10, varReplacer486, varReplacer487, varReplacer488, varReplacer489, varReplacer490, varReplacer493, varReplacer495, varReplacer496, varReplacer497, varReplacer498, varReplacer499, varReplacer500, varReplacer501, varReplacer502, varReplacer503, varReplacer504, varReplacer505, varReplacer509, varReplacer510, varReplacer511, varReplacer512, varReplacer513;
        org.json.JSONObject $r2;
        java.lang.StringBuilder $r3;
        boolean $z0, $z1;
        java.security.PublicKey $r5;
        int $i0, $i2, $i3;
        long $l1, $l4;
        org.json.JSONArray $r6;
        org.json.JSONException $r7, $r13;
        java.util.ArrayList $r8;
        bravura.mobile.app.market.MarketConstants$PurchaseState $r9, $r11;
        bravura.mobile.app.market.Security$VerifiedPurchase $r12;
        null_type varReplacer491, varReplacer492, varReplacer494, varReplacer506, varReplacer507, varReplacer508;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label01;

        varReplacer500 = "Security";

        varReplacer501 = "data is null";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer500, varReplacer501);

        varReplacer492 = null;

        return varReplacer492;

     label01:
        $r3 = new java.lang.StringBuilder;

        varReplacer505 = "signedData: ";

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer505);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer509 = "Security";

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(varReplacer509, $r4);

        $z0 = 0;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z1 != 0 goto label02;

        varReplacer511 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArsnz33dAwMqWzA9xXRSrc8bzRyI2GkT1RmVgIpUIr6yP/GlGrqzlMM5VEwjHYlSCQOqgEuW8iYfUfZTAiEap6+YVmyUGUEvh28dGjra75KGdlL62tY9NHKwk3E/+rUL7iBN9CbuPqcE1nJEnv787sSVdIyfr6Nw840wuPIyjH+LRZu/OEIy9a5OPJzxmJT2JHNQfkIpDfssWnH1uVhSUZP7qge9M/cMYZ8M8Guke5Nj90XDS0FBsC92z5OOn2ie+v6i2+yy8TrwcXm+xjtexPic48a3boJlqwNZcZWC8QAH3oWh+JtcD2Clm1p3ckF8f/PP3ceojYHHsd94owQXRyQIDAQAB";

        $r5 = staticinvoke <bravura.mobile.app.market.Security: java.security.PublicKey generatePublicKey(java.lang.String)>(varReplacer511);

        $z1 = staticinvoke <bravura.mobile.app.market.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>($r5, $r0, $r1);

        $z0 = $z1;

        if $z1 != 0 goto label02;

        varReplacer488 = "Security";

        varReplacer489 = "signature does not match data.";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(varReplacer488, varReplacer489);

        varReplacer494 = null;

        return varReplacer494;

     label02:
        $i0 = 0;

        $r2 = new org.json.JSONObject;

     label03:
        specialinvoke $r2.<org.json.JSONObject: void <init>(java.lang.String)>($r0);

        varReplacer497 = "nonce";

        $l1 = virtualinvoke $r2.<org.json.JSONObject: long optLong(java.lang.String)>(varReplacer497);

        varReplacer512 = "orders";

        $r6 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>(varReplacer512);

     label04:
        if $r6 == null goto label06;

     label05:
        $i0 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label06:
        $z1 = staticinvoke <bravura.mobile.app.market.Security: boolean isNonceKnown(long)>($l1);

        if $z1 != 0 goto label08;

        $r3 = new java.lang.StringBuilder;

        varReplacer486 = "Nonce not found: ";

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer486);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer493 = "Security";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(varReplacer493, $r0);

        varReplacer506 = null;

        return varReplacer506;

     label07:
        $r7 := @caughtexception;

        varReplacer507 = null;

        return varReplacer507;

     label08:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $i2 = 0;

     label09:
        if $i2 < $i0 goto label10;

        staticinvoke <bravura.mobile.app.market.Security: void removeNonce(long)>($l1);

        return $r8;

     label10:
        $r2 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i2);

        varReplacer495 = "purchaseState";

        $i3 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>(varReplacer495);

        $r9 = staticinvoke <bravura.mobile.app.market.MarketConstants$PurchaseState: bravura.mobile.app.market.MarketConstants$PurchaseState valueOf(int)>($i3);

        varReplacer510 = "productId";

        $r0 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>(varReplacer510);

        varReplacer502 = "packageName";

        virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>(varReplacer502);

        varReplacer496 = "purchaseTime";

        $l4 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>(varReplacer496);

        varReplacer503 = "orderId";

        varReplacer504 = "";

        $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>(varReplacer503, varReplacer504);

     label11:
        $r4 = null;

     label12:
        varReplacer487 = "notificationId";

        $z1 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>(varReplacer487);

     label13:
        if $z1 == 0 goto label15;

     label14:
        varReplacer513 = "notificationId";

        $r4 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>(varReplacer513);

     label15:
        varReplacer490 = "developerPayload";

        varReplacer491 = null;

        $r10 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>(varReplacer490, varReplacer491);

     label16:
        $r11 = <bravura.mobile.app.market.MarketConstants$PurchaseState: bravura.mobile.app.market.MarketConstants$PurchaseState PURCHASED>;

        if $r9 != $r11 goto label18;

        if $z0 != 0 goto label18;

     label17:
        $i2 = $i2 + 1;

        goto label09;

     label18:
        $r12 = new bravura.mobile.app.market.Security$VerifiedPurchase;

     label19:
        specialinvoke $r12.<bravura.mobile.app.market.Security$VerifiedPurchase: void <init>(bravura.mobile.app.market.MarketConstants$PurchaseState,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String)>($r9, $r4, $r0, $r1, $l4, $r10);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label20:
        goto label17;

     label21:
        $r13 := @caughtexception;

        varReplacer498 = "Security";

        varReplacer499 = "JSON exception: ";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer498, varReplacer499, $r13);

        varReplacer508 = null;

        return varReplacer508;

        catch org.json.JSONException from label03 to label04 with label07;
        catch org.json.JSONException from label05 to label06 with label07;
        catch org.json.JSONException from label10 to label11 with label21;
        catch org.json.JSONException from label12 to label13 with label21;
        catch org.json.JSONException from label14 to label15 with label21;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
    }
}
