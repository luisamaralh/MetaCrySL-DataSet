public class com.inmobi.commons.core.utilities.a.b extends java.lang.Object
{
    private static final java.lang.String a;
    private static java.lang.String b;
    private static java.lang.String c;
    private static byte[] d;

    static void <clinit>()
    {
        java.lang.String $r0, varReplacer7989, varReplacer7990;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcom/inmobi/commons/core/utilities/a/b;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.inmobi.commons.core.utilities.a.b: java.lang.String a> = $r0;

        varReplacer7989 = "AES";

        <com.inmobi.commons.core.utilities.a.b: java.lang.String b> = varReplacer7989;

        varReplacer7990 = "AES/CBC/PKCS7Padding";

        <com.inmobi.commons.core.utilities.a.b: java.lang.String c> = varReplacer7990;

        return;
    }

    public void <init>()
    {
        com.inmobi.commons.core.utilities.a.b $r0;

        $r0 := @this: com.inmobi.commons.core.utilities.a.b;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String a(java.lang.String, byte[], byte[], byte[], java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r4, $r5, varReplacer8024;
        byte[] $r1, $r2, $r3, $r6, $r7;
        java.lang.Throwable $r8;
        java.io.UnsupportedEncodingException r9;
        int varReplacer8025;
        null_type varReplacer8026;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

     label1:
        varReplacer8024 = "UTF-8";

        $r6 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer8024);

        $r6 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b(byte[],byte[],byte[])>($r6, $r1, $r2);

        $r7 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[],byte[])>($r6, $r3);

        $r6 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r6);

        $r7 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r7);

        $r2 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r2);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r1);

        $r3 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r3);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b(byte[],byte[])>($r1, $r3);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b(byte[],byte[])>($r1, $r2);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[],java.lang.String,java.lang.String)>($r1, $r5, $r4);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] a(byte[])>($r1);

        $r2 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b(byte[],byte[])>($r6, $r7);

        $r1 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b(byte[],byte[])>($r1, $r2);

        varReplacer8025 = 8;

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r1, varReplacer8025);

     label2:
        $r4 = new java.lang.String;

     label3:
        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r1);

     label4:
        return $r4;

     label5:
        $r8 := @caughtexception;

        r9 = (java.io.UnsupportedEncodingException) $r8;

        virtualinvoke r9.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        varReplacer8026 = null;

        return varReplacer8026;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public static byte[] a()
    {
        com.inmobi.commons.core.utilities.a.a $r0;
        java.lang.String $r1, varReplacer8029;
        long $l0, $l1;
        byte $b2;
        byte[] $r2;
        java.lang.Throwable $r3, $r5;
        com.inmobi.commons.core.utilities.Logger$InternalLogLevel $r4;
        int varReplacer8027, varReplacer8028, varReplacer8030;

        nop;

        entermonitor class "Lcom/inmobi/commons/core/utilities/a/b;";

     label01:
        $r0 = new com.inmobi.commons.core.utilities.a.a;

        specialinvoke $r0.<com.inmobi.commons.core.utilities.a.a: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 / 1000L;

        $l1 = virtualinvoke $r0.<com.inmobi.commons.core.utilities.a.a: long c()>();

        $l0 = $l0 - $l1;

        $b2 = $l0 cmp 86400L;

        if $b2 <= 0 goto label04;

        $r2 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b()>();

        <com.inmobi.commons.core.utilities.a.b: byte[] d> = $r2;

        $r2 = <com.inmobi.commons.core.utilities.a.b: byte[] d>;

        varReplacer8030 = 0;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r2, varReplacer8030);

        virtualinvoke $r0.<com.inmobi.commons.core.utilities.a.a: void a(java.lang.String)>($r1);

     label02:
        $r2 = <com.inmobi.commons.core.utilities.a.b: byte[] d>;

     label03:
        exitmonitor class "Lcom/inmobi/commons/core/utilities/a/b;";

        return $r2;

     label04:
        $r2 = <com.inmobi.commons.core.utilities.a.b: byte[] d>;

        if $r2 != null goto label02;

        $r1 = virtualinvoke $r0.<com.inmobi.commons.core.utilities.a.a: java.lang.String b()>();

     label05:
        varReplacer8028 = 0;

        $r2 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r1, varReplacer8028);

     label06:
        <com.inmobi.commons.core.utilities.a.b: byte[] d> = $r2;

     label07:
        goto label02;

     label08:
        $r3 := @caughtexception;

     label09:
        $r4 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r1 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer8029 = "getAesPublicKey failed to decode the cached key.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r1, varReplacer8029, $r3);

        $r2 = staticinvoke <com.inmobi.commons.core.utilities.a.b: byte[] b()>();

        <com.inmobi.commons.core.utilities.a.b: byte[] d> = $r2;

        $r2 = <com.inmobi.commons.core.utilities.a.b: byte[] d>;

        varReplacer8027 = 0;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r2, varReplacer8027);

        virtualinvoke $r0.<com.inmobi.commons.core.utilities.a.a: void a(java.lang.String)>($r1);

     label10:
        goto label02;

     label11:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/inmobi/commons/core/utilities/a/b;";

        throw $r5;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.IllegalArgumentException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static byte[] a(int)
    {
        int $i0;
        byte[] $r0;
        java.security.SecureRandom $r1;

        nop;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[$i0];

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    private static byte[] a(byte[])
    {
        byte[] $r0, $r3, $r4;
        java.nio.ByteOrder $r1;
        int $i0, $i2, varReplacer8034, varReplacer8035, varReplacer8036, varReplacer8037;
        long $l1;
        java.nio.ByteBuffer $r2;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $l1 = (long) $i0;

        varReplacer8034 = 8;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(varReplacer8034);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l1);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = lengthof $r3;

        $i2 = lengthof $r0;

        $i0 = $i0 + $i2;

        $r4 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        varReplacer8035 = 0;

        varReplacer8036 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, varReplacer8035, $r4, varReplacer8035, $i0);

        $i0 = lengthof $r3;

        $i2 = lengthof $r0;

        varReplacer8037 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer8037, $r4, $i0, $i2);

        return $r4;
    }

    public static byte[] a(byte[], java.lang.String, java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1, $r2, varReplacer8041, varReplacer8047;
        java.security.spec.RSAPublicKeySpec $r3, r17;
        java.math.BigInteger $r4, $r5, r16;
        java.security.KeyFactory $r6;
        java.security.PublicKey $r7;
        java.security.interfaces.RSAPublicKey $r8;
        javax.crypto.Cipher $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r15;
        java.security.NoSuchAlgorithmException r18;
        java.security.spec.InvalidKeySpecException r19;
        javax.crypto.NoSuchPaddingException r20;
        java.security.InvalidKeyException r21;
        javax.crypto.IllegalBlockSizeException r22;
        javax.crypto.BadPaddingException r23;
        null_type varReplacer8038, varReplacer8039, varReplacer8042, varReplacer8044, varReplacer8046, varReplacer8048;
        int varReplacer8040, varReplacer8043, varReplacer8045;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r5 = new java.math.BigInteger;

        $r4 = $r5;

        varReplacer8040 = 16;

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String,int)>($r2, varReplacer8040);

        r16 = new java.math.BigInteger;

        $r5 = r16;

        varReplacer8045 = 16;

        specialinvoke r16.<java.math.BigInteger: void <init>(java.lang.String,int)>($r1, varReplacer8045);

     label01:
        varReplacer8041 = "RSA";

        $r6 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer8041);

     label02:
        r17 = new java.security.spec.RSAPublicKeySpec;

        $r3 = r17;

     label03:
        specialinvoke r17.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

        $r7 = virtualinvoke $r6.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label04:
        $r8 = (java.security.interfaces.RSAPublicKey) $r7;

     label05:
        varReplacer8047 = "RSA/ECB/nopadding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer8047);

        varReplacer8043 = 1;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer8043, $r8);

        $r0 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label06:
        return $r0;

     label07:
        $r10 := @caughtexception;

        r18 = (java.security.NoSuchAlgorithmException) $r10;

        virtualinvoke r18.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer8039 = null;

        return varReplacer8039;

     label08:
        $r11 := @caughtexception;

        r19 = (java.security.spec.InvalidKeySpecException) $r11;

        virtualinvoke r19.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        varReplacer8048 = null;

        return varReplacer8048;

     label09:
        $r12 := @caughtexception;

        r20 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r20.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer8044 = null;

        return varReplacer8044;

     label10:
        $r13 := @caughtexception;

        r21 = (java.security.InvalidKeyException) $r13;

        virtualinvoke r21.<java.security.InvalidKeyException: void printStackTrace()>();

        varReplacer8042 = null;

        return varReplacer8042;

     label11:
        $r14 := @caughtexception;

        r22 = (javax.crypto.IllegalBlockSizeException) $r14;

        virtualinvoke r22.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer8046 = null;

        return varReplacer8046;

     label12:
        $r15 := @caughtexception;

        r23 = (javax.crypto.BadPaddingException) $r15;

        virtualinvoke r23.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer8038 = null;

        return varReplacer8038;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label07;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label07;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label08;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label08;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label08;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label09;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label09;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label09;
        catch java.security.InvalidKeyException from label01 to label02 with label10;
        catch java.security.InvalidKeyException from label03 to label04 with label10;
        catch java.security.InvalidKeyException from label05 to label06 with label10;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label11;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label11;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label11;
        catch javax.crypto.BadPaddingException from label01 to label02 with label12;
        catch javax.crypto.BadPaddingException from label03 to label04 with label12;
        catch javax.crypto.BadPaddingException from label05 to label06 with label12;
    }

    private static byte[] a(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, varReplacer8050;
        javax.crypto.spec.SecretKeySpec $r2, r6;
        javax.crypto.Mac $r3;
        java.lang.Throwable $r4, $r5;
        java.security.NoSuchAlgorithmException r7;
        java.security.InvalidKeyException r8;
        null_type varReplacer8049, varReplacer8053;
        java.lang.String varReplacer8051, varReplacer8052;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        r6 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r6;

        $i0 = lengthof $r1;

        varReplacer8050 = 0;

        varReplacer8051 = "HmacSHA1";

        specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r1, varReplacer8050, $i0, varReplacer8051);

     label1:
        varReplacer8052 = "HmacSHA1";

        $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer8052);

        virtualinvoke $r3.<javax.crypto.Mac: void init(java.security.Key)>($r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        r7 = (java.security.NoSuchAlgorithmException) $r4;

        virtualinvoke r7.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer8053 = null;

        return varReplacer8053;

     label4:
        $r5 := @caughtexception;

        r8 = (java.security.InvalidKeyException) $r5;

        virtualinvoke r8.<java.security.InvalidKeyException: void printStackTrace()>();

        varReplacer8049 = null;

        return varReplacer8049;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
    }

    public static byte[] a(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        java.lang.String $r4, varReplacer7991, varReplacer7992, varReplacer7994, varReplacer7998, varReplacer8001, varReplacer8002;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.IvParameterSpec $r6;
        java.lang.Throwable $r7, $r9, $r10, $r11, $r12, $r13;
        com.inmobi.commons.core.utilities.Logger$InternalLogLevel $r8;
        null_type varReplacer7993, varReplacer7996, varReplacer7997, varReplacer7999, varReplacer8000, varReplacer8003;
        int varReplacer7995;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String b>;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r4);

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String c>;

     label01:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

     label02:
        $r6 = new javax.crypto.spec.IvParameterSpec;

     label03:
        specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        varReplacer7995 = 2;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer7995, $r3, $r6);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label04:
        return $r0;

     label05:
        $r7 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer7994 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer7994, $r7);

        varReplacer7996 = null;

        return varReplacer7996;

     label06:
        $r9 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer7992 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer7992, $r9);

        varReplacer8000 = null;

        return varReplacer8000;

     label07:
        $r10 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer7998 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer7998, $r10);

        varReplacer7997 = null;

        return varReplacer7997;

     label08:
        $r11 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer7991 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer7991, $r11);

        varReplacer8003 = null;

        return varReplacer8003;

     label09:
        $r12 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer8001 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer8001, $r12);

        varReplacer7999 = null;

        return varReplacer7999;

     label10:
        $r13 := @caughtexception;

        $r8 = <com.inmobi.commons.core.utilities.Logger$InternalLogLevel: com.inmobi.commons.core.utilities.Logger$InternalLogLevel INTERNAL>;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String a>;

        varReplacer8002 = "Error while decrypting response.";

        staticinvoke <com.inmobi.commons.core.utilities.Logger: void a(com.inmobi.commons.core.utilities.Logger$InternalLogLevel,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r4, varReplacer8002, $r13);

        varReplacer7993 = null;

        return varReplacer7993;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label06;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label06;
        catch java.security.InvalidKeyException from label01 to label02 with label07;
        catch java.security.InvalidKeyException from label03 to label04 with label07;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label08;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label08;
        catch javax.crypto.BadPaddingException from label01 to label02 with label09;
        catch javax.crypto.BadPaddingException from label03 to label04 with label09;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label10;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label10;
    }

    private static byte[] b()
    {
        byte[] $r0;
        java.security.SecureRandom $r1;
        java.lang.Throwable $r2, $r3;
        java.security.NoSuchAlgorithmException r4;
        java.security.NoSuchProviderException r5;
        java.lang.String varReplacer8063, varReplacer8064;

        nop;

        $r0 = newarray (byte)[16];

     label1:
        varReplacer8063 = "SHA1PRNG";

        varReplacer8064 = "Crypto";

        $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer8063, varReplacer8064);

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        r4 = (java.security.NoSuchAlgorithmException) $r2;

        virtualinvoke r4.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return $r0;

     label4:
        $r3 := @caughtexception;

        r5 = (java.security.NoSuchProviderException) $r3;

        virtualinvoke r5.<java.security.NoSuchProviderException: void printStackTrace()>();

        return $r0;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.NoSuchProviderException from label1 to label2 with label4;
    }

    private static byte[] b(byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, varReplacer8031, varReplacer8032, varReplacer8033;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        varReplacer8032 = 0;

        varReplacer8033 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer8032, $r2, varReplacer8032, $i0);

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        varReplacer8031 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8031, $r2, $i1, $i0);

        return $r2;
    }

    private static byte[] b(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.SecretKeySpec $r3, r13;
        java.lang.String $r4;
        javax.crypto.spec.IvParameterSpec $r5, r14;
        javax.crypto.Cipher $r6;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;
        java.security.NoSuchAlgorithmException r15;
        javax.crypto.NoSuchPaddingException r16;
        java.security.InvalidKeyException r17;
        javax.crypto.IllegalBlockSizeException r18;
        javax.crypto.BadPaddingException r19;
        java.security.InvalidAlgorithmParameterException r20;
        null_type varReplacer8054, varReplacer8055, varReplacer8056, varReplacer8058, varReplacer8060, varReplacer8062;
        int varReplacer8057, varReplacer8059, varReplacer8061;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        r13 = new javax.crypto.spec.SecretKeySpec;

        $r3 = r13;

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String b>;

        specialinvoke r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r4);

        r14 = new javax.crypto.spec.IvParameterSpec;

        $r5 = r14;

        specialinvoke r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        $r4 = <com.inmobi.commons.core.utilities.a.b: java.lang.String c>;

     label1:
        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

        varReplacer8059 = 1;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer8059, $r3, $r5);

        varReplacer8057 = 1;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer8057, $r3, $r5);

        varReplacer8061 = 1;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer8061, $r3, $r5);

        $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label2:
        return $r0;

     label3:
        $r7 := @caughtexception;

        r15 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke r15.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer8060 = null;

        return varReplacer8060;

     label4:
        $r8 := @caughtexception;

        r16 = (javax.crypto.NoSuchPaddingException) $r8;

        virtualinvoke r16.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer8062 = null;

        return varReplacer8062;

     label5:
        $r9 := @caughtexception;

        r17 = (java.security.InvalidKeyException) $r9;

        virtualinvoke r17.<java.security.InvalidKeyException: void printStackTrace()>();

        varReplacer8058 = null;

        return varReplacer8058;

     label6:
        $r10 := @caughtexception;

        r18 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke r18.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer8054 = null;

        return varReplacer8054;

     label7:
        $r11 := @caughtexception;

        r19 = (javax.crypto.BadPaddingException) $r11;

        virtualinvoke r19.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer8056 = null;

        return varReplacer8056;

     label8:
        $r12 := @caughtexception;

        r20 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        varReplacer8055 = null;

        return varReplacer8055;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label5;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label6;
        catch javax.crypto.BadPaddingException from label1 to label2 with label7;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label8;
    }
}
