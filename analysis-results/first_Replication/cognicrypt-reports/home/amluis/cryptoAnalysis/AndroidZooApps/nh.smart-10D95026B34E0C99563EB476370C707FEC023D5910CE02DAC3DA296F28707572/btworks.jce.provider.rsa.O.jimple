public class btworks.jce.provider.rsa.O extends btworks.xcrypto.H
{
    private static final int \u00d3;
    public static final int \u00d5;
    public static final int \u00d6;
    private static final int \u00d9;
    public static final int \u00db;
    private static final int \u00de;
    private int \u00cf;
    private int \u00d0;
    private byte[] \u00d1;
    private java.util.Random \u00d2;
    private java.math.BigInteger \u00d4;
    private java.math.BigInteger \u00d8;
    private java.math.BigInteger \u00da;
    private java.math.BigInteger \u00dc;
    private byte[] \u00dd;
    private java.math.BigInteger \u00df;
    private java.math.BigInteger \u00e0;
    private java.security.MessageDigest \u00e1;

    public void <init>()
    {
        btworks.jce.provider.rsa.O $r0;
        java.lang.Exception $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        java.util.Random $r4;
        java.lang.InternalError $r5;
        java.lang.String varReplacer8053, varReplacer8054;
        int varReplacer8055;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        specialinvoke $r0.<btworks.xcrypto.H: void <init>()>();

        varReplacer8055 = 0;

        $r0.<btworks.jce.provider.rsa.O: int \u00d0> = varReplacer8055;

        $r3 = newarray (byte)[0];

        $r0.<btworks.jce.provider.rsa.O: byte[] \u00d1> = $r3;

     label1:
        varReplacer8053 = "SHA1";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8053);

        $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1> = $r2;

     label2:
        $r4 = new java.util.Random;

     label3:
        specialinvoke $r4.<java.util.Random: void <init>()>();

        $r0.<btworks.jce.provider.rsa.O: java.util.Random \u00d2> = $r4;

     label4:
        return;

     label5:
        $r1 := @caughtexception;

        $r5 = new java.lang.InternalError;

        varReplacer8054 = "Unable to instantiate messagedigest:SHA1";

        specialinvoke $r5.<java.lang.InternalError: void <init>(java.lang.String)>(varReplacer8054);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private int J()
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0;
        java.math.BigInteger $r1;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }

    private void K()
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0, $i1, $i2, varReplacer8564;
        java.security.MessageDigest $r1;
        byte[] $r2;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        $r1 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $i1 = virtualinvoke $r1.<java.security.MessageDigest: int getDigestLength()>();

        $i2 = $r0.<btworks.jce.provider.rsa.O: int \u00d0>;

        if $i2 != 1 goto label1;

        $i1 = $i1 * 2;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -2;

        $r2 = newarray (byte)[$i0];

        $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd> = $r2;

        goto label2;

     label1:
        $r2 = newarray (byte)[$i0];

        $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd> = $r2;

     label2:
        varReplacer8564 = 0;

        $r0.<btworks.jce.provider.rsa.O: int \u00cf> = varReplacer8564;

        return;
    }

    protected int A()
    {
        btworks.jce.provider.rsa.O $r0;

        $r0 := @this: btworks.jce.provider.rsa.O;

        return 0;
    }

    protected int A(int)
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 := @parameter0: int;

        $i0 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        return $i0;
    }

    protected int A(byte[], int, int, byte[], int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        javax.crypto.ShortBufferException $r3;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r1 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] B(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r1;

        $i0 = $i0 + $i2;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output-buffer too small");

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

        $i0 = lengthof $r1;

        return $i0;
    }

    protected java.security.Key A(byte[], java.lang.String, int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;
        boolean $z0;
        btworks.jce.provider.B.J $r5;
        javax.crypto.spec.SecretKeySpec $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

     label1:
        $i1 = lengthof $r1;

        $r1 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] B(byte[],int,int)>($r1, 0, $i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("PANIC: Unreachable code reached.");

        throw $r4;

     label4:
        if $i0 != 1 goto label7;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("SEED");

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ARIA");

        if $z0 == 0 goto label6;

     label5:
        $r5 = new btworks.jce.provider.B.J;

        specialinvoke $r5.<btworks.jce.provider.B.J: void <init>(java.lang.String,byte[])>($r2, $r1);

        return $r5;

     label6:
        $r6 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r2);

        return $r6;

     label7:
        if $i0 != 2 goto label8;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not supported PublicKey UnWrapping");

        throw $r7;

     label8:
        if $i0 != 3 goto label9;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not supported PrivateKey UnWrapping");

        throw $r7;

     label9:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("PANIC: Unreachable code reached.");

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void A(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom)
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        virtualinvoke $r0.<btworks.jce.provider.rsa.O: void A(int,java.security.Key,java.security.SecureRandom)>($i0, $r1, $r3);

        return;
    }

    protected void A(int, java.security.Key, java.security.SecureRandom)
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0, varReplacer8661, varReplacer8668;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.interfaces.RSAPublicKey $r3;
        java.math.BigInteger $r4;
        java.lang.Exception $r5, $r13;
        java.security.InvalidKeyException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9, varReplacer8663, varReplacer8665, varReplacer8669;
        boolean $z0;
        btworks.jce.provider.rsa.F $r10;
        java.security.interfaces.RSAPrivateCrtKey $r11;
        java.security.interfaces.RSAPrivateKey $r12;
        java.lang.UnsupportedOperationException $r14;
        null_type varReplacer8662, varReplacer8664, varReplacer8666, varReplacer8667;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

        if $i0 != 1 goto label04;

     label01:
        varReplacer8668 = 1;

        $r0.<btworks.jce.provider.rsa.O: int \u00d0> = varReplacer8668;

        $r3 = (java.security.interfaces.RSAPublicKey) $r1;

        $r4 = interfaceinvoke $r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc> = $r4;

        $r4 = interfaceinvoke $r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00df> = $r4;

     label02:
        goto label16;

     label03:
        $r5 := @caughtexception;

        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        varReplacer8665 = "unsupported key format : ";

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8665);

        $r8 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label04:
        if $i0 != 2 goto label15;

     label05:
        varReplacer8661 = 2;

        $r0.<btworks.jce.provider.rsa.O: int \u00d0> = varReplacer8661;

     label06:
        $z0 = $r1 instanceof btworks.jce.provider.rsa.F;

        if $z0 == 0 goto label09;

     label07:
        $r10 = (btworks.jce.provider.rsa.F) $r1;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger getModulus()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc> = $r4;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger getPublicExponent()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00df> = $r4;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger F()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00e0> = $r4;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger B()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00da> = $r4;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger C()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d8> = $r4;

        $r4 = virtualinvoke $r10.<btworks.jce.provider.rsa.F: java.math.BigInteger A()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d4> = $r4;

     label08:
        goto label16;

     label09:
        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z0 == 0 goto label12;

     label10:
        $r11 = (java.security.interfaces.RSAPrivateCrtKey) $r1;

        $r4 = interfaceinvoke $r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00df> = $r4;

        $r4 = interfaceinvoke $r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00da> = $r4;

        $r4 = interfaceinvoke $r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d8> = $r4;

        $r4 = interfaceinvoke $r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d4> = $r4;

     label11:
        goto label16;

     label12:
        $r12 = (java.security.interfaces.RSAPrivateKey) $r1;

        $r4 = interfaceinvoke $r12.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc> = $r4;

        $r4 = interfaceinvoke $r12.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00e0> = $r4;

        varReplacer8662 = null;

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d4> = varReplacer8662;

        varReplacer8664 = null;

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d8> = varReplacer8664;

        varReplacer8666 = null;

        $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00da> = varReplacer8666;

     label13:
        goto label16;

     label14:
        $r13 := @caughtexception;

        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        varReplacer8663 = "unsupported key format : ";

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8663);

        $r8 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label15:
        $r14 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        varReplacer8669 = "unsupported mode : ";

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8669);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label16:
        varReplacer8667 = null;

        $r0.<btworks.jce.provider.rsa.O: java.util.Random \u00d2> = varReplacer8667;

        specialinvoke $r0.<btworks.jce.provider.rsa.O: void K()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    protected void A(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)
    {
        btworks.jce.provider.rsa.O $r0;
        int $i0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;
        null_type varReplacer8652;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter3: java.security.SecureRandom;

        varReplacer8652 = null;

        virtualinvoke $r0.<btworks.jce.provider.rsa.O: void A(int,java.security.Key,java.security.SecureRandom)>($i0, $r1, varReplacer8652);

        return;
    }

    protected void A(java.lang.String)
    {
        btworks.jce.provider.rsa.O $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    protected byte[] A(java.security.Key)
    {
        btworks.jce.provider.rsa.O $r0;
        java.security.Key $r1;
        java.lang.Throwable $r2;
        boolean $z0;
        btworks.jce.provider.rsa.E $r3;
        btworks.jce.provider.B.J $r4;
        byte[] $r5;
        int $i0;
        java.lang.RuntimeException $r6;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof btworks.jce.provider.B.J;

        if $z0 == 0 goto label1;

        $r3 = new btworks.jce.provider.rsa.E;

        $r4 = (btworks.jce.provider.B.J) $r1;

        specialinvoke $r3.<btworks.jce.provider.rsa.E: void <init>(btworks.jce.provider.B.J)>($r4);

        $r5 = virtualinvoke $r3.<btworks.jce.provider.rsa.E: byte[] B()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

     label2:
        $i0 = lengthof $r5;

     label3:
        $r5 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] B(byte[],int,int)>($r5, 0, $i0);

     label4:
        return $r5;

     label5:
        $r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("PANIC: Unreachable code reached.");

        throw $r6;

        catch javax.crypto.BadPaddingException from label3 to label4 with label5;
    }

    byte[] A(byte[], int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3, varReplacer8578, varReplacer8579;
        java.security.MessageDigest $r3;
        byte $b4;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $i1 = virtualinvoke $r3.<java.security.MessageDigest: int getDigestLength()>();

        $r4 = newarray (byte)[0];

        $i2 = $i0 + $i1;

        $i2 = $i2 + -1;

        $i1 = $i2 / $i1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = newarray (byte)[4];

        $i3 = $i2 >>> 24;

        $b4 = (byte) $i3;

        $r2[0] = $b4;

        $i3 = $i2 >>> 16;

        $b4 = (byte) $i3;

        $r2[1] = $b4;

        $i3 = $i2 >>> 8;

        $b4 = (byte) $i3;

        $r2[2] = $b4;

        $b4 = (byte) $i2;

        $r2[3] = $b4;

        $r2 = staticinvoke <btworks.util.BytesUtil: byte[] add(byte[],byte[])>($r1, $r2);

        $r3 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $r4 = staticinvoke <btworks.util.BytesUtil: byte[] add(byte[],byte[])>($r4, $r2);

        $i2 = $i2 + 1;

     label2:
        if $i2 < $i1 goto label1;

        $r1 = newarray (byte)[$i0];

        varReplacer8578 = 0;

        varReplacer8579 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, varReplacer8578, $r1, varReplacer8578, $i0);

        return $r1;
    }

    protected byte[] A(byte[], int, int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r3;
        int $i0, $i1, $i2, $i3, varReplacer8554;
        java.lang.IllegalArgumentException $r2;
        java.lang.String varReplacer8553, varReplacer8555;
        null_type varReplacer8556;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<btworks.jce.provider.rsa.O: int \u00d0>;

        if $i2 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        varReplacer8553 = "key- initialization required";

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer8553);

        throw $r2;

     label1:
        $i2 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        $i2 = $i2 + $i1;

        $r3 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd>;

        $i3 = lengthof $r3;

        if $i2 <= $i3 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        varReplacer8555 = "message too long";

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer8555);

        throw $r2;

     label2:
        $r3 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd>;

        $i2 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        varReplacer8554 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8554, $r3, $i2, $i1);

        $i0 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        $i0 = $i0 + $i1;

        $r0.<btworks.jce.provider.rsa.O: int \u00cf> = $i0;

        varReplacer8556 = null;

        return varReplacer8556;
    }

    byte[] A(byte[], byte[])
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer8580, varReplacer8581, varReplacer8582, varReplacer8583, varReplacer8584, varReplacer8585;
        java.security.MessageDigest $r4;
        java.util.Random $r5;
        byte $b6, $b7;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i3 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        $r4 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $i4 = virtualinvoke $r4.<java.security.MessageDigest: int getDigestLength()>();

        $i0 = lengthof $r1;

        $i1 = $i3 - $i4;

        $i1 = $i1 + -1;

        $r4 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        $r4 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $i2 = $i1 - $i4;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        $r2 = newarray (byte)[$i1];

        varReplacer8581 = 0;

        varReplacer8582 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, varReplacer8581, $r2, varReplacer8581, $i4);

        $i5 = $i4 + $i2;

        $r2[$i5] = 1;

        $i2 = $i4 + $i2;

        $i2 = $i2 + 1;

        varReplacer8583 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8583, $r2, $i2, $i0);

        $r3 = newarray (byte)[$i4];

        $r5 = $r0.<btworks.jce.provider.rsa.O: java.util.Random \u00d2>;

        if $r5 != null goto label1;

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        $r0.<btworks.jce.provider.rsa.O: java.util.Random \u00d2> = $r5;

     label1:
        $r5 = $r0.<btworks.jce.provider.rsa.O: java.util.Random \u00d2>;

        virtualinvoke $r5.<java.util.Random: void nextBytes(byte[])>($r3);

        $r6 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int)>($r3, $i1);

        $r1 = newarray (byte)[$i1];

        $i0 = 0;

        goto label3;

     label2:
        $b6 = $r2[$i0];

        $b7 = $r6[$i0];

        $b6 = $b6 ^ $b7;

        $r1[$i0] = $b6;

        $i0 = $i0 + 1;

     label3:
        if $i0 < $i1 goto label2;

        $r6 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int)>($r1, $i4);

        $r2 = newarray (byte)[$i4];

        $i0 = 0;

        goto label5;

     label4:
        $b6 = $r3[$i0];

        $b7 = $r6[$i0];

        $b6 = $b6 ^ $b7;

        $r2[$i0] = $b6;

        $i0 = $i0 + 1;

     label5:
        if $i0 < $i4 goto label4;

        $r3 = newarray (byte)[$i3];

        varReplacer8584 = 0;

        varReplacer8585 = 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer8584, $r3, varReplacer8585, $i4);

        $i3 = $i4 + 1;

        varReplacer8580 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8580, $r3, $i3, $i1);

        return $r3;
    }

    protected int B(byte[], int, int, byte[], int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }

    protected void B(java.lang.String)
    {
        btworks.jce.provider.rsa.O $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    protected byte[] B(byte[], int, int)
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1;
        int $i0, $i1, varReplacer8066;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        varReplacer8066 = 0;

        virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int,int)>($r1, varReplacer8066, $i1);

        $i0 = $r0.<btworks.jce.provider.rsa.O: int \u00d0>;

        if $i0 != 1 goto label1;

        $r1 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] L()>();

        goto label2;

     label1:
        $r1 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] N()>();

     label2:
        specialinvoke $r0.<btworks.jce.provider.rsa.O: void K()>();

        return $r1;
    }

    byte[] B(byte[], byte[])
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r2, $r3, $r4, $r9;
        int $i0, $i2, $i4, $i6, varReplacer8568, varReplacer8570, varReplacer8571, varReplacer8575, varReplacer8576, varReplacer8577;
        byte $b1, $b5;
        java.security.MessageDigest $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        short $s3;
        java.lang.String $r8, varReplacer8569, varReplacer8572, varReplacer8573, varReplacer8574;
        boolean $z0;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        $r5 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $i2 = virtualinvoke $r5.<java.security.MessageDigest: int getDigestLength()>();

        $i0 = $i0 - $i2;

        $i0 = $i0 + -1;

        $r5 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        virtualinvoke $r5.<java.security.MessageDigest: void reset()>();

        $r5 = $r0.<btworks.jce.provider.rsa.O: java.security.MessageDigest \u00e1>;

        $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $b1 = $r1[0];

        if $b1 == 0 goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        varReplacer8573 = "decryption error, illegal EM[0] : 0x";

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8573);

        $s3 = $b1 & 255;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label01:
        $r3 = newarray (byte)[$i2];

        varReplacer8576 = 1;

        varReplacer8577 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8576, $r3, varReplacer8577, $i2);

        $r4 = newarray (byte)[$i0];

        $i4 = $i2 + 1;

        varReplacer8568 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i4, $r4, varReplacer8568, $i0);

        $r9 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int)>($r4, $i2);

        $r1 = newarray (byte)[$i2];

        $i4 = 0;

        goto label03;

     label02:
        $b1 = $r3[$i4];

        $b5 = $r9[$i4];

        $b1 = $b1 ^ $b5;

        $r1[$i4] = $b1;

        $i4 = $i4 + 1;

     label03:
        if $i4 < $i2 goto label02;

        $r3 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],int)>($r1, $i0);

        $r1 = newarray (byte)[$i0];

        $i4 = 0;

        goto label05;

     label04:
        $b1 = $r4[$i4];

        $b5 = $r3[$i4];

        $b1 = $b1 ^ $b5;

        $r1[$i4] = $b1;

        $i4 = $i4 + 1;

     label05:
        $i6 = lengthof $r1;

        if $i4 < $i6 goto label04;

        $r4 = newarray (byte)[$i2];

        varReplacer8570 = 0;

        varReplacer8571 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer8570, $r4, varReplacer8570, $i2);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r4);

        if $z0 != 0 goto label06;

        $r6 = new java.lang.IllegalArgumentException;

        varReplacer8569 = "decryption error, lHash mismatched";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer8569);

        throw $r6;

     label06:
        goto label11;

     label07:
        $b1 = $r1[$i2];

        if $b1 != 0 goto label08;

        goto label10;

     label08:
        $b1 = $r1[$i2];

        if $b1 != 1 goto label09;

        goto label12;

     label09:
        $r6 = new java.lang.IllegalArgumentException;

        varReplacer8572 = "decryption error, illegal PS octet";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer8572);

        throw $r6;

     label10:
        $i2 = $i2 + 1;

     label11:
        $i4 = lengthof $r1;

        if $i2 < $i4 goto label07;

     label12:
        $i4 = lengthof $r1;

        if $i2 != $i4 goto label13;

        $r6 = new java.lang.IllegalArgumentException;

        varReplacer8574 = "decryption error, no separator between PS and M";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer8574);

        throw $r6;

     label13:
        $i4 = $i2 + 1;

        $i0 = $i0 - $i4;

        $r2 = newarray (byte)[$i0];

        $i2 = $i2 + 1;

        varReplacer8575 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, varReplacer8575, $i0);

        return $r2;
    }

    protected int J(java.security.Key)
    {
        btworks.jce.provider.rsa.O $r0;
        java.security.Key $r1;
        java.security.interfaces.RSAKey $r2;
        java.math.BigInteger $r3;
        int $i0;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $r1 := @parameter0: java.security.Key;

        $r2 = (java.security.interfaces.RSAKey) $r1;

        $r3 = interfaceinvoke $r2.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        return $i0;
    }

    byte[] L()
    {
        btworks.jce.provider.rsa.O $r0;
        byte[] $r1, $r3;
        java.math.BigInteger $r2, $r4, $r5;
        int $i0, $i1, varReplacer8557, varReplacer8558, varReplacer8559;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        $i1 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        $r1 = newarray (byte)[$i1];

        $r3 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd>;

        $i1 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        varReplacer8558 = 0;

        varReplacer8559 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, varReplacer8558, $r1, varReplacer8558, $i1);

        $r3 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00d1>;

        $r1 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] A(byte[],byte[])>($r1, $r3);

        $r2 = new java.math.BigInteger;

        varReplacer8557 = 1;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer8557, $r1);

        $r4 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc>;

        $r5 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00df>;

        $r2 = staticinvoke <btworks.jce.provider.rsa.I: java.math.BigInteger A(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r4, $r5);

        $r1 = staticinvoke <btworks.util.BytesUtil: byte[] toFixedLenByteArray(java.math.BigInteger,int)>($r2, $i0);

        return $r1;
    }

    protected java.security.AlgorithmParameters M()
    {
        btworks.jce.provider.rsa.O $r0;

        $r0 := @this: btworks.jce.provider.rsa.O;

        return null;
    }

    byte[] N()
    {
        btworks.jce.provider.rsa.O $r0;
        java.math.BigInteger $r1, $r2, $r3, $r5, $r10, $r11, $r12;
        byte[] $r4, $r6;
        int $i0, $i1, varReplacer8560, varReplacer8561, varReplacer8563;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, varReplacer8562;

        nop;

        $r0 := @this: btworks.jce.provider.rsa.O;

        $i0 = specialinvoke $r0.<btworks.jce.provider.rsa.O: int J()>();

        $i1 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        $r4 = newarray (byte)[$i1];

        $r6 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00dd>;

        $i1 = $r0.<btworks.jce.provider.rsa.O: int \u00cf>;

        varReplacer8560 = 0;

        varReplacer8561 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, varReplacer8560, $r4, varReplacer8560, $i1);

        $i1 = lengthof $r4;

        if $i1 == $i0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        varReplacer8562 = "decryption error, invalid length : ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8562);

        $i0 = lengthof $r4;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label1:
        $r5 = new java.math.BigInteger;

        varReplacer8563 = 1;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer8563, $r4);

        $r10 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00dc>;

        $r11 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00df>;

        $r12 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00e0>;

        $r1 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00da>;

        $r2 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d8>;

        $r3 = $r0.<btworks.jce.provider.rsa.O: java.math.BigInteger \u00d4>;

        $r1 = staticinvoke <btworks.jce.provider.rsa.I: java.math.BigInteger A(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r10, $r11, $r12, $r1, $r2, $r3);

        $r4 = staticinvoke <btworks.util.BytesUtil: byte[] toFixedLenByteArray(java.math.BigInteger,int)>($r1, $i0);

        $r6 = $r0.<btworks.jce.provider.rsa.O: byte[] \u00d1>;

        $r4 = virtualinvoke $r0.<btworks.jce.provider.rsa.O: byte[] B(byte[],byte[])>($r4, $r6);

        return $r4;
    }

    protected byte[] O()
    {
        btworks.jce.provider.rsa.O $r0;

        $r0 := @this: btworks.jce.provider.rsa.O;

        return null;
    }
}
