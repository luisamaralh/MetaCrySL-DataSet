Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.inditex.stradivarius-10702B935F1FA5817586AF070B128F887F341B6D123FB8C9115460267F3C74B7.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 197fe427bb47c7000549fc2bae1257af55f252f1907d92d197d440873bb7d19d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 2e264fbf613ad849d59d8af8503eb792a6154af12ffa74d9a033ffc80141321b
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyPairGenerator
		Statement: $r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer5209)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: fac67c9535031fd802571e7994b1f18f8bbaa835777357bbad55b804af9f781a
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer14256)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 66b0cd728953bb8846199e6f2ace7a3848104d40584a42943e2f2d62ab64e46c
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer17045)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 5f8c7839a8e21ae4c0a5bb897bce133ec945807cdd1e8235e1656b8c3d3e793a
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer12240)
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: a276e8684c8c6198594064dc759f57dea00b8bac6301164b3d733f83e5794358
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer16013)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: e5a401ef5e890765d833fc6877830cbf1c6f43a2e1fe7b6883d4f47d3424b7b6
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 25d3835610df116c8d3f054724d99f7905e07400f4267757f6af4ad048311bb9
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyPair
		Statement: $r3 = virtualinvoke $r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: 998d7f8b789bb471b4fc448ecd77c8064ff966c3ee432d0ce8aeed074c263056
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer10294)
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: a939bfc568be311db1644bd8f2ae6d6c1a93beec69f527a39da7673bd0c6f043
		Secure: true
	Object:
		Variable: $r15
		Type: byte[]
		Statement: $r15 = virtualinvoke $r16.<java.security.MessageDigest: byte[] digest(byte[])>($r15)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: 76e3a7452e9b6fbb7416cc680a11570c3770ba58aad3a2b2f1d4c3a7018d3759
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer17049, varReplacer17050)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 97f730cbf62a68fcdac55d926f88d887cd1288abb1fa51ca08c23eaec2e61036
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: f9d57de5f460dffb636596b0fda0470337543f67320a3d0a6000c6125fdd5c06
		Secure: true
	Object:
		Variable: varReplacer17036
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer17035, $i0, varReplacer17036)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: 7682a6ddf7eb75a48f0d49e75dc790b32c07f9d675caeceb383fabf72978b1c0
		Secure: false
	Object:
		Variable: r9
		Type: java.security.SecureRandom
		Statement: specialinvoke r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: 29211615345791b2a80d5df714aa0370cc525ea64d574bcdb7c9ae5ae5f7b5c3
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer17035, $i0, varReplacer17036)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: fe684fba95d6cd0a164ce5f0d326e4157e246929781d9d81062ac0c373006dfa
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer17054)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 1a4cc3d85c9b0be1df1f4463b3e3b9b01c382b881d33c573d1643ed62af5d5b6
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: 7f63ddec16f7ebd694f9bae2a234e255d503ad65ab3db30be5cf9b76d93c67e8
		Secure: true
	Object:
		Variable: varReplacer17047
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17047)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 1eb8de0f2b7c0f6f95c7f85ca455a426d1bfbad5f9473934ada74286248d5ab0
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: df95c04ed76fe7565b426c50cde38eab25e76095c32672d02ac4cc89c29ba677
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.SecretKey
		Statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 448449e0709e0526695e283fbaa2d735286a245b7be948be9c23aa9299ab4a05
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.Cipher
		Statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer10292)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 22f5c983323030dd5bfde0f77345b2003e41cf566164caf9d7134fd44f55e315
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 3f9926bdf527602ea45fc7bc0f3a0983861f76f95c4a49e3f70ddb8eb8a6e773
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.SecretKeyFactory
		Statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer10291)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 7812d4abccb3b856e17efc2b87afd2674b94ca32e21029e364e1f6178945b33d
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 279db3d9da58ae94c02e1ba6db8deae9057d6b5f9f4f37662fc46c910a8d6da3
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Mac
		Statement: $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer17072)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: 73a5098db6c408db38e6ea288249f6175aaaa3e1fd298aabe162d5df44d01518
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.Cipher
		Statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16022)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: boolean cipherInit()>
		SHA-256: 9277bf9db88638662a934df3891652d5ca4ccfb3b5b0eef317dc5db3732edff4
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer17056)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: eee67683fb3f4f3c8503d2dcb0263a3f9b1e3f1bafa7e9fcc548f0e37557d5b0
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer16011, varReplacer16012)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: da524bb601e6e12e807f8503a0ad47793559b2b6f8f1de104034d12f0a9f0f5b
		Secure: true
	Object:
		Variable: varReplacer17041
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer17041)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: ebf2fd6ffeebbd9255a03f5f7db740c5588517f35dbd5be8a599459e5ec32890
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 418c2ad98edc91011d89c3be10f36bd98972111ac309f4208c409f9fb9324bc5
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: b2e797e2aef5712fbd1129754004cb8696cf299909c3a04e2b37ffc6a3c5dc1f
		Secure: true
	Object:
		Variable: $r16
		Type: java.security.MessageDigest
		Statement: $r16 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer14193)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: 86c89bb5746459ccc04c488fd8b3aed0fd452583bfb35ce3fac6c6bbd3922d00
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer17041)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: 90c72afcce600018c341bcdcb31e997cc71824b8501b652cc439f4a577e56c91
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 1b60ada71588e4c898565eee208814b6c5d9ab3e542639603a4bac2860e8e971
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: c6dc4131ca13a700f69eebff9cf4d4cbd1f442867ec8377fecf98f1bef3306a4
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 36da9e361da26f0f9650bfcbd38588efc7fa4e7a5a1d92c4a966ccf918fc9e45
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17047)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 17d5b1fb6d4265269155c647cdc93a95d4f944d013bbffa6f00f04a1fed8ded0
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer17176)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: c5ef4817197be24f60b90a419f03f80c7f875e2d08b24988c3a1cc919f4edb5e
		Secure: false

Findings in Java Class: com.inditex.itxinwalletframework.manager.impl.CryptoManager

	 in Method: java.security.KeyPair generateKeyPairKeys()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #fac67c9535031fd802571e7994b1f18f8bbaa835777357bbad55b804af9f781a)
			First parameter (with value 1024) should be any of {2048, 4096}
			at statement: virtualinvoke $r2.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer5206)


	 in Method: byte[] signData(byte[],java.security.PrivateKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey)>($r2)


Findings in Java Class: com.tencent.mm.sdk.platformtools.LogHelper

	 in Method: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer10290, $r9)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #7812d4abccb3b856e17efc2b87afd2674b94ca32e21029e364e1f6178945b33d)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer10291)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #22f5c983323030dd5bfde0f77345b2003e41cf566164caf9d7134fd44f55e315)
			First parameter (with value "DES") should be any of {AES, DESede, RSA}
			at statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer10292)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)


Findings in Java Class: com.inditex.rest.helpers.OkHTTPClientTrustSSL

	 in Method: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #a276e8684c8c6198594064dc759f57dea00b8bac6301164b3d733f83e5794358)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer12240)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer12241, r13, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer12241, r13, $r5)


Findings in Java Class: com.inditex.itxinwalletframework.activity.IWFingerprintActivity

	 in Method: void generateKey()
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #e5a401ef5e890765d833fc6877830cbf1c6f43a2e1fe7b6883d4f47d3424b7b6)
			First parameter (with value "AndroidKeyStore") should be any of {BKS, PKCS12-DEF, BCPKCS12, PKCS12, BouncyCastle}
			at statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer16013)


Findings in Java Class: com.inditex.rest.helpers.AesCbcWithIntegrity

	 in Method: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer17177, $r5, $r2)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer17041)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer17035, $i0, varReplacer17036)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer17053, $r5, $r2)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer17047)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 39

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 11
	ConstraintError: 5
=====================================================================
