Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.orangefish.app.delicacy-0267F86345BE3402D7BAAD21998E7868451E3F944DC05B170E13659978C3B04A.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.internal.zzpx: java.lang.String zzbb(java.lang.String)>
		SHA-256: 45c767ea96312812f59bb8e2ef20e2f02c69406384f892ab3dc1ac39d34a38b5
		Secure: true
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1180)
		Method: <cz.msebera.android.httpclient.conn.ssl.SSLContexts: javax.net.ssl.SSLContext createDefault()>
		SHA-256: fd567c82d45a36e1e77db0aa9bb4c3207c4028a0df722c736183cf5a44589fa2
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1195)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: 1fa96473203257ee34c4346759b254fcb41fc5d7202889b885911278f46a26a9
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer2989)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 18bc5d7ba9b0799d1a41b0942309d805d0f36aa289eb084a19bcd1fc5bffd37c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer11379)
		Method: <com.orangefish.app.delicacy.billing.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 104d0ca54c466f2adf02164ccd8d9fdfee95491895984a10f1ee96130b5ece26
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2652)
		Method: <com.orangefish.app.delicacy.common.DeviceUtils: java.lang.String md5Digest(java.lang.String)>
		SHA-256: 5f7ce27d87cee20db6afb54bca4de03ecf0cd6adb6b356910cbc18f5b99d0d06
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2986)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: ae4bf6a114d3f8b525d208481bfd05385c0117ca5ec0c23cd0b8d6e7ea74269a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.ad2iction.common.util.Utils: java.lang.String sha1(java.lang.String)>
		SHA-256: b1475ecb277cf44c18e504f1be84657ccb3a6b602605d56eb56e04862a5c2552
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.orangefish.app.delicacy.billing.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: c678472b4c19c53650e756c77dab364889209724da847a2f30c698a83517174f
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String SHA256(java.lang.String,int)>
		SHA-256: 3857e96df8cbaae0e0896622f697199650addec91795faec2774977c70bda817
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2359)
		Method: <com.ad2iction.common.util.Utils: java.lang.String sha1(java.lang.String)>
		SHA-256: 212e2a98164b16e666166dd646f986f1c593536bae21881282113ac4d3b98fb8
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1894)
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String SHA256(java.lang.String,int)>
		SHA-256: 2d0dc3f6b1f1d8f490495cdd26ba2b4ebc189f9bdd9f1ca74b59456f415362a1
		Secure: true
	Object:
		Variable: varReplacer2989
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer2989)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4ca50c9196b2341b78e27cd87450d4013869ca7c7f84ebd8d54ff533e44b5f4b
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.orangefish.app.delicacy.common.DeviceUtils: java.lang.String md5Digest(java.lang.String)>
		SHA-256: 18fb6ed9dce04257a9a28eb1832dfa6c0ff2e1a8088ed35e0b690e5dbe97c99b
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String generateRandomIV(int)>
		SHA-256: 9574bfc9fd9247d48baf4ccd204eca445e1376f67b6c9074c1106c1bbd450e8d
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11226)
		Method: <com.google.android.gms.internal.zzpx: java.lang.String zzbb(java.lang.String)>
		SHA-256: c81ac6dcec7b2bdcb144894050ea8db44a022742c3c0d7d4fdf4f39b9e6cb578
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)
		Method: <cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: javax.net.ssl.SSLContext build()>
		SHA-256: 1f15fdcda9b923b07ad2fb0fff591155d212c798860f8dee84a8c357e9a78696
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String generateRandomIV(int)>
		SHA-256: bce6a960f9593742bc9d3724ef3ef94ca4717b64ca7629b803a8a8b3751bf5a2
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4960ed5964cf30795399c629fbbb244079be57d50bc606bf35e1410625ae5772
		Secure: false

Findings in Java Class: com.taiwanmobile.pt.util.AES

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer2989)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #ae4bf6a114d3f8b525d208481bfd05385c0117ca5ec0c23cd0b8d6e7ea74269a)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2986)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2988, $r3)


Findings in Java Class: cz.msebera.android.httpclient.conn.ssl.SSLContexts

	 in Method: javax.net.ssl.SSLContext createDefault()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1181, varReplacer1181, varReplacer1181)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1181, varReplacer1181, varReplacer1181)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1193, r5, varReplacer1193)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1193, r5, varReplacer1193)


Findings in Java Class: com.orangefish.app.delicacy.billing.util.Security

	 in Method: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


Findings in Java Class: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder

	 in Method: javax.net.ssl.SSLContext build()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r5, $r7, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r5, $r7, $r8)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 20

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 9
	ConstraintError: 1
=====================================================================
