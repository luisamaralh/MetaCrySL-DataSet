Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.idongbusmart-079227A63C09FE50794F1D6DF9CE3D3AC03D104FC7484365D3F3326F7A71AEA8.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Alive 41395  5000
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6586)
		Method: <com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)>
		SHA-256: 1e5be695d94b64ab02a4ec341cf04470babe4340603bc45adf5448af05e1afc1
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1890, varReplacer1891)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 6ca64d65e23ab924583de9beb1ba256713bca96af0681c915f4c6bae55d8bdc
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal()>()
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: 42dc15d52509429553b59ce898007be14edbaf66216ce1c01c69e03f92d773e6
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: 81a2753a8fc39312d9a64b74b28a0649bcf46619da6761f257e09df6bd21d629
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.SecureRandom
		Statement: $r11 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r6)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: ba03d9964f16ea3fac63ae366c88663ffc9f221e3d0257c0f5d7ab05c238bfe7
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r2, varReplacer1881)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: 4bf0cfb8fc5b6b0a47c4e7335ef17d094b1ef503c396743f05bffb8d25460c96
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r11 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: 86feef04828986a5200d5d2906ac3be061b31907eedf078bdf490a6cc50bdfc7
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r3)
		Method: <com.softsecurity.transkey.TransKeyView: java.lang.String EncryptSecureKey(java.lang.String,byte[])>
		SHA-256: 8a1ad795f193ad41fff0f02ee14f4d86b18b719e260a8161100fd805e539d6f0
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8077)
		Method: <com.rimesoft.app.security.aaplus.message.RequestProcess: java.lang.String a(byte[])>
		SHA-256: 6c229f152de731e8a45b03e87709aac8aa9ab25b357e3c0c490859a62ee05251
		Secure: false
	Object:
		Variable: $r14
		Type: javax.net.ssl.KeyManager[]
		Statement: $r14 = virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 606508d92dc600b5f049bd56f4fbede297f038dda3c7339265f98bb204df5dac
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.KeyStore
		Statement: $r6 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 293a851db36e6c63b740b6c0c94d1ef796c8fe1ac73236cfc616cf0a23d10562
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: ddf04eb7b8591cd40da499cd889bab86baca065b6e1744693474e2f48d987000
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r2, varReplacer2477, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: ba9b25af545faf2889ea685fc7d21d7b36ebdd7270839784fa50cb43bae3fd54
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.softsecurity.transkey.TransKeyView: java.lang.String EncryptSecureKey(java.lang.String,byte[])>
		SHA-256: 28422fefcdb06276eb6932d5cd476b0c8eeac23134627b7fe244761ea809f90a
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.hoonsolution.hsjpki.toolkit.HSJUtil: byte[] getRandom(int)>
		SHA-256: d88173b0ff785e9d9a64555828c1eaa2e866bb85e28ae5757d1e87a1466ced37
		Secure: true
	Object:
		Variable: $r0
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: e0b367d403cca227e08a9fbe4de4de6562970a38e0b33ff41686a39b2c7864be
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: 80f76de1489c1fb4e0e4b1105063e97ab3d1bd20ff399fa68d61d8430ddfb42e
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r4, varReplacer2478)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: c23df4728aed91af9f0031f332801428055c50f3d02890e315795246fb1c7c50
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: f5a958dbc34099fe876b1b753bac92f6df190694d66babab1939774bcf3869f4
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r6, varReplacer3117)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: b4f83f84668b13b2cb0a29b512abda474c70f8f32ec647a58d8fdae6f449bc87
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: ddf04eb7b8591cd40da499cd889bab86baca065b6e1744693474e2f48d987000
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r3)
		Method: <com.callgate.launcher.fcc.w: void d()>
		SHA-256: 1438c7f62a995652e6c9c3be366f7ab25b1645e9a546d62de21ac874bdf38bda
		Secure: false
	Object:
		Variable: varReplacer1898
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1898)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: f2faedaf3ac443d51a2e1ec4e16b9407c205fabb5845042254d79ffe00667a0f
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.hoonsolution.hsjpki.common.util.p: byte[] 'if'(int)>
		SHA-256: c10c7762ed013d1cf12101c339af31014abc5f1ede8f25de7b80507c1bf110f
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: 198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer6506)
		Method: <com.hoonsolution.hsjpki.toolkit.HSJUtil: byte[] getRandom(int)>
		SHA-256: 94da1dbedadd884201c5020f176067a8240fa4d54c1bf20ec9affd267930937d
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 6654894e9b4bf4fac3060300b5052745687a89347b52e95e013848af6ed1181b
		Secure: true
	Object:
		Variable: varReplacer1884
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1884)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 390492ed019a21212c25bed1e7a3f0a7c189fdbb9c628b1fc5c0fa81213af32d
		Secure: false
	Object:
		Variable: $r20
		Type: javax.crypto.Cipher
		Statement: $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.Updater: boolean I()>
		SHA-256: ea27a3bb79f905753e304c8dcd28ad2d63750015bf75e8f6f22ba793e01c11a3
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.SSLContext
		Statement: $r12 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer8436)
		Method: <com.lumensoft.qrrelay.QRRelay: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)>
		SHA-256: 632ee3d62a2342f068b0db3abd365008c51b18715ec99703fe1613e6432a453d
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)>
		SHA-256: cf27098c66fee1313e543b215c7518a0ec9da49e7f52a1252ee852b7acca0f67
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: effa1507147cf36182a85c958230a7cc620d7f4829c7191b3b4d3fea51802ec9
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 3afd84bc236f30a8929ad47eea0b5b836525dcc20b957fde6749e0facc06014b
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: f5a958dbc34099fe876b1b753bac92f6df190694d66babab1939774bcf3869f4
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: $r4 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r3)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 1213fed018ac628b7eccb245067487aa19c81713c13b6cce857bf1c2fc51f7bb
		Secure: true
	Object:
		Variable: varReplacer1908
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer1908)
		Method: <m.client.android.library.core.utils.AESUtil: java.security.Key generateKey()>
		SHA-256: e9ec12506f5f09c0c1da55c906cc64ab77bb4e25397eb59064d63aa005923f36
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r8 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r2, varReplacer2477, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: 5080b171b1d1a6133c57aa6af3bbd942a43a5fb8a9d757bbb96b1d05959389df
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: a4f206e21dd7af454f1e6e3919cda81359ffadeef9a5ef22ae8f2f3ef903e67e
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1896, varReplacer1897)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: cf844bdacf662276f6df544a98294f0ed9efba4511ca61d6f816ffb19ea48c3
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rimesoft.app.security.aaplus.message.RequestProcess: java.lang.String a(byte[])>
		SHA-256: 2f7ea5d308dcd54c716917dbf91457368859f55acdb69a8ce5cf38e89c2ff05b
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0)
		Method: <com.bitdefender.antimalware.Updater: java.security.MessageDigest getMD5digester()>
		SHA-256: d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer1908)
		Method: <m.client.android.library.core.utils.AESUtil: java.security.Key generateKey()>
		SHA-256: 2920f31d7560841396e157e2c5d9928bf6bd281b9814ea7823545caf8d460a08
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer4571)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: e644b1b45cb010eadde4c567cfe6313b03c2642d9a70cb1d0fbdd83e8ea17a7a
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String anyValidIdentifierName(java.lang.String)>
		SHA-256: 2474807578ecc7c2004f6ddd2ff3b75987a59449b77e9b005bf8ef69e583eb79
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <m.client.android.library.core.utils.MD5Util: java.lang.String getMD5Hash(byte[])>
		SHA-256: 8b4e0acfc6957cc0929520b2e1a18db8423fc4e0188da37da1bcc1c0dcaf1e93
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1884)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 36d8caadccb4fdf43e5e698c7e631ae05fcbb67e4552a9488c2013167f93956a
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.SSLContext
		Statement: $r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: c0249843b1cc99c030409275fa08a70ebe7583584061050d15b65a90b07e536d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal()>()
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 8afb4baab80d511f226e1cb8eec43b044ea621a66f8c9345818e9a3fc8f72514
		Secure: false
	Object:
		Variable: $r17
		Type: byte[]
		Statement: $r17 = virtualinvoke $r20.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r17)
		Method: <com.bitdefender.antimalware.Updater: boolean I()>
		SHA-256: bbe737f2389650b7e2c0c0d21948831c8767653a10e2a1dae4390f4241c4308b
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: $r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer7922)
		Method: <com.hoonsolution.hsjpki.common.util.p: byte[] 'if'(int)>
		SHA-256: 5450c1c5241c0b411074b82cd10e233226b29b5d2d9da5b98a405770df6ee66c
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: ff2e9a9ab76a5d610604f29769367e1f0e3be9fa3ce046a265c87decc9663d2e
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r13 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r3, varReplacer3115, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 4b8219d79bb7d4164ba788aef55cbe43391fed58a086c8a2e579e2d743c59484
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: virtualinvoke $r11.<java.security.SecureRandom: void nextBytes(byte[])>($r12)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: 146c51930857392d8b71c69d1567da9d04a63533d70bce3c35d1a70da189b382
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>($r7, varReplacer4680)
		Method: <com.softsecurity.transkey.b.b: void k(javax.crypto.Mac,byte[],int,byte[],int)>
		SHA-256: 6c229f1af8c21e7385b7f848f3a4d10ce928c44554898ca0a72a40f76b8e3e12
		Secure: true
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 9bd06a307c023d166375f42b2afe47214f0295944de30c7e1268a6bbd2b08065
		Secure: true
	Object:
		Variable: $r13
		Type: byte[]
		Statement: $r13 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r3, varReplacer3115, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 8437f62a3dd50bb80f3f9a427ad31e368a08c52c9630b7528730fb81957be2bf
		Secure: false
	Object:
		Variable: r9
		Type: java.security.SecureRandom
		Statement: specialinvoke r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.callgate.launcher.fcc.w: void d()>
		SHA-256: e9492640b8d4479a67c56fa4be68136ff139b91702e50f96d0febd7f92fdfe67
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2429)
		Method: <m.client.android.library.core.utils.MD5Util: java.lang.String getMD5Hash(byte[])>
		SHA-256: 9f2185e7e8aedc50473024c297355d7894c624bd5f5ad2184215b14be95fad83
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.MessageDigest
		Statement: $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String anyValidIdentifierName(java.lang.String)>
		SHA-256: 4db10eadef9423bf74d083f2717fd8fa4d4a2674269c15ca5e74e0f475b924cb
		Secure: false
	Object:
		Variable: $r27
		Type: byte[]
		Statement: $r27 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: 4344d8626abe3048caff23accf12ecd39ecefb7effbddc859523f961bdf93c36
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r4)
		Method: <com.softsecurity.transkey.KeypadView: void k(android.content.Context)>
		SHA-256: 93cd2edcb655d2aaec112b98bec37b9c68cbd1d6c054399305118a86f3060bdb
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1898)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 8ff97a467dfe1bfaae5ce0d3429d21608310a15804a267a3e9cdd2617f95dd1e
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 72dbaaff5cd171f6096b90c419e52d21ed5803121b79335a7ec8d5f696320c7a
		Secure: true
	Object:
		Variable: r34
		Type: java.security.SecureRandom
		Statement: specialinvoke r34.<java.security.SecureRandom: void <init>()>()
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: 3888fb0c7993686f0afb8246950549507ac421680b221b2bc544ceee1c844930
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer8454)
		Method: <com.lumensoft.qrrelay.QRRelay: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)>
		SHA-256: cb266a0c2f996f7cf1318b79582e640c95897c3315aa2bbd2cda131dec3fd2c6
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: feb06c68fedfc5f3c1e91f140c604108ff311dd3b96ece89fbfda30dea04c8ba
		Secure: true

Findings in Java Class: m.client.android.library.core.utils.AESUtil

	 in Method: byte[] cryptToBytes(int,java.io.InputStream)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2475, $r6)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #c23df4728aed91af9f0031f332801428055c50f3d02890e315795246fb1c7c50)
			Unexpected call to method <javax.crypto.Cipher: byte[] doFinal()> on object of type javax.crypto.Cipher. Expect a call to one of the following methods javax.crypto.Cipher: byte[] doFinal(byte[]),javax.crypto.Cipher: byte[] doFinal(byte[],int,int),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]),javax.crypto.Cipher: void init(int,java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom),javax.crypto.Cipher: void init(int,java.security.cert.Certificate),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom),javax.crypto.Cipher: int update(byte[],int,int,byte[],int),javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer),javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom),javax.crypto.Cipher: byte[] wrap(java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int),javax.crypto.Cipher: byte[] update(byte[],int,int),javax.crypto.Cipher: int update(byte[],int,int,byte[]),javax.crypto.Cipher: byte[] update(byte[]),javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)
			at statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal()>()


	 in Method: void crypt(int,java.io.File,java.io.File)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3116, $r8)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #b4f83f84668b13b2cb0a29b512abda474c70f8f32ec647a58d8fdae6f449bc87)
			Unexpected call to method <javax.crypto.Cipher: byte[] doFinal()> on object of type javax.crypto.Cipher. Expect a call to one of the following methods javax.crypto.Cipher: byte[] doFinal(byte[]),javax.crypto.Cipher: byte[] doFinal(byte[],int,int),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]),javax.crypto.Cipher: void init(int,java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom),javax.crypto.Cipher: void init(int,java.security.cert.Certificate),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom),javax.crypto.Cipher: int update(byte[],int,int,byte[],int),javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer),javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom),javax.crypto.Cipher: byte[] wrap(java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int),javax.crypto.Cipher: byte[] update(byte[],int,int),javax.crypto.Cipher: int update(byte[],int,int,byte[]),javax.crypto.Cipher: byte[] update(byte[]),javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal()>()


	 in Method: java.lang.String decrypt(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1899, $r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1884)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1898)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1892, $r5)


	 in Method: java.lang.String encrypt(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1879, $r4)


	 in Method: java.security.Key generateKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer1908)


Findings in Java Class: com.softsecurity.transkey.b.b

	 in Method: void k(javax.crypto.Mac,byte[],int,byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $i3 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>()

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r7)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r4)


	 in Method: byte[] k(java.lang.String,byte[],byte[],int,int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: staticinvoke <com.softsecurity.transkey.b.b: void k(javax.crypto.Mac,byte[],int,byte[],int)>($r3, $r2, $i0, $r1, varReplacer4673)


Findings in Java Class: com.secureland.smartmedic.CheckIntegrity

	 in Method: java.lang.String anyValidIdentifierName(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #4db10eadef9423bf74d083f2717fd8fa4d4a2674269c15ca5e74e0f475b924cb)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook

	 in Method: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #1e5be695d94b64ab02a4ec341cf04470babe4340603bc45adf5448af05e1afc1)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6586)


Findings in Java Class: com.rimesoft.app.security.aaplus.message.RequestProcess

	 in Method: java.lang.String a(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6c229f152de731e8a45b03e87709aac8aa9ab25b357e3c0c490859a62ee05251)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8077)


Findings in Java Class: com.lumensoft.qrrelay.QRRelay

	 in Method: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer8451, $r13, varReplacer8451)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #cb266a0c2f996f7cf1318b79582e640c95897c3315aa2bbd2cda131dec3fd2c6)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer8454)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer8451, $r13, varReplacer8451)


Findings in Java Class: com.bitdefender.antimalware.UpdatePatchApplicator

	 in Method: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r11 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r9.<java.security.MessageDigest: void update(byte[],int,int)>($r5, varReplacer13364, $i4)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r4 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r9.<java.security.MessageDigest: void update(byte[],int,int)>($r4, varReplacer13360, $i4)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)


Findings in Java Class: com.bitdefender.antimalware.Updater

	 in Method: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r25 = staticinvoke <com.bitdefender.antimalware.Updater: java.security.MessageDigest getMD5digester()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r25.<java.security.MessageDigest: void update(byte[],int,int)>($r27, varReplacer13561, $i0)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13531, r38, $r8)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r27 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest()>()

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13531, r38, $r8)


	 in Method: void I(java.lang.String,boolean)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r5 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()


	 in Method: boolean I()
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer13436, $r19)


Findings in Java Class: com.softsecurity.transkey.TransKeyView

	 in Method: java.lang.String EncryptSecureKey(java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4263, $r7)


Findings in Java Class: com.callgate.launcher.fcc.w

	 in Method: void d()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9673, r10, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer9673, r10, $r5)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 68

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 8
	ConstraintError: 2
	TypestateError: 9
	RequiredPredicateError: 17
=====================================================================
