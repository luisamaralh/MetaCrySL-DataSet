Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.waritaxi.app-1302D8543D7BA80F1A080A8555B508686B67D31570C9831AD3A6C67C739F04A4.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.sharesdk.wechat.utils.j: byte[] a(java.lang.String,java.lang.String,int)>
		SHA-256: 9093915e9c69f24e21e4ebaff597ca98d1c23ccf4250950c32c27bb4554e29d0
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6421)
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: 6f709eae0ed7b7f98c4b951f812d70884b6c181ba93a08f4db1e46a593635e4f
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <m.framework.utils.Data: byte[] rawMD5(java.lang.String)>
		SHA-256: ae2d57d81f9881fcacf30cb07f97424b41b0b8217ce6835e14ac8245a3f8f416
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4939)
		Method: <cn.sharesdk.wechat.utils.j: byte[] a(java.lang.String,java.lang.String,int)>
		SHA-256: 555651e010a47cfaecf1e1ab792f337349ed31dc1915b977ef04145fd785cc0
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3037)
		Method: <m.framework.utils.Data: byte[] rawMD5(java.lang.String)>
		SHA-256: df29bf6be09d279615aded5d1c124c3a9852ec50a15972fde0981c6c83464258
		Secure: true
	Object:
		Variable: r18
		Type: java.security.SecureRandom
		Statement: specialinvoke r18.<java.security.SecureRandom: void <init>()>()
		Method: <com.mob.tools.network.NetworkHelper: java.net.HttpURLConnection getConnection(java.lang.String,com.mob.tools.network.NetworkHelper$NetworkTimeOut)>
		SHA-256: 2670ac95b8a338a5643e8b819e1a0adf50aa74adc41602ff45c107d68b23a862
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer4403, $i0, $r2, varReplacer4403)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: d9531c3d63542a5906e55f11f0ad83adb99c00128c035ef8651d14649ad0d99e
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3062)
		Method: <m.framework.network.SSLSocketFactoryEx: void <init>(java.security.KeyStore)>
		SHA-256: 72dda524f3f540d1cfa1ea16b6ca4c85450abceb4e2c287c9ca940defae9899d
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.jpush.android.util.ai: java.lang.String b(java.lang.String)>
		SHA-256: e3190b6f4323befbf18670a0eb10cd2790133ea7e985cb6f92d999f647f560e9
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <cn.jpush.android.util.ai: java.lang.String b(java.lang.String)>
		SHA-256: 589f10f65a2d04fe4b0bb06abf8101daf047c6762569191c753224ee717411cc
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <cn.jpush.android.util.a: java.lang.String a(java.lang.String)>
		SHA-256: bfdf7a7690f99313d7d90ffe799c08accc3face2ec5e8c2f9d6c2ccbb3a7f821
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer4399, varReplacer4400)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: 2ff7534c4cfe70622b8cf1be7a656972af56b993826150fd5a4f906e5553dd64
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer4405)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: f07999640d76b82bc9046ca0e104207878304d89430f9a62980f0ecfd4585fda
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <cn.jpush.android.util.a: java.lang.String b(java.lang.String)>
		SHA-256: 8e4d3ce3f6a3961627a164a718666216cbb71ad4d5d8d2a6bc5f52f33a56ba40
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <cn.jpush.android.util.a: java.lang.String a(byte[])>
		SHA-256: edf8d4512ea4d685450853f37af1c60bdb4661ea96e0a8476dfe9d41f4bd92a
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: ac2912fd2a8cc62f2d028959fdfebed1a18ae39f8a205fd829cc8080606487cd
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <cn.jpush.android.service.o: int a()>
		SHA-256: 653797a3eb9e4ef0deb00eee8dbd188412609eac7343ec8708aa488926eaccbd
		Secure: true
	Object:
		Variable: varReplacer4405
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer4405)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: fb07b32489aba456fd63ac81301f45685bc8f7cba9174b2e1710a59c329e1ca5
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <m.framework.network.NetworkHelper: org.apache.http.client.HttpClient getSSLHttpClient()>
		SHA-256: 43cd7d360567d752626715c39f9e6e86ad5d65c8f3ed917494047c0a91c8648c
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.service.o: int a()>
		SHA-256: fd9d39511df74aea82f21cf2e65bf81d82654e9f49b3696b92868e26ab2ec055
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2631)
		Method: <com.mob.tools.utils.Data: byte[] rawMD5(java.io.InputStream)>
		SHA-256: 2731691101cf592f772252c553581dc4bfba69f8f271faeec7d70cd647956e2b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.util.a: java.lang.String b(java.lang.String)>
		SHA-256: f5d4bf9ca7f7fb9000cf6a89dae134f0d93e52312b490bf6d8a3635e0c274af1
		Secure: true
	Object:
		Variable: $r12
		Type: javax.net.ssl.SSLContext
		Statement: $r12 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2856)
		Method: <com.mob.tools.network.NetworkHelper: java.net.HttpURLConnection getConnection(java.lang.String,com.mob.tools.network.NetworkHelper$NetworkTimeOut)>
		SHA-256: c4d1475dccfc95d5ee2ed162b6213d9ba2dbe49b609321dcc3d465c210f9e6c1
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r5.<javax.crypto.Cipher: int doFinal(byte[],int)>($r2, $i0)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: 8df24129554b6fedc63b16805f88a2dbfe55ed3af1bd3740681b630d8d55eee6
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4383)
		Method: <com.mob.tools.utils.Data: byte[] SHA1(byte[])>
		SHA-256: ac1fa6ca01ae423c62b867e816a43d29e41d64006e8358de23cddd95eb2334b3
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.util.a: java.lang.String a(java.lang.String)>
		SHA-256: 67f8276464ff2b603934593edfd3991f3b602712d92e93712f83733b7783915
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1106)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: 305b173baec21fa65ef009ba7b54950b6a19520dc45c8f07978367b0a3ed2f5e
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <cn.jpush.android.util.a: java.lang.String a(byte[])>
		SHA-256: c4d4007881f660d31095047c858a7cddf0ade719a9b3b9bb76358ae5434d949b
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.mob.tools.utils.Data: byte[] rawMD5(java.io.InputStream)>
		SHA-256: bc4eb66b1b721a4a7f151d0e6ea3bd2aee96662bf12a7380623276c8708f84d7
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r4)
		Method: <cn.jpush.android.util.g: byte[] a(java.io.File)>
		SHA-256: c674f616d8a4149c10b3f91dfa9584390dcb6804f11b69608665967bac43ce50
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.jpush.android.util.g: byte[] a(java.io.File)>
		SHA-256: 9d5518b928395bd05bce5b6b363adfca98533751c6f8b6369158fc7086bf8946
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.mob.tools.utils.Data: byte[] SHA1(byte[])>
		SHA-256: cdff87fc6ee152b4274d6b94084108209269e65da113e6beef5395960d55f5f3
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer4403, $i0, $r2, varReplacer4403)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: e7e083c1b011a6db293f3660ea45b44366a12b79e727724f317228eb6a8f62aa
		Secure: false

Findings in Java Class: cn.jpush.android.util.g

	 in Method: byte[] a(java.io.File)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #c674f616d8a4149c10b3f91dfa9584390dcb6804f11b69608665967bac43ce50)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.mob.tools.utils.Data

	 in Method: byte[] rawMD5(java.io.InputStream)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #2731691101cf592f772252c553581dc4bfba69f8f271faeec7d70cd647956e2b)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()


	 in Method: byte[] AES128Encode(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4407, $r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer4405)


Findings in Java Class: com.mob.tools.network.NetworkHelper

	 in Method: java.net.HttpURLConnection getConnection(java.lang.String,com.mob.tools.network.NetworkHelper$NetworkTimeOut)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2850, r19, r18)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2850, r19, r18)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1107, r5, varReplacer1107)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1107, r5, varReplacer1107)


Findings in Java Class: m.framework.network.SSLSocketFactoryEx

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3060, r5, varReplacer3060)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3060, r5, varReplacer3060)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 34

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 8
	TypestateError: 2
=====================================================================
