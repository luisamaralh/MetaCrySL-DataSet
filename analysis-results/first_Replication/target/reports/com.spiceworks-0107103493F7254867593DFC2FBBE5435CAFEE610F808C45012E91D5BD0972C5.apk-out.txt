Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.spiceworks-0107103493F7254867593DFC2FBBE5435CAFEE610F808C45012E91D5BD0972C5.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: varReplacer885
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer885)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: c9ab4ead79a7de77b088bd09e0be40f752004da56f49e013d91e398cd48926a7
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer891)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: ec07ad79720b2754eace4adda47e2e82f6583805748297dfc87d8cf33480e40b
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: fa136a602799631e6b4b59350ee9e51490addbaa3e0a4d88762b38031b45344d
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: bf58e9be970bb4d9b8b9779a2db2332dda7629a9233a386367015fa09918a479
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer884)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: c0f5be053e29a4cf398cf1026a2105c0c71beabbe29e3fd2f31bb0b93528cc8f
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer889, varReplacer890)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: bb3f5bb1338c35c13d9a77c696d6f6e88666a3c14f14ebc790191d9ab4fe7d3e
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer885)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: cb765dd978021f1a23e43b13bb123684cb34519681e39f8932d707227dc6625
		Secure: false
	Object:
		Variable: varReplacer4615
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4615)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 28e405843882fc7c3ed716389f833fc7c63ace248331610d95fe1296418c4867
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4615)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 44d96c6f15c82d2ce0b33a6611c8cb632aa8356a90aab078015eeb7fdb899ee8
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 8de80dfde750b54a8dc4f0a31eeee957e344d00f114bdcad0dca32f685f88fae
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: a79e94387df141fe9dcb34d2ae3fc05c5097b22bbdc3a1b0291ebb4f6436ceb4
		Secure: true
	Object:
		Variable: r12
		Type: java.security.SecureRandom
		Statement: specialinvoke r12.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.apps.analytics.PersistentHitStore: void loadExistingSession(android.database.sqlite.SQLiteDatabase)>
		SHA-256: 28ce7f80687f60d700936748d1561bbe406957299dfe63f40eacb0b994499d24
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer887)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: e58381cc66c5cf192b73c135adfbc4d2a2133b280e0f0357d7f130a366f53eff
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4791)
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: 1f3b378fdb52e2f98b903d1379af595d4e1af086778d90b837ab94dd3ff98abc
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 9a39546100165a37e889fd7cf2a6477829cbb9e55b2e972d72febc045529fcda
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4617)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: c1e999a9b4f620e68817b15975aa0494fdfa8611eadea87e88c7b19cf9949e11
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 4755c5e34f3121596ca9a7f33f965995bb6b82fd562703d3839051d031b7eed3
		Secure: false

Findings in Java Class: com.spiceworks.db.SimpleCrypto

	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c0f5be053e29a4cf398cf1026a2105c0c71beabbe29e3fd2f31bb0b93528cc8f)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer884)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer885)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer883, $r2)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c1e999a9b4f620e68817b15975aa0494fdfa8611eadea87e88c7b19cf9949e11)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4617)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4615)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4616, $r2)


	 in Method: byte[] getRawKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer888, $r2)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 17

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 2
	RequiredPredicateError: 5
=====================================================================
